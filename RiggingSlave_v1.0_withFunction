from PySide.QtGui import *
from PySide.QtCore import *
import maya.OpenMayaUI as mui
import maya.cmds as cmds
from shiboken import wrapInstance

########################################################################################### 

# Main UI
def mayaMainWindow():
    mainWindow= mui.MQtUtil.mainWindow()
    return wrapInstance(long(mainWindow), QWidget)

class Form(QDialog):
    def __init__(self, parent=mayaMainWindow()):
        super(Form, self).__init__()
        # Menu Bar
        bar= QMenuBar()
        
        barFile= bar.addMenu("Edit")
        self.fileReset= barFile.addAction("Reset      ")
        self.fileReset.setShortcut("Ctrl + R")
        self.fileReset.triggered.connect( self.resetUI )
        
        barFile.addSeparator()
        
        fileQuit= barFile.addAction("Quit      ")
        self.connect( fileQuit, SIGNAL("triggered()"), SLOT("reject()") )

        barHelp= bar.addMenu("Help")
        helpReadme= barHelp.addAction("ReadMe      ")
        helpReadme.triggered.connect( self.readMeDialog )
          
        # Tab Widget
        self.tab= QTabWidget()
        self.tab1= QWidget()
        self.tab2= QWidget()
        self.tab3= QWidget()
        self.tab.addTab( self.tab1, "Prop" )
        self.tab.addTab( self.tab2, "Biped" )
        self.tab.addTab( self.tab3, "Quadruped" )
        self.tab1UI()
        self.tab2UI()
        self.tab3UI()
        
        # Layout
        mainLayout= QVBoxLayout()
        mainLayout.addWidget( bar )
        mainLayout.setSpacing(5)
        mainLayout.addWidget( self.tab )
        mainLayout.stretch(1)
        # Window Structure
        self.setLayout(mainLayout)
        #self.resize( 220, 400 )
        self.setWindowTitle("RiggingSlave v1.0")
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
        
###########################################################################################         
    
    # Menu Function
    def resetUI(self):
        # reset Function
        self.addCnstRB.setChecked(True)
        self.wireInOneRB.setChecked(True)
        self.crvLE.clear()
        self.ctrlSB.setValue( 3 )
        self.yesRB.setChecked(True)
        self.qYesRB.setChecked(True)
        self.bendyBox.setChecked(True)
        self.allRB.setChecked(True)
        self.qBendyBox.setChecked(True)
        self.qAllRB.setChecked(True)
        print "Tool Reset.",
        
    def readMeDialog(self):
        # Read Me Function
        print "readMe"
        
###########################################################################################                
    
    # Prop Tab UI
    def tab1UI(self):
        tab1Layout= QVBoxLayout()
        tab1Layout.addWidget( self.propGrpBox() )
        tab1Layout.addWidget( self.ropeGrpBox() )
        tab1Layout.addWidget( self.cRigGrpBox() )
        self.tab1.setLayout( tab1Layout )
        tab1Layout.addStretch(1)
    
    def propGrpBox(self):
        propLayout= QGridLayout()
        propBox= QGroupBox("Auto Prop Rig")

        ctrkMLabel= QLabel( "Control Method" )
        self.addSkinRB= QRadioButton("&Add Joint")
        self.addCnstRB= QRadioButton("&Constraint")
        self.propRigBttn= QPushButton( "Rig" )
        
        self.addCnstRB.setChecked(True)
        
        propLayout.addWidget( ctrkMLabel, 0, 0, 1, 3 )
        propLayout.addWidget( self.addSkinRB, 1, 0 )
        propLayout.addWidget( self.addCnstRB, 1, 1 )
        propLayout.addWidget( self.propRigBttn, 2, 0, 1, 3 )
        propBox.setLayout( propLayout )
    
        self.propRigBttn.clicked.connect( self.PropAutoRig )

        return propBox
        
########################################################################################### 

    def PropAutoRig(self):
         selObj= cmds.ls(sl=1)
         cmds.select(cl=1)
         
         if self.addSkinRB.isChecked() == True :
             if cmds.objExists( "JNT_GRP" ) == True :
                 pass
             else:
                 jntGrp= cmds.group( n="JNT_GRP", em=1 )
         
         if cmds.objExists( "CTL_GRP" ) == True :
             pass
         else:
             ctrlGrp= cmds.group( n="CTL_GRP", em=1 )

         if len(selObj) > 0 :
             for each in selObj:
                 objCentre= cmds.objectCenter( each, gl= True )
                 rtPiv= cmds.xform( each, q=True, ro= True, ws=True )
                 tmpLoc= cmds.spaceLocator( n="TmpLoc" )[0]
                 cmds.xform( tmpLoc, t= objCentre, ro= rtPiv)
                 cmds.select(cl=1)
                 ctrl= cmds.circle( n= '%s_CTL' % each, nr=(0,1,0), ch=0 )[0]
                 cmds.setAttr( "%s.v" % ctrl, l=1, k=0, ch=0 )
                 cmds.addAttr( ctrl, ln= "extra", at= "enum", en= "________")
                 cmds.setAttr( "%s.extra" % ctrl, e=True, ch=True, l=True, k=True )
                 cmds.addAttr( ctrl, ln= "geoVisibility", at= "long", min=0, max=1, dv=1 )
                 cmds.setAttr( "%s.geoVisibility" % ctrl,e= True, k=True )
                 cmds.setAttr( '%s.overrideEnabled' % ctrl, 1 )
                 cmds.setAttr( '%s.overrideColor' % ctrl, 17 )
                 space= cmds.group( n='%s_GRP' % ctrl, em=0 )
                 tmpCnst= cmds.parentConstraint( tmpLoc, space, mo=0 )
                 cmds.delete( tmpCnst, tmpLoc )
                 cmds.parent( space, "CTL_GRP" )
                 if self.addSkinRB.isChecked() == True :
                     jnt= cmds.joint( n="%s_JNT" % each )
                     cmds.parent( jnt, "JNT_GRP" )
                     tmpCnst= cmds.parentConstraint( space, jnt, mo=0 )
                     cmds.delete( tmpCnst )
                     cmds.skinCluster( jnt, each, n= "%sShape_skinCluster" % each )
                     cmds.parentConstraint( ctrl, jnt, mo=0 )
                     cmds.scaleConstraint( ctrl, jnt, mo=0 )
                     cmds.connectAttr( "%s.geoVisibility" % ctrl, "%s.v" % each )                     
                 else:
                     cmds.parentConstraint( ctrl, each,  mo=1 )
                     cmds.scaleConstraint( ctrl, each, mo=1 )
                     cmds.connectAttr( "%s.geoVisibility" % ctrl, "%s.v" % each )
                 print "Added Rig To All Selected Items. ",
         else:
             cmds.warning( "Nothing is selected!!!" )
            

###########################################################################################         
    
    def ropeGrpBox(self):
        ropeLayout= QGridLayout()
        ropeBox= QGroupBox("Auto Rope Rig")
        
        IKSpineRB= QRadioButton("&IK Spine")
        self.wireInOneRB= QRadioButton( "&Wire Deformer" )

        self.crvLE= QLineEdit()
        self.crvLE.setPlaceholderText( "Please add curve..." )
        crvBttn= QPushButton( "Add Curve" )
        crvBttn.setStyleSheet("background-color: #333333 ")
        crvMenu = QMenu(self)
        crvMenu.addAction("&Add Selected Curve")
        crvMenu.addAction("&Poly Edge To Curve")
        crvMenu.addAction("&Create Curve")
        crvBttn.setMenu(crvMenu)      
        
        ctrlLabel= QLabel("Ctrls number:")
        self.ctrlSB= QDoubleSpinBox()
        self.ctrlSB.setRange( 3, 1000 )
        
        ropeRigBttn= QPushButton( "Rig" )
        
        self.wireInOneRB.setChecked(True)
        
        ropeLayout.addWidget( IKSpineRB, 0, 0 )
        ropeLayout.addWidget( self.wireInOneRB, 0, 1 )
        ropeLayout.addWidget( self.crvLE, 1, 0, 1, 3 )
        ropeLayout.addWidget( crvBttn, 2, 0, 1, 3 )
        ropeLayout.addWidget( ctrlLabel, 3, 0 )
        ropeLayout.addWidget( self.ctrlSB, 3, 1 )
        ropeLayout.addWidget( ropeRigBttn, 4, 0, 1, 3 )
        ropeBox.setLayout( ropeLayout )
        
        return ropeBox
        
    def cRigGrpBox(self):
        cRigLayout= QVBoxLayout()
        cRigBox= QGroupBox( "Master Controllers")
        
        cRigBttn= QPushButton( "Add" )
        cRigBttn.setStyleSheet("background-color: #777777")
        
        cRigLayout.addWidget( cRigBttn )
        cRigBox.setLayout( cRigLayout )
        
        return cRigBox

########################################################################################### 
    
    # Biped Tab UI
    def tab2UI(self):
        tab2Layout= QVBoxLayout()
        tab2Layout.addWidget( self.boneGrpBox() )
        tab2Layout.addWidget( self.bindSkinGrpBox() )
        tab2Layout.addWidget( self.bipedRigGrpBox() )
        self.tab2.setLayout( tab2Layout )
        tab2Layout.addStretch(1)
        
    def boneGrpBox(self):
        boneLayout= QGridLayout()
        boneBox= QGroupBox("Proxy Joint")
        
        mirrorLabel= QLabel( "Mirror Joint?" ) 
        self.yesRB= QRadioButton( "Yes" )
        self.noRB= QRadioButton( "No" )
        
        setUpJntBttn= QPushButton("Create")
        resetJntBttn= QPushButton("Reset")
        resetJntBttn.setStyleSheet("background-color: #333333 ")
        freezeJntBttn= QPushButton( "Polish" )
        freezeJntBttn.setStyleSheet("background-color: #666666")
        
        self.yesRB.setChecked(True)
        
        boneLayout.addWidget( mirrorLabel, 0, 0 )
        boneLayout.addWidget( self.yesRB, 0, 1 )
        boneLayout.addWidget( self.noRB, 0, 2 )
        boneLayout.addWidget( setUpJntBttn, 1, 0, 1, 3 )
        boneLayout.addWidget( resetJntBttn, 2, 0, 1, 3 )
        boneLayout.addWidget( freezeJntBttn, 3, 0, 1, 3 )
        boneBox.setLayout( boneLayout )
        
        return boneBox
        
    def bindSkinGrpBox(self):
        bindSkinLayout= QVBoxLayout()
        bindSkinBox= QGroupBox( "Skinning" )
        
        bindBttn= QPushButton( "Bind Skin" )

        bindSkinLayout.addWidget( bindBttn )
        bindSkinBox.setLayout( bindSkinLayout )
        
        return bindSkinBox
        
    def bipedRigGrpBox(self):
        bipedLayout= QVBoxLayout()
        bipedBox= QGroupBox( "Setup Controllers" )
        
        setupRigBttn= QPushButton( "Setup Rig" )
        setupRigBttn.setStyleSheet("background-color: #777777")
        
        bipedLayout.addWidget( self.bendyBox() )
        bipedLayout.addWidget( setupRigBttn )
        bipedBox.setLayout( bipedLayout )
        
        return bipedBox
        
    def bendyBox(self):
        bendyLayout= QVBoxLayout()
        self.bendyBox= QGroupBox("Bendy Setup")
        self.bendyBox.setCheckable(True)
        self.bendyBox.setChecked(True)
        
        self.allRB= QRadioButton( "All" )
        self.armRB= QRadioButton( "Arm" )
        self.legRB= QRadioButton( "Leg" )
        
        self.allRB.setChecked(True)
        
        bendyLayout.addWidget( self.allRB )
        bendyLayout.addWidget( self.armRB )
        bendyLayout.addWidget( self.legRB )
        self.bendyBox.setLayout( bendyLayout )
        
        return self.bendyBox

########################################################################################### 
        
    # Quadruped Tab UI
    def tab3UI(self):
        tab3Layout= QVBoxLayout()
        tab3Layout.addWidget( self.qBoneGrpBox() )
        tab3Layout.addWidget( self.qBindSkinGrpBox() )
        tab3Layout.addWidget( self.quadrupedRigGrpBox() )
        self.tab3.setLayout( tab3Layout )
        tab3Layout.addStretch(1)
        
    def qBoneGrpBox(self):
        qBoneLayout= QGridLayout()
        qBoneBox= QGroupBox("Proxy Joint")
        
        qMirrorLabel= QLabel( "Mirror Joint?" ) 
        self.qYesRB= QRadioButton( "Yes" )
        self.qNoRB= QRadioButton( "No" )
        
        qSetUpJntBttn= QPushButton("Create")
        qResetJntBttn= QPushButton("Reset")
        qResetJntBttn.setStyleSheet("background-color: #333333 ")
        qFreezeJntBttn= QPushButton( "Polish" )
        qFreezeJntBttn.setStyleSheet("background-color: #666666")
        
        self.qYesRB.setChecked(True)
        
        qBoneLayout.addWidget( qMirrorLabel, 0, 0 )
        qBoneLayout.addWidget( self.qYesRB, 0, 1 )
        qBoneLayout.addWidget( self.qNoRB, 0, 2 )
        qBoneLayout.addWidget( qSetUpJntBttn, 1, 0, 1, 3 )
        qBoneLayout.addWidget( qResetJntBttn, 2, 0, 1, 3 )
        qBoneLayout.addWidget( qFreezeJntBttn, 3, 0, 1, 3 )
        qBoneBox.setLayout( qBoneLayout )
        
        return qBoneBox
        
    def qBindSkinGrpBox(self):
        qBindSkinLayout= QVBoxLayout()
        qBindSkinBox= QGroupBox( "Skinning" )
        
        qBindBttn= QPushButton( "Bind Skin" )

        qBindSkinLayout.addWidget( qBindBttn )
        qBindSkinBox.setLayout( qBindSkinLayout )
        
        return qBindSkinBox
        
    def quadrupedRigGrpBox(self):
        quadrupedLayout= QVBoxLayout()
        quadrupedBox= QGroupBox( "Setup Controllers" )
        
        qSetupRigBttn= QPushButton( "Setup Rig" )
        qSetupRigBttn.setStyleSheet("background-color: #777777")
        
        quadrupedLayout.addWidget( self.qBendyBox() )
        quadrupedLayout.addWidget( qSetupRigBttn )
        quadrupedBox.setLayout( quadrupedLayout )
        
        return quadrupedBox
        
    def qBendyBox(self):
        qBendyLayout= QVBoxLayout()
        self.qBendyBox= QGroupBox("Bendy Setup")
        self.qBendyBox.setCheckable(True)
        self.qBendyBox.setChecked(True)
        
        self.qAllRB= QRadioButton( "All" )
        self.qArmRB= QRadioButton( "Arm" )
        self.qLegRB= QRadioButton( "Leg" )
        
        self.qAllRB.setChecked(True)
        
        qBendyLayout.addWidget( self.qAllRB )
        qBendyLayout.addWidget( self.qArmRB )
        qBendyLayout.addWidget( self.qLegRB )
        self.qBendyBox.setLayout( qBendyLayout )
        
        return self.qBendyBox
        

        
if __name__ == "__main__":
    a= Form()
    a.show()
