import maya.cmds as cmds
import maya.mel as mel

###### Seamless IKFKswitch Leg Setup Class ######
class sIkFkLegSetup_Cl():
    def __init__( self, hipJnt, kneeJnt, ankleJnt ):
        self.hipJnt= hipJnt
        self.kneeJnt= kneeJnt
        self.ankleJnt= ankleJnt
            
        if cmds.objExists( self.hipJnt ) == True:
            if cmds.objExists( self.kneeJnt ) == True:
                if cmds.objExists( self.ankleJnt ) == True:
                    self.sIkFkLegSetup_Fn()
                else:
                    cmds.warning( "Ankle joint not found!" )
            else:
                cmds.warning( "Knee joint not found!" )
        else:
            cmds.warning( "Hip joint not found!" )
    
    # Seamless IKFKswitch leg Setup Function
    def sIkFkLegSetup_Fn(self):

        self.legIkJnt= []
        self.legIkDrvJnt= []
        self.legFkJnt= []
        self.legFkCTL= []
        self.legFkCTLGRP= []
        self.extraCTLList= []
        self.extraCTLGRPList= []
        self.skinJnt= []
        allCTLGRP= []
        
        # Define prefix
        if self.hipJnt.startswith( 'L_h' ):
            self.prefix = "L_leg"
        elif self.hipJnt.startswith( 'R_h' ):
            self.prefix = "R_leg"
        else:
            cmds.warning( "Please use 'L_' or 'R_' for leg joint's prefix !" )
        
        self.locGRP= cmds.group( n= "%s_loc_GRP" % self.prefix, em=1 )
        self.extraJntGRP= cmds.group( n= "%s_extraJnt_GRP" % self.prefix, em=1 )
        self.legJntGRP= cmds.group( n= "%s_Jnt_GRP" % self.prefix, em=0 )
        self.legExtra= cmds.group( n= "%s_extraNodes" % self.prefix, em=0 )
        self.legIKCTLGRP= cmds.group( n= "%s_IK_CTL_GRP" % self.prefix, em=1 )
        self.legExtCTLGRP= cmds.group( n= "%s_extraCTL_GRP" % self.prefix, em=1 )
        self.legCTLGRP= cmds.group( n= "%s_CTL_GRP" % self.prefix, em=0 )
        cmds.parent( self.legIKCTLGRP, self.legCTLGRP  )
        cmds.parent( self.locGRP, self.legExtra  )
        cmds.setAttr( "%s.v" % self.legJntGRP, 0 )
        cmds.setAttr( "%s.v" % self.locGRP, 0 )
        
        # Create Ik, Fk & skin joint set
        self.legJnt= [ self.hipJnt, self.kneeJnt, self.ankleJnt ]
        ankleJnt02= cmds.duplicate( self.ankleJnt )[0]
        self.legJnt.append( ankleJnt02 )
        cmds.parent( ankleJnt02, self.ankleJnt )
        jntRad= cmds.getAttr( "%s.radius" % self.hipJnt )
        
        # IK joints
        cmds.select( cl=1 )
        for each in self.legJnt:
            ikJnt= cmds.joint( n= str(each).replace( "Jnt", "IK" ), rad= jntRad*2 )
            tmpCnst= cmds.parentConstraint( each, ikJnt, mo=0 )
            cmds.delete( tmpCnst )
            self.legIkJnt.append( ikJnt )
        
        cmds.makeIdentity( self.legIkJnt[0], a=1, t=1, r=1, s=1 )  
        cmds.setAttr( "%s.v" % self.legIkJnt[0], 0 ) 
        cmds.select( cl=1 )
        
        # IK driven joints
        for each in self.legJnt:
            ikDrvJnt= cmds.joint( n= str(each).replace( "Jnt", "IK_Drv" ), rad= jntRad*2 )
            tmpCnst= cmds.parentConstraint( each, ikDrvJnt, mo=0 )
            cmds.delete( tmpCnst )
            self.legIkDrvJnt.append( ikDrvJnt )
        cmds.delete( self.legIkDrvJnt[-1] )
        self.legIkDrvJnt.remove(self.legIkDrvJnt[-1])
        cmds.setAttr( "%s.v" % self.legIkDrvJnt[0], 0 )
        cmds.setAttr( "%s.template" % self.legIkDrvJnt[0], 1 )
        
        # FK joints
        for each in self.legJnt:
            fkJnt= cmds.joint( n= str(each).replace( "Jnt", "FK" ), rad= jntRad*2 )
            tmpCnst= cmds.parentConstraint( each, fkJnt, mo=0 )
            cmds.delete( tmpCnst )
            self.legFkJnt.append( fkJnt )
        
        cmds.makeIdentity( self.legFkJnt[0], a=1, t=1, r=1, s=1 )  
        cmds.setAttr( "%s.v" % self.legFkJnt[0], 0 ) 
        cmds.select( cl=1 )
        
        if self.prefix == "L_leg" :
            cmds.setAttr( "%s.preferredAngleX" % self.legJnt[1], 90 )
            cmds.setAttr( "%s.preferredAngleX" % self.legFkJnt[1], 90 )
            cmds.setAttr( "%s.preferredAngleX" % self.legIkJnt[1], 90 )
            cmds.setAttr( "%s.preferredAngleX" % self.legIkDrvJnt[1], 90 )
        elif self.prefix == "R_leg" :
            cmds.setAttr( "%s.preferredAngleX" % self.legJnt[1], 90 )
            cmds.setAttr( "%s.preferredAngleX" % self.legFkJnt[1], 90 )
            cmds.setAttr( "%s.preferredAngleX" % self.legIkJnt[1], 90 ) 
            cmds.setAttr( "%s.preferredAngleX" % self.legIkDrvJnt[1], 90 )   
        else:
            cmds.setAttr( "%s.preferredAngleY" % self.legJnt[1], 90 )
            cmds.setAttr( "%s.preferredAngleY" % self.legFkJnt[1], 90 )
            cmds.setAttr( "%s.preferredAngleY" % self.legIkJnt[1], 90 )
            cmds.setAttr( "%s.preferredAngleY" % self.legIkDrvJnt[1], 90 )
        
        # Secondary skin joints
        self.rootExtJnt= cmds.joint( n= str(self.hipJnt).replace( "_Jnt", "_extra_Jnt" ) )
        tmpCnst= cmds.parentConstraint( self.hipJnt, self.rootExtJnt, mo=0  )
        cmds.delete( tmpCnst )
        cmds.makeIdentity( self.rootExtJnt, a=1, t=1, r=1, s=1 )
        cmds.parent( self.rootExtJnt, self.extraJntGRP )
        self.skinJnt.append( self.rootExtJnt )
        cmds.select( cl=1 )
        upExtJnt= cmds.joint( n= "%s_up_extra_Jnt01" % self.prefix )
        self.legJnt.append(upExtJnt)
        self.skinJnt.append( upExtJnt )
        tmpCnstA= cmds.parentConstraint( self.hipJnt, upExtJnt, mo=0 )
        cmds.delete( tmpCnstA )
        tmpCnstB= cmds.pointConstraint( self.hipJnt, self.kneeJnt, upExtJnt, mo=0 )
        cmds.delete( tmpCnstB )
        cmds.makeIdentity( upExtJnt, a=1, t=1, r=1, s=1 )
        cmds.parent( upExtJnt, self.extraJntGRP )
        cmds.select( cl=1 )
        self.secExtJnt= cmds.joint( n= str(self.kneeJnt).replace( "_Jnt", "_extra_Jnt" ) )
        tmpCnst= cmds.parentConstraint( self.kneeJnt, self.secExtJnt, mo=0  )
        cmds.delete( tmpCnst )
        cmds.makeIdentity( self.secExtJnt, a=1, t=1, r=1, s=1 )
        cmds.parent( self.secExtJnt, self.extraJntGRP )
        self.skinJnt.append( self.secExtJnt )
        cmds.select( cl=1 )
        dnExtJnt= cmds.joint( n= "%s_dn_extra_Jnt01" % self.prefix )
        self.legJnt.append(dnExtJnt)
        self.skinJnt.append(dnExtJnt)
        tmpCnstA= cmds.parentConstraint( self.kneeJnt, dnExtJnt, mo=0 )
        cmds.delete( tmpCnstA )
        tmpCnstB= cmds.pointConstraint( self.kneeJnt, self.ankleJnt, dnExtJnt, mo=0 )
        cmds.delete( tmpCnstB )
        cmds.makeIdentity( dnExtJnt, a=1, t=1, r=1, s=1 )
        cmds.parent( dnExtJnt, self.extraJntGRP )
        cmds.select( cl=1 )
        self.thrdExtJnt= cmds.joint( n= str(self.ankleJnt).replace( "_Jnt", "_extra_Jnt" ) )
        tmpCnst= cmds.parentConstraint( self.ankleJnt, self.thrdExtJnt, mo=0  )
        cmds.delete( tmpCnst )
        cmds.makeIdentity( self.thrdExtJnt, a=1, t=1, r=1, s=1 )
        cmds.parent( self.thrdExtJnt, self.extraJntGRP )
        self.skinJnt.append( self.thrdExtJnt )
        cmds.select( self.skinJnt )
        cmds.sets( n="%s_skinJNT" % self.prefix )
        cmds.select( cl=1 )
        cmds.parent( self.legJnt[0], self.legFkJnt[0], self.legIkJnt[0], self.legIkDrvJnt[0], self.legJntGRP )
        
        # Setup FK
        legFKSdkList= []
        legFKAxList= []
        for each in self.legFkJnt:
            legFkCTL= cmds.circle( n= "%s_CTL" % each, nr= [0,1,0], r=6, ch=0 )[0]
            self.legFkCTL.append( legFkCTL )
            cmds.setAttr( "%s.sx" % legFkCTL, e=1, l=1, k=0, cb=0 )
            cmds.setAttr( "%s.sy" % legFkCTL, e=1, l=1, k=0, cb=0 )
            cmds.setAttr( "%s.sz" % legFkCTL, e=1, l=1, k=0, cb=0 )
            cmds.setAttr( "%s.v" % legFkCTL, e=1, l=1, k=0, cb=0 )
            cmds.setAttr( "%sShape.overrideEnabled" % legFkCTL, 1 )
            cmds.setAttr( "%sShape.overrideColor" % legFkCTL, 17 )
            legFKSdk= cmds.group( n= "%s_sdk" % legFkCTL, em=0 )
            allCTLGRP.append( legFKSdk )
            legFKSdkList.append( legFKSdk )
            legFKAx= cmds.group( n= "%s_ax" % legFkCTL, em=0 )
            allCTLGRP.append( legFKAx )
            legFKAxList.append( legFKAx )
            legFkCTLGRP= cmds.group( n= "%s_GRP" % legFkCTL, em=0 )
            self.legFkCTLGRP.append( legFkCTLGRP )
            allCTLGRP.append( legFkCTLGRP )
            tmpCnst= cmds.parentConstraint( each, legFkCTLGRP, mo=0 )
            cmds.delete( tmpCnst )
            cmds.parentConstraint( legFkCTL, each, mo=0 )
        
        cmds.delete( self.legFkCTLGRP[-1] )
        allCTLGRP.remove( self.legFkCTLGRP[-1] )
        self.legFkCTLGRP.remove( self.legFkCTLGRP[-1] )
        allCTLGRP.remove( legFKSdkList[-1] )
        allCTLGRP.remove( legFKAxList[-1] )
        self.legFkCTL.remove( self.legFkCTL[-1] )
        legFkCTLNum= len(self.legFkCTL)
        legFkCTLGRPNum= len(self.legFkCTLGRP)
        
        if legFkCTLNum == legFkCTLGRPNum:
            for each in reversed(range(1,legFkCTLGRPNum)):
                n= each
                cmds.parent( self.legFkCTLGRP[n], self.legFkCTL[(n-1)] )
                n= n-1
                
        cmds.parent( self.legFkCTLGRP[0], self.legCTLGRP )
        
        # Setup IK
        ikJntNum= len(self.legIkJnt)
        self.legikH= cmds.ikHandle( n= "%s_ikHandle" % self.prefix, sj= self.legIkJnt[0], ee= self.legIkJnt[(ikJntNum -1)], sol= "ikRPsolver" )[0]
        cmds.parent( self.legikH, self.legExtra )
        cmds.setAttr( "%s.poleVectorX" % self.legikH, 0 )
        cmds.setAttr( "%s.poleVectorY" % self.legikH, 0 )
        cmds.setAttr( "%s.poleVectorZ" % self.legikH, 0 )
        cmds.setAttr( "%s.v" % self.legikH, 0 )
        
        # Driven IK
        self.legDrvIkH= cmds.ikHandle( n= "%s_Drv_ikHandle" % self.prefix, sj= self.legIkDrvJnt[0], ee= self.legIkDrvJnt[-1], sol= "ikRPsolver" )[0]
        cmds.parent( self.legDrvIkH, self.legExtra )
        cmds.setAttr( "%s.poleVectorX" % self.legDrvIkH, 0 )
        cmds.setAttr( "%s.poleVectorY" % self.legDrvIkH, 0 )
        cmds.setAttr( "%s.poleVectorZ" % self.legDrvIkH, 0 )
        cmds.setAttr( "%s.v" % self.legDrvIkH, 0 )
        
        # Leg Ik Controller
        self.legIkCTL= cmds.circle( n= "%sIK_CTL" % self.prefix, nr= [0,1,0], r=6, ch=0 )[0]    # ikCTL
        cmds.setAttr( "%s.rotateOrder" % self.legIkCTL, e=1, cb=1 )
        cmds.setAttr( "%s.sx" % self.legIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sy" % self.legIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sz" % self.legIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.v" % self.legIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%sShape.overrideEnabled" % self.legIkCTL, 1 )
        cmds.setAttr( "%sShape.overrideColor" % self.legIkCTL, 17 )
        cmds.addAttr( self.legIkCTL, ln= "____________",  at= "enum", en= "________:" )
        cmds.setAttr( "%s.____________" % self.legIkCTL, e=1, cb=1, l=1 )
        cmds.addAttr( self.legIkCTL, ln= "autoStretch",  at= "long", min= 0, max= 1, dv= 1 )
        cmds.setAttr( "%s.autoStretch" % self.legIkCTL, e=1, cb=1 )
        cmds.setAttr( "%s.autoStretch" % self.legIkCTL, k=1 )
        #cmds.addAttr( self.legIkCTL, ln= "twist",  at= "double", dv= 0 )
        #cmds.setAttr( "%s.twist" % self.legIkCTL, e=1, cb=1 )
        #cmds.setAttr( "%s.twist" % self.legIkCTL, k=1 )
        if cmds.getAttr( "%s.preferredAngleX" % self.legIkJnt[1] ) == 90:
            cmds.addAttr( self.legIkCTL, ln= "kneeLock",  at= "double", min= 0, max= 1, dv= 0 )
            cmds.setAttr( "%s.kneeLock" % self.legIkCTL, e=1, cb=1 )
            cmds.setAttr( "%s.kneeLock" % self.legIkCTL, k=1 )
        else:
            cmds.addAttr( self.legIkCTL, ln= "elbowLock",  at= "double", min= 0, max= 1, dv= 0 )
            cmds.setAttr( "%s.elbowLock" % self.legIkCTL, e=1, cb=1 )
            cmds.setAttr( "%s.elbowLock" % self.legIkCTL, k=1 )
        cmds.addAttr( self.legIkCTL, ln= "length",  at= "double", min= -10, max= 10, dv= 0 )
        cmds.setAttr( "%s.length" % self.legIkCTL, e=1, cb=1 )
        cmds.setAttr( "%s.length" % self.legIkCTL, k=1 )
        cmds.addAttr( self.legIkCTL, ln= "_____________",  at= "enum", en= "________:" )
        cmds.setAttr( "%s._____________" % self.legIkCTL, e=1, cb=1, l=1 )
        cmds.addAttr( self.legIkCTL, ln= "pVVisibility", nn="PV Visibility", at= "long", min= 0, max= 1, dv= 0 )
        cmds.setAttr( "%s.pVVisibility" % self.legIkCTL, e=1, cb=1 )
        cmds.setAttr( "%s.pVVisibility" % self.legIkCTL, l=0, k=0, cb=0 )
        cmds.addAttr( self.legIkCTL, ln= "PV",  at= "double", dv= 0 )
        cmds.setAttr( "%s.PV" % self.legIkCTL, e=1, cb=1 )
        cmds.setAttr( "%s.PV" % self.legIkCTL, k=1 )
        legIKSdk= cmds.group( n= "%s_sdk" % self.legIkCTL, em=0 )
        allCTLGRP.append( legIKSdk )
        legIKAx= cmds.group( n= "%s_ax" % self.legIkCTL, em=0 )
        allCTLGRP.append( legIKAx )
        self.legIkCTLSpace= cmds.group( n= "%s_GRP" % self.legIkCTL, em=0  )
        tmpCnst= cmds.pointConstraint( self.legIkJnt[-1], self.legIkCTLSpace, mo=0 )
        cmds.delete( tmpCnst )
        cmds.parentConstraint( self.legIkCTL, self.legikH, mo=1 )
        cmds.parentConstraint( self.legIkCTL, self.legDrvIkH, mo=1 )
        cmds.orientConstraint( self.legIkCTL, self.legIkJnt[-1], mo=1 )
        
        # Shoulder Ik Controller
        self.hipIkCTL= cmds.circle( n= "%s_CTL" % self.legIkJnt[0], nr= [0,1,0], r=6, ch=0 )[0]
        cmds.setAttr( "%s.rx" % self.hipIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.ry" % self.hipIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.rz" % self.hipIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sx" % self.hipIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sy" % self.hipIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sz" % self.hipIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.v" % self.hipIkCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%sShape.overrideEnabled" % self.hipIkCTL, 1 )
        cmds.setAttr( "%sShape.overrideColor" % self.hipIkCTL, 13 )
        hipIKSdk= cmds.group( n= "%s_sdk" % self.hipIkCTL, em=0 )
        allCTLGRP.append( hipIKSdk )
        hipIKAx= cmds.group( n= "%s_ax" % self.hipIkCTL, em=0 )
        allCTLGRP.append( hipIKAx )
        self.hipIkCTLGRP= cmds.group( n= "%s_GRP" % self.hipIkCTL, em=0  )
        allCTLGRP.append( self.hipIkCTLGRP )
        tmpCnst= cmds.parentConstraint( self.legIkJnt[0], self.hipIkCTLGRP, mo=0 )
        cmds.delete( tmpCnst )
        cmds.parentConstraint( self.hipIkCTL, self.legIkJnt[0], mo=0 )
        
        # Pole Vector Loc
        self.pvLoc= cmds.spaceLocator( n= "%s_pvLoc" % self.prefix )[0]
        self.pvLocGRP= cmds.group( n="%s_GRP" % self.pvLoc, em=0 )
        tmpCnst= cmds.parentConstraint( self.kneeJnt, self.pvLocGRP, mo=0 )
        cmds.delete( tmpCnst )
        cmds.setAttr( "%s.v" % self.pvLocGRP, 0 )
        
        # Pole Vector Loc Group Position
        if cmds.getAttr( "%s.preferredAngleX" % self.legIkJnt[1] ) == 90:
            pvLocGrpTz= (cmds.getAttr( "%s.tz" % self.pvLocGRP )) + 50
            cmds.setAttr( "%s.tz" % self.pvLocGRP, pvLocGrpTz )
        else:
            pvLocGrpTz= (cmds.getAttr( "%s.tz" % self.pvLocGRP )) - 50
            cmds.setAttr( "%s.tz" % self.pvLocGRP, pvLocGrpTz )
        cmds.parent( self.pvLocGRP, self.locGRP )
        cmds.setAttr( "%s.v" % self.pvLocGRP )
        
        # Driven IkHandle Pole Vector Value
        ikPvX= cmds.getAttr( "%s.poleVectorX" % self.legikH )
        ikPvY= cmds.getAttr( "%s.poleVectorY" % self.legikH )
        ikPvZ= cmds.getAttr( "%s.poleVectorZ" % self.legikH )
        cmds.setAttr("%s.poleVectorX" % self.legDrvIkH, ikPvX )
        cmds.setAttr("%s.poleVectorY" % self.legDrvIkH, ikPvY )
        cmds.setAttr("%s.poleVectorZ" % self.legDrvIkH, ikPvZ )
        
        # Setup Dictance Tools
        dictLocA= cmds.spaceLocator( n= "%s_dict01_loc" % self.prefix )[0]
        dictLocAGrp= cmds.group( n= "%s_GRP" % dictLocA, em=0  )
        tmpCnst= cmds.parentConstraint( self.hipJnt, dictLocAGrp, mo=0 )
        cmds.delete( tmpCnst )
        cmds.parentConstraint( self.hipIkCTL, dictLocAGrp, mo=0 )
        cmds.setAttr( "%s.v" % dictLocAGrp, 0 )
        dictLocB= cmds.spaceLocator( n= "%s_dict02_loc" % self.prefix )[0]
        dictLocBGrp= cmds.group( n= "%s_GRP" % dictLocB, em=0  )
        tmpCnst= cmds.parentConstraint( self.kneeJnt, dictLocBGrp, mo=0 )
        cmds.delete( tmpCnst )
        dictLocBCnst= cmds.parentConstraint( self.legIkDrvJnt[1], dictLocBGrp, mo=1 )[0]
        ikblendCon= cmds.createNode( "condition", n= "ikDrv_blend_con01" )        # ikblendCon
        cmds.connectAttr( "%s.kneeLock" % self.legIkCTL, "%s.firstTerm" % ikblendCon )
        cmds.setAttr( "%s.secondTerm" % ikblendCon, 1 )
        cmds.setAttr( "%s.colorIfTrueR" % ikblendCon, 0 )
        cmds.setAttr( "%s.colorIfFalseR" % ikblendCon, 1 )
        cmds.setAttr( "%s.operation" % ikblendCon, 0 )
        cmds.connectAttr( "%s.outColorR" % ikblendCon, "%s.ikBlend" % self.legDrvIkH )
        cmds.setAttr( "%s.v" % dictLocBGrp, 0 )
        dictLocC= cmds.spaceLocator( n= "%s_dict03_loc" % self.prefix )[0]
        dictLocCGrp= cmds.group( n= "%s_GRP" % dictLocC, em=0  )
        tmpCnst= cmds.parentConstraint( self.ankleJnt, dictLocCGrp, mo=0 )
        cmds.delete( tmpCnst )
        cmds.parentConstraint( self.legIkCTL, dictLocCGrp, mo=0 )
        cmds.setAttr( "%s.v" % dictLocCGrp, 0 )
        cmds.parent( dictLocAGrp, dictLocBGrp, dictLocCGrp, self.locGRP )
        cmds.poleVectorConstraint( self.pvLoc, self.legikH )
        ikpvX= cmds.getAttr( "%s.poleVectorX" % self.legikH )
        ikpvY= cmds.getAttr( "%s.poleVectorY" % self.legikH )
        ikpvZ= cmds.getAttr( "%s.poleVectorZ" % self.legikH )
        cmds.setAttr( "%s.poleVectorX" % self.legDrvIkH, ikpvX )
        cmds.setAttr( "%s.poleVectorY" % self.legDrvIkH, ikpvY )
        cmds.setAttr( "%s.poleVectorZ" % self.legDrvIkH, ikpvZ )
        dictNodeA= cmds.createNode( "distanceBetween", n= "%s_dict01" % self.prefix )    # dictanceBetween
        cmds.connectAttr( "%s.worldPosition[0]" % dictLocA, "%s.point1" % dictNodeA )
        cmds.connectAttr( "%s.worldPosition[0]" % dictLocC, "%s.point2" % dictNodeA )
        dictNodeB= cmds.createNode( "distanceBetween", n= "%s_dict02" % self.prefix )    # dictanceBetween
        cmds.connectAttr( "%s.worldPosition[0]" % dictLocA, "%s.point1" % dictNodeB )
        cmds.connectAttr( "%s.worldPosition[0]" % dictLocB, "%s.point2" % dictNodeB )
        dictNodeC= cmds.createNode( "distanceBetween", n= "%s_dict03" % self.prefix )    # dictanceBetween
        cmds.connectAttr( "%s.worldPosition[0]" % dictLocB, "%s.point1" % dictNodeC )
        cmds.connectAttr( "%s.worldPosition[0]" % dictLocC, "%s.point2" % dictNodeC )
        upLimbLen= cmds.getAttr( "%s.distance" % dictNodeB )
        dnLimbLen= cmds.getAttr( "%s.distance" % dictNodeC )
        actualLen= (upLimbLen) + (dnLimbLen)
        if actualLen < 0:
            actualLen= -(actualLen)
        else:
            pass
        
        # Setup Dictance Tools ikDrv
        drvDictLocA= cmds.spaceLocator( n= "%s_drv_dict01_loc" % self.prefix )[0]
        drvDictLocAGrp= cmds.group( n= "%s_GRP" % drvDictLocA, em=0  )
        tmpCnst= cmds.parentConstraint( self.hipJnt, drvDictLocAGrp, mo=0 )
        cmds.delete( tmpCnst )
        cmds.parentConstraint( self.hipIkCTL, drvDictLocAGrp, mo=0 )
        cmds.setAttr( "%s.v" % drvDictLocAGrp, 0 )
        drvDictLocB= cmds.spaceLocator( n= "%s_drv_dict02_loc" % self.prefix )[0]
        drvDictLocBGrp= cmds.group( n= "%s_GRP" % drvDictLocB, em=0  )
        tmpCnst= cmds.parentConstraint( self.kneeJnt, drvDictLocBGrp, mo=0 )
        cmds.delete( tmpCnst )
        drvDictLocBCnst= cmds.parentConstraint( self.legIkJnt[1], drvDictLocBGrp, mo=1 )[0]
        cmds.setAttr( "%s.v" % drvDictLocBGrp, 0 )
        drvDictLocC= cmds.spaceLocator( n= "%s_drvDict03_loc" % self.prefix )[0]
        drvDictLocCGrp= cmds.group( n= "%s_GRP" % drvDictLocC, em=0  )
        tmpCnst= cmds.parentConstraint( self.ankleJnt, drvDictLocCGrp, mo=0 )
        cmds.delete( tmpCnst )
        cmds.parentConstraint( self.legIkCTL, drvDictLocCGrp, mo=0 )
        cmds.setAttr( "%s.v" % drvDictLocCGrp, 0 )
        cmds.parent( drvDictLocAGrp, drvDictLocBGrp, drvDictLocCGrp, self.locGRP )
        drvDictNodeA= cmds.createNode( "distanceBetween", n= "%s_drvDict01" % self.prefix )    # dictanceBetween
        cmds.connectAttr( "%s.worldPosition[0]" % drvDictLocA, "%s.point1" % drvDictNodeA )
        cmds.connectAttr( "%s.worldPosition[0]" % drvDictLocC, "%s.point2" % drvDictNodeA )
        drvDictNodeB= cmds.createNode( "distanceBetween", n= "%s_drvDict02" % self.prefix )    # dictanceBetween
        cmds.connectAttr( "%s.worldPosition[0]" % drvDictLocA, "%s.point1" % drvDictNodeB )
        cmds.connectAttr( "%s.worldPosition[0]" % drvDictLocB, "%s.point2" % drvDictNodeB )
        drvDictNodeC= cmds.createNode( "distanceBetween", n= "%s_drvDict03" % self.prefix )    # dictanceBetween
        cmds.connectAttr( "%s.worldPosition[0]" % drvDictLocB, "%s.point1" % drvDictNodeC )
        cmds.connectAttr( "%s.worldPosition[0]" % drvDictLocC, "%s.point2" % drvDictNodeC )
        drvUpLimbLen= cmds.getAttr( "%s.distance" % drvDictNodeB )
        drvDnLimbLen= cmds.getAttr( "%s.distance" % drvDictNodeC )
        drvActualLen= (drvUpLimbLen) + (drvDnLimbLen)
        if drvActualLen < 0:
            drvActualLen= -(drvActualLen)
        else:
            pass
                
        # Pole Vector Controller
        pvCTL= mel.eval('curve -d 1 -p 0 0 1 -p 0 0.5 0.866025 -p 0 0.866025 0.5 -p 0 1 0 -p 0 0.866025 -0.5 -p 0 0.5 -0.866025 -p 0 0 -1 -p 0 -0.5 -0.866025 -p 0 -0.866025 -0.5 -p 0 -1 0 -p 0 -0.866025 0.5 -p 0 -0.5 0.866025 -p 0 0 1 -p 0.707107 0 0.707107 -p 1 0 0 -p 0.707107 0 -0.707107 -p 0 0 -1 -p -0.707107 0 -0.707107 -p -1 0 0 -p -0.866025 0.5 0 -p -0.5 0.866025 0 -p 0 1 0 -p 0.5 0.866025 0 -p 0.866025 0.5 0 -p 1 0 0 -p 0.866025 -0.5 0 -p 0.5 -0.866025 0 -p 0 -1 0 -p -0.5 -0.866025 0 -p -0.866025 -0.5 0 -p -1 0 0 -p -0.707107 0 0.707107 -p 0 0 1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 ;')
        cmds.scale( 2, 2, 2, pvCTL )
        cmds.makeIdentity( pvCTL, a=1, t=1, r=1, s=1 )
        self.pvCTL= cmds.rename( pvCTL, "%s_pv_CTL" % self.prefix )
        cmds.setAttr( "%s.rx" % self.pvCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.ry" % self.pvCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.rz" % self.pvCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sx" % self.pvCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sy" % self.pvCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sz" % self.pvCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.v" % self.pvCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%sShape.overrideEnabled" % self.pvCTL, 1 )
        cmds.setAttr( "%sShape.overrideColor" % self.pvCTL, 6 )
        cmds.addAttr( self.pvCTL, ln= "____________",  at= "enum", en= "________:" )
        cmds.setAttr( "%s.____________" % self.pvCTL, e=1, cb=1, l=1 )
        cmds.addAttr( self.pvCTL, ln= "space",  at= "enum", en= "World:Hip:Foot" )
        cmds.setAttr( "%s.space" % self.pvCTL, e=1, cb=1, k=1 )
        cmds.setAttr( "%s.space" % self.pvCTL, 0 )
        pvCTLAx= cmds.group( n= "%s_ax" % self.pvCTL, em=0 )
        allCTLGRP.append( pvCTLAx )
        pvCTLGRP= cmds.group( n= "%s_GRP" % self.pvCTL, em=0 )
        allCTLGRP.append( pvCTLGRP )
        tmpCnst= cmds.pointConstraint( self.pvLoc, "%s_GRP" % self.pvCTL, mo=0 )
        cmds.delete( tmpCnst )
        pvRotAx= cmds.group( n= "%s_rotate_ax" % self.pvCTL, em=1 )
        allCTLGRP.append( pvRotAx )
        self.pvCTLGRP= cmds.group( n= "%s_rotate_GRP" % self.pvCTL, em=0  )
        allCTLGRP.append( self.pvCTLGRP )
        tmpCnst= cmds.parentConstraint( self.kneeJnt, self.pvCTLGRP, mo=0 )
        cmds.delete( tmpCnst )
        cmds.parent( "%s_GRP" % self.pvCTL, "%s_rotate_ax" % self.pvCTL )        
        cmds.parentConstraint( self.pvCTL, self.pvLocGRP, mo=0 )
        cmds.parentConstraint( self.legIkDrvJnt[1], self.pvCTLGRP, mo=0 )
        pvCnst= cmds.parentConstraint( self.hipIkCTL, self.legIkCTL, "%s_GRP" % self.pvCTL, mo=1 )[0]
        pvLocPos= cmds.xform( self.pvLoc, q=1, ws=1, t=1 )
        anntShape= cmds.annotate( self.pvLoc, tx= " ", p= pvLocPos )
        annt= cmds.listRelatives( anntShape, p=1  )
        pvAnnt= cmds.rename( annt, "%s_pv_indicator" % self.prefix )
        cmds.parentConstraint( self.kneeJnt, pvAnnt, mo=0 )
        cmds.parent( pvAnnt, self.legExtra )
        cmds.setAttr( "%s.template" % pvAnnt, 1 )
        cmds.parent( self.legIkCTLSpace, self.hipIkCTLGRP, self.pvCTLGRP, self.legIKCTLGRP )
        
        # Pole Vector Space
        pvShdCon= cmds.createNode( "condition", n="%s_pvShdSpace_con01" % self.prefix )
        cmds.setAttr( "%s.secondTerm" % pvShdCon, 1 )
        cmds.setAttr( "%s.operation" % pvShdCon, 0 )
        cmds.setAttr( "%s.colorIfTrueR" % pvShdCon, 1 )
        cmds.setAttr( "%s.colorIfFalseR" % pvShdCon, 0 )
        cmds.connectAttr( "%s.space" % self.pvCTL, "%s.firstTerm" % pvShdCon )
        pvWstCon= cmds.createNode( "condition", n="%s_pvHandSpace_con01" % self.prefix )
        cmds.setAttr( "%s.secondTerm" % pvWstCon, 2 )
        cmds.setAttr( "%s.operation" % pvWstCon, 0 )
        cmds.setAttr( "%s.colorIfTrueR" % pvWstCon, 1 )
        cmds.setAttr( "%s.colorIfFalseR" % pvWstCon, 0 )
        cmds.connectAttr( "%s.space" % self.pvCTL, "%s.firstTerm" % pvWstCon )
        cmds.connectAttr( "%s.outColorR" % pvShdCon, "%s.%sW0" % (pvCnst,self.hipIkCTL) )
        cmds.connectAttr( "%s.outColorR" % pvWstCon, "%s.%sW1" % (pvCnst,self.legIkCTL) )
        
        # Setup Pole Vector
        cmds.connectAttr( "%s.pVVisibility" % self.legIkCTL, "%s.v" % self.pvCTLGRP )
        pvCon= cmds.createNode( "condition", n="%s_pvRot_con01" % self.prefix )
        cmds.setAttr( "%s.secondTerm" % pvCon, 0 )
        cmds.setAttr( "%s.operation" % pvCon, 0 )
        cmds.setAttr( "%s.colorIfFalseR" % pvCon, 0 )
        cmds.connectAttr( "%s.pVVisibility" % self.legIkCTL, "%s.firstTerm" % pvCon )
        cmds.connectAttr( "%s.PV" % self.legIkCTL, "%s.colorIfTrueR" % pvCon )
        cmds.connectAttr( "%s.outColorR" % pvCon, "%s.twist" % self.legDrvIkH )
        
        # Setup Extra Attributes
        # Extra Controllers
        rombus= mel.eval( 'curve -d 1 -p 0 1 0 -p 1 0 0 -p 0 0 1 -p -1 0 0 -p 0 0 -1 -p 0 1 0 -p 0 0 1 -p 0 -1 0 -p 0 0 -1 -p 1 0 0 -p 0 1 0 -p -1 0 0 -p 0 -1 0 -p 1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 ;' )
        cmds.xform( rombus, t= [0,0,-15], s=[4,4,4] ) 
        cmds.makeIdentity( rombus, a=1, t=1, r=1, s=1 )
        self.extraCTL= cmds.rename( rombus, "%s_extra_CTL" % self.prefix )    # extraCTL
        cmds.setAttr( "%s.tx" % self.extraCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.ty" % self.extraCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.tz" % self.extraCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.rx" % self.extraCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.ry" % self.extraCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.rz" % self.extraCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sx" % self.extraCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sy" % self.extraCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.sz" % self.extraCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%s.v" % self.extraCTL, e=1, l=1, k=0, cb=0 )
        cmds.setAttr( "%sShape.overrideEnabled" % self.extraCTL, 1 )
        cmds.setAttr( "%sShape.overrideColor" % self.extraCTL, 13 )
        cmds.addAttr( self.extraCTL, ln= "ikFKSwitch", nn="IKFK Switch", at= "double", min= 0, max= 1, dv= 0 )
        cmds.setAttr( "%s.ikFKSwitch" % self.extraCTL, e=1, k=1, cb=1 )
        cmds.setAttr( "%s.ikFKSwitch" % self.extraCTL, k=1 )
        cmds.addAttr( self.extraCTL, ln= "extraCTL",  at= "long", min= 0, max= 1, dv= 0 )
        cmds.setAttr( "%s.extraCTL" % self.extraCTL, e=1, cb=1 )
        self.extraCTLGRP= cmds.group( n= "%s_GRP" % self.extraCTL, em=1 )    # extraCTLGRP
        allCTLGRP.append( self.extraCTLGRP )
        cmds.parent( self.extraCTL, self.extraCTLGRP )
        cmds.parent( self.extraCTLGRP,self.legCTLGRP )
        tmpCnst= cmds.pointConstraint( self.ankleJnt, self.extraCTLGRP, mo=0 )
        cmds.delete( tmpCnst )
        cmds.pointConstraint( self.legJnt[3], self.extraCTLGRP, mo=0 )
        
        # Connecting IKFK joints ## Parent Constraint method ##
        ikFKReverseNode= cmds.createNode( "reverse", n= "%s_ikFK_reverse" % self.prefix )
        cmds.connectAttr( "%s.ikFKSwitch" % self.extraCTL, "%s.inputX" % ikFKReverseNode )
        cmds.connectAttr( "%s.outputX" % ikFKReverseNode, "%s.v" % self.legIKCTLGRP )
        cmds.connectAttr( "%s.ikFKSwitch" % self.extraCTL, "%s.v" % self.legFkCTLGRP[0] )
        cmds.connectAttr( "%s.outputX" % ikFKReverseNode, "%s.v" % pvAnnt )
        for each in range(len( self.legIkJnt )):
             cnst= cmds.parentConstraint( self.legIkJnt[each], self.legFkJnt[each], self.legJnt[each], mo=0 )[0]
             cmds.connectAttr( "%s.outputX" % ikFKReverseNode, "%s.%sW0" % (cnst, self.legIkJnt[each]) )
             cmds.connectAttr( "%s.ikFKSwitch" % self.extraCTL, "%s.%sW1" % (cnst, self.legFkJnt[each]) )
             sCnst= cmds.scaleConstraint( self.legIkJnt[each], self.legFkJnt[each], self.legJnt[each], mo=0 )[0]
             cmds.connectAttr( "%s.outputX" % ikFKReverseNode, "%s.%sW0" % (sCnst, self.legIkJnt[each]) )
             cmds.connectAttr( "%s.ikFKSwitch" % self.extraCTL, "%s.%sW1" % (sCnst, self.legFkJnt[each]) )
        
        # Setup Stretchy
        self.globalScaleMD= cmds.createNode( "multiplyDivide", n= "%s_globalScale_MD01" % self.prefix )    # globalScaleMD
        cmds.setAttr( "%s.operation" % self.globalScaleMD, 1 )
        cmds.setAttr( "%s.input1X" % self.globalScaleMD, 1 )
        cmds.connectAttr( "%s.distance" % dictNodeA, "%s.input1X" % self.globalScaleMD )
        autoStretchCon= cmds.createNode( "condition", n= "%s_autoStretch_con01" % self.prefix )    # autoStretchCon
        cmds.connectAttr( "%s.distance" % dictNodeA, "%s.colorIfTrueR" % autoStretchCon )
        cmds.connectAttr( "%s.autoStretch" % self.legIkCTL, "%s.firstTerm" % autoStretchCon )
        cmds.setAttr( "%s.secondTerm" % autoStretchCon, 1 )
        cmds.setAttr( "%s.operation" % autoStretchCon, 0 )
        cmds.setAttr( "%s.colorIfFalseR" % autoStretchCon, actualLen )
        stretchyCon= cmds.createNode( "condition", n= "%s_stretchy_con01" % self.prefix )    # stretchyCon
        cmds.connectAttr( "%s.outColorR" % autoStretchCon, "%s.firstTerm" % stretchyCon )
        cmds.setAttr( "%s.operation" % stretchyCon, 2 )
        cmds.setAttr( "%s.colorIfFalseR" % stretchyCon, actualLen )
        stretchyDMD= cmds.createNode( "multiplyDivide", n= "%s_stretchy_D_MD01" % self.prefix )    # stretchyDMD
        cmds.setAttr( "%s.operation" % stretchyDMD, 2 )
        cmds.setAttr( "%s.input2X" % stretchyDMD, actualLen )
        cmds.connectAttr( "%s.outColorR" % stretchyCon, "%s.input1X" % stretchyDMD )
        stretchyMMD= cmds.createNode( "multiplyDivide", n= "%s_stretchy_M_MD01" % self.prefix )    # stretchyMMD
        cmds.setAttr( "%s.operation" % stretchyMMD, 1 )
        cmds.connectAttr( "%s.outputX" % stretchyDMD, "%s.input1X" % stretchyMMD )
        stretchyMD= cmds.createNode( "multiplyDivide", n= "%s_stretchy_MD01" % self.prefix )    # stretchyMD
        cmds.setAttr( "%s.operation" % stretchyMD, 1 )
        cmds.connectAttr( "%s.outputX" % stretchyMMD, "%s.input1X" % stretchyMD )
        cmds.connectAttr( "%s.outputX" % stretchyMMD, "%s.input1Y" % stretchyMD )
        if self.prefix.startswith( "L_" ) == True:
            cmds.setAttr( "%s.input2X" % stretchyMD, -(upLimbLen) )
            cmds.setAttr( "%s.input2Y" % stretchyMD, -(dnLimbLen) )
        else:
            cmds.setAttr( "%s.input2X" % stretchyMD, upLimbLen )
            cmds.setAttr( "%s.input2Y" % stretchyMD, dnLimbLen )
        
        # Setup Stretchy ikDrv
        self.drvGlobalScaleMD= cmds.createNode( "multiplyDivide", n= "%s_drvGlobalScale_MD01" % self.prefix )    # drvGlobalScaleMD
        cmds.setAttr( "%s.operation" % self.drvGlobalScaleMD, 1 )
        cmds.setAttr( "%s.input1X" % self.drvGlobalScaleMD, 1 )
        cmds.connectAttr( "%s.distance" % drvDictNodeA, "%s.input1X" % self.drvGlobalScaleMD )
        drvAutoStretchCon= cmds.createNode( "condition", n= "%s_drvAutoStretch_con01" % self.prefix )    # drvAutoStretchCon
        cmds.connectAttr( "%s.distance" % drvDictNodeA, "%s.colorIfTrueR" % drvAutoStretchCon )
        cmds.connectAttr( "%s.autoStretch" % self.legIkCTL, "%s.firstTerm" % drvAutoStretchCon )
        cmds.setAttr( "%s.secondTerm" % drvAutoStretchCon, 1 )
        cmds.setAttr( "%s.operation" % drvAutoStretchCon, 0 )
        cmds.setAttr( "%s.colorIfFalseR" % drvAutoStretchCon, drvActualLen )
        drvStretchyCon= cmds.createNode( "condition", n= "%s_drvStretchy_con01" % self.prefix )    # drvStretchyCon
        cmds.connectAttr( "%s.outColorR" % drvAutoStretchCon, "%s.firstTerm" % drvStretchyCon )
        cmds.setAttr( "%s.operation" % drvStretchyCon, 2 )
        cmds.setAttr( "%s.colorIfFalseR" % drvStretchyCon, drvActualLen )
        drvStretchyDMD= cmds.createNode( "multiplyDivide", n= "%s_stretchy_D_MD01" % self.prefix )    # drvStretchyDMD
        cmds.setAttr( "%s.operation" % drvStretchyDMD, 2 )
        cmds.setAttr( "%s.input2X" % drvStretchyDMD, drvActualLen )
        cmds.connectAttr( "%s.outColorR" % drvStretchyCon, "%s.input1X" % drvStretchyDMD )
        drvStretchyMMD= cmds.createNode( "multiplyDivide", n= "%s_drvStretchy_M_MD01" % self.prefix )    # drvStretchyMMD
        cmds.setAttr( "%s.operation" % drvStretchyMMD, 1 )
        cmds.connectAttr( "%s.outputX" % drvStretchyDMD, "%s.input1X" % drvStretchyMMD )
        drvStretchyMD= cmds.createNode( "multiplyDivide", n= "%s_drvStretchy_MD01" % self.prefix )    # stretchyMD
        cmds.setAttr( "%s.operation" % drvStretchyMD, 1 )
        cmds.connectAttr( "%s.outputX" % drvStretchyMMD, "%s.input1X" % drvStretchyMD )
        cmds.connectAttr( "%s.outputX" % drvStretchyMMD, "%s.input1Y" % drvStretchyMD )
        if self.prefix.startswith( "L_" ) == True:
            cmds.setAttr( "%s.input2X" % drvStretchyMD, -(drvUpLimbLen) )
            cmds.setAttr( "%s.input2Y" % drvStretchyMD, -(drvDnLimbLen) )
        else:
            cmds.setAttr( "%s.input2X" % drvStretchyMD, drvUpLimbLen )
            cmds.setAttr( "%s.input2Y" % drvStretchyMD, drvDnLimbLen )

        # Setup Length
        lengthMD= cmds.createNode( "multiplyDivide", n= "%s_length_M_MD01" % self.prefix )    # lengthMD
        cmds.connectAttr( "%s.length" % self.legIkCTL, "%s.input1X" % lengthMD )
        cmds.setAttr( "%s.operation" % lengthMD, 0.1 )
        cmds.setAttr( "%s.input2X" % lengthMD, 0.1 )
        lengthPMA= cmds.createNode( "plusMinusAverage", n= "%s_length_dv_PMA01" % self.prefix  )    # lengthPMA
        cmds.connectAttr( "%s.outputX" % lengthMD, "%s.input1D[0]" % lengthPMA )
        cmds.setAttr( "%s.operation" %  lengthPMA, 1 )
        cmds.setAttr( "%s.input1D[1]" % lengthPMA, 1 )
        lengthC= cmds.createNode( "clamp", n= "%s_length_clamp01" % self.prefix  )    # lengthC
        cmds.connectAttr( "%s.output1D" % lengthPMA, "%s.inputR" % lengthC )
        cmds.connectAttr( "%s.outputR" % lengthC , "%s.input2X" % stretchyMMD )
        cmds.setAttr( "%s.minR" % lengthC, 0.5 )
        cmds.setAttr( "%s.maxR" % lengthC, 10 )
        lengthNeuMD= cmds.createNode( "multiplyDivide", n= "%s_lengthNeu_D_MD01" % self.prefix  )    # lengthNeuMD
        cmds.setAttr( "%s.operation" % lengthNeuMD, 2 )
        cmds.connectAttr( "%s.outputR" % lengthC, "%s.input2X" % lengthNeuMD )
        cmds.connectAttr( "%s.outputX" % self.globalScaleMD, "%s.input1X" % lengthNeuMD )
        cmds.connectAttr( "%s.outputX" % lengthNeuMD, "%s.colorIfTrueR" % stretchyCon )
        lengthSTMD= cmds.createNode( "multiplyDivide", n= "%s_length_stM_MD01" % self.prefix  )    # lengthSTMD
        cmds.setAttr( "%s.operation" % lengthSTMD, 1 )
        cmds.setAttr( "%s.input1X" % lengthSTMD, actualLen )
        cmds.connectAttr( "%s.outputR" % lengthC, "%s.input2X" % lengthSTMD )
        cmds.connectAttr( "%s.outputX" % lengthSTMD, "%s.secondTerm" % stretchyCon )
        
        # Setup Length ikDrv
        drvLengthMD= cmds.createNode( "multiplyDivide", n= "%s_drvLength_M_MD01" % self.prefix )    # drvLengthMD
        cmds.connectAttr( "%s.length" % self.legIkCTL, "%s.input1X" % drvLengthMD )
        cmds.setAttr( "%s.operation" % drvLengthMD, 0.1 )
        cmds.setAttr( "%s.input2X" % drvLengthMD, 0.1 )
        drvLengthPMA= cmds.createNode( "plusMinusAverage", n= "%s_drvLength_dv_PMA01" % self.prefix  )    # drvLengthPMA
        cmds.connectAttr( "%s.outputX" % drvLengthMD, "%s.input1D[0]" % drvLengthPMA )
        cmds.setAttr( "%s.operation" %  drvLengthPMA, 1 )
        cmds.setAttr( "%s.input1D[1]" % drvLengthPMA, 1 )
        drvLengthC= cmds.createNode( "clamp", n= "%s_length_clamp01" % self.prefix  )    # drvLengthC
        cmds.connectAttr( "%s.output1D" % drvLengthPMA, "%s.inputR" % drvLengthC )
        cmds.connectAttr( "%s.outputR" % drvLengthC , "%s.input2X" % drvStretchyMMD )
        cmds.setAttr( "%s.minR" % drvLengthC, 0.5 )
        cmds.setAttr( "%s.maxR" % drvLengthC, 10 )
        drvLengthNeuMD= cmds.createNode( "multiplyDivide", n= "%s_drvLengthNeu_D_MD01" % self.prefix  )    # drvLengthNeuMD
        cmds.setAttr( "%s.operation" % drvLengthNeuMD, 2 )
        cmds.connectAttr( "%s.outputR" % drvLengthC, "%s.input2X" % drvLengthNeuMD )
        cmds.connectAttr( "%s.outputX" % self.globalScaleMD, "%s.input1X" % drvLengthNeuMD )
        cmds.connectAttr( "%s.outputX" % drvLengthNeuMD, "%s.colorIfTrueR" % drvStretchyCon )
        drvLengthSTMD= cmds.createNode( "multiplyDivide", n= "%s_length_stM_MD01" % self.prefix  )    # drvLengthSTMD
        cmds.setAttr( "%s.operation" % drvLengthSTMD, 1 )
        cmds.setAttr( "%s.input1X" % drvLengthSTMD, drvActualLen )
        cmds.connectAttr( "%s.outputR" % drvLengthC, "%s.input2X" % drvLengthSTMD )
        cmds.connectAttr( "%s.outputX" % drvLengthSTMD, "%s.secondTerm" % drvStretchyCon )
        cmds.connectAttr( "%s.outputX" % drvStretchyMD, "%s.ty" % self.legIkDrvJnt[1] )
        cmds.connectAttr( "%s.outputY" % drvStretchyMD, "%s.ty" % self.legIkDrvJnt[2] )
        
        # Knee/Elbow Loc
        upLimbBTA= cmds.createNode( "blendTwoAttr", n= "%s_upLeg_BTA01" % self.prefix )    # upLimbBTA
        cmds.connectAttr( "%s.outputX" % stretchyMD, "%s.input[0]" % upLimbBTA )
        cmds.connectAttr( "%s.kneeLock" % self.legIkCTL, "%s.attributesBlender" % upLimbBTA )
        dnLimbBTA= cmds.createNode( "blendTwoAttr", n= "%s_dnLeg_BTA01" % self.prefix )    # dnLimbBTA
        cmds.connectAttr( "%s.outputY" % stretchyMD, "%s.input[0]" % dnLimbBTA )
        cmds.connectAttr( "%s.kneeLock" % self.legIkCTL, "%s.attributesBlender" % dnLimbBTA )
        if self.prefix.startswith( "L_" ) == True:
            distNegMD= cmds.createNode( "multiplyDivide", n= "%s_dictNeg_MD01" % self.prefix )
            cmds.setAttr( "%s.input2X" % distNegMD, -1 )
            cmds.setAttr( "%s.input2Y" % distNegMD, -1 )
            cmds.setAttr( "%s.operation" % distNegMD, 1 )
            cmds.connectAttr( "%s.distance" % dictNodeB, "%s.input1X" % distNegMD )
            cmds.connectAttr( "%s.distance" % dictNodeC, "%s.input1Y" % distNegMD )
            cmds.connectAttr( "%s.outputX" % distNegMD, "%s.input[1]" % upLimbBTA )
            cmds.connectAttr( "%s.outputY" % distNegMD, "%s.input[1]" % dnLimbBTA )
        else:
            cmds.connectAttr( "%s.distance" % dictNodeB, "%s.input[1]" % upLimbBTA )
            cmds.connectAttr( "%s.distance" % dictNodeC, "%s.input[1]" % dnLimbBTA )
        if cmds.getAttr( "%s.preferredAngleX" % self.legIkJnt[1] ) == 90:
            cmds.connectAttr( "%s.output" % upLimbBTA, "%s.ty" % self.legIkJnt[1] )
            cmds.connectAttr( "%s.output" % dnLimbBTA, "%s.ty" % self.legIkJnt[2] )
        else:
            cmds.connectAttr( "%s.output" % upLimbBTA, "%s.tx" % self.legIkJnt[1] )
            cmds.connectAttr( "%s.output" % dnLimbBTA, "%s.tx" % self.legIkJnt[2] )
        
        # Leg Twist Counter Setup
        # extra Controller
        extCTLaxList= []
        for each in self.skinJnt:
            extCTL= cmds.circle( n= str(each).replace( "Jnt", "CTL" ), nr= [0,1,0], r=4, ch=0 )[0]
            self.extraCTLList.append(extCTL)
            cmds.setAttr( "%s.v" % extCTL, e=1, l=1, k=0, cb=0 )
            cmds.setAttr( "%sShape.overrideEnabled" % extCTL, 1 )
            cmds.setAttr( "%sShape.overrideColor" % extCTL, 18 )
            extCTLax= cmds.group( n="%s_ax" % extCTL, em=0 )
            allCTLGRP.append( extCTLax )
            extCTLGRP= cmds.group( n="%s_GRP" % extCTL, em=0 )
            allCTLGRP.append( extCTLGRP )
            tmpCnst= cmds.parentConstraint( each, extCTLGRP, mo=0 )
            cmds.delete( tmpCnst )
            cmds.parent( extCTLGRP, self.legExtCTLGRP )
            extCTLaxList.append( extCTLax )
            self.extraCTLGRPList.append( extCTLGRP )
            cmds.parentConstraint( extCTL, each, mo=0 )
            cmds.scaleConstraint( extCTL, each, mo=0 )
        cmds.parentConstraint( self.hipJnt, self.extraCTLGRPList[0], mo=0 )
        cmds.pointConstraint( self.hipJnt, self.kneeJnt, self.extraCTLGRPList[1], mo=0 )
        cmds.orientConstraint( self.hipJnt, self.extraCTLGRPList[1], mo=1 )
        cmds.parentConstraint( self.kneeJnt, self.extraCTLGRPList[2], mo=0 )
        cmds.pointConstraint( self.kneeJnt, self.ankleJnt, self.extraCTLGRPList[3], mo=0 )
        cmds.orientConstraint( self.kneeJnt, self.extraCTLGRPList[3], mo=1 )
        cmds.parentConstraint( ankleJnt02, self.extraCTLGRPList[4], mo=0 )
        cmds.connectAttr( "%s.extraCTL" % self.extraCTL, "%s.v" % self.legExtCTLGRP )
        
        # Twist Counter Loc
        aimLoc= cmds.spaceLocator( n= str(self.ankleJnt).replace( "Jnt", "aimLoc" ) )[0]
        aimLocGrp= cmds.group( n= "%s_GRP" % aimLoc, em=0 )
        tmpCnst= cmds.parentConstraint( self.kneeJnt, aimLocGrp, mo=0 )
        cmds.delete( tmpCnst )
        cmds.parentConstraint( self.kneeJnt, aimLocGrp, mo=0 )
        cmds.parent( aimLocGrp, self.locGRP )
        aimUploc= cmds.spaceLocator( n= str(self.ankleJnt).replace( "Jnt", "aimUpLoc" ) )[0]
        aimUpLocGrp= cmds.group( n= "%s_GRP" % aimUploc, em=0 )
        tmpCnst= cmds.parentConstraint( self.ankleJnt, aimUpLocGrp, mo=0 )
        cmds.delete( tmpCnst )
        if cmds.getAttr( "%s.preferredAngleX" % self.legIkJnt[1] ) == 90:
            if self.prefix.startswith( "L_" ) == True:
                cmds.aimConstraint( aimUploc, aimLoc, mo=0, aim=[0,-1,0], u=[0,0,1], wut= "objectrotation", wu=[0,0,1], wuo= aimUploc, sk= ["x", "z"] )
            else:
                cmds.aimConstraint( aimUploc, aimLoc, mo=0, aim=[0,1,0], u=[0,0,-1], wut= "objectrotation", wu=[0,0,-1], wuo= aimUploc, sk= ["x", "z"] )
            twistCntMD= cmds.createNode( "multiplyDivide", n= "%s_twistCounter_MD01" % self.prefix )    # twistCntMD
            cmds.connectAttr( "%s.ry" % aimLoc, "%s.input1X" % twistCntMD )
            cmds.connectAttr( "%s.ry" % aimLoc, "%s.input1Y" % twistCntMD )
            cmds.connectAttr( "%s.ry" % aimLoc, "%s.input1Z" % twistCntMD )
            cmds.setAttr( "%s.operation" % twistCntMD, 1 )
            cmds.setAttr( "%s.input2X" % twistCntMD, 0.75 )
            cmds.setAttr( "%s.input2Y" % twistCntMD, 0.5 )
            cmds.setAttr( "%s.input2Z" % twistCntMD, 0.25 )
            cmds.connectAttr( "%s.outputX" % twistCntMD, "%s.ry" % extCTLaxList[-2] )
            cmds.connectAttr( "%s.outputY" % twistCntMD, "%s.ry" % extCTLaxList[-3] )
            pvCntMD= cmds.createNode( "multiplyDivide", n= "%s_pvCounter_MD01" % self.prefix )    # pvCntMD
            cmds.connectAttr( "%s.ry" % self.legIkJnt[0], "%s.input1X" % pvCntMD )
            cmds.connectAttr( "%s.ry" % self.legIkJnt[0], "%s.input1Y" % pvCntMD )
            cmds.setAttr( "%s.operation" % pvCntMD, 1 )
            cmds.setAttr( "%s.input2X" % pvCntMD, -1 )
            cmds.setAttr( "%s.input2Y" % pvCntMD, -0.5 )
            cmds.connectAttr( "%s.outputX" % pvCntMD, "%s.ry" % extCTLaxList[0] )
            twistCntPMA= cmds.createNode( "plusMinusAverage", n= "%s_twistCounter_PMA01" % self.prefix )    # twistCntPMA
            cmds.connectAttr( "%s.outputY" % pvCntMD, "%s.input1D[0]" % twistCntPMA )
            cmds.connectAttr( "%s.outputZ" % twistCntMD, "%s.input1D[1]" % twistCntPMA )
            cmds.connectAttr( "%s.output1D" % twistCntPMA, "%s.ry" % extCTLaxList[-4] )
        else:
            if self.prefix.startswith( "L_" ) == True:
                cmds.aimConstraint( aimUploc, aimLoc, mo=0, aim=[1,0,0], u=[0,1,0], wut= "objectrotation", wu=[0,1,0], wuo= aimUploc, sk= ["y", "z"] )
            else:
                cmds.aimConstraint( aimUploc, aimLoc, mo=0, aim=[-1,0,0], u=[0,-1,0], wut= "objectrotation", wu=[0,-1,0], wuo= aimUploc, sk= ["y", "z"] )
            twistCntMD= cmds.createNode( "multiplyDivide", n= "%s_twistCounter_MD01" % self.prefix )    # twistCntMD
            cmds.connectAttr( "%s.rx" % aimLoc, "%s.input1X" % twistCntMD )
            cmds.connectAttr( "%s.rx" % aimLoc, "%s.input1Y" % twistCntMD )
            cmds.connectAttr( "%s.rx" % aimLoc, "%s.input1Z" % twistCntMD )
            cmds.setAttr( "%s.operation" % twistCntMD, 1 )
            cmds.setAttr( "%s.input2X" % twistCntMD, 0.75 )
            cmds.setAttr( "%s.input2Y" % twistCntMD, 0.5 )
            cmds.setAttr( "%s.input2Z" % twistCntMD, 0.25 )
            cmds.connectAttr( "%s.outputX" % twistCntMD, "%s.rx" % extCTLaxList[-2] )
            cmds.connectAttr( "%s.outputY" % twistCntMD, "%s.rx" % extCTLaxList[-3] )
            pvCntMD= cmds.createNode( "multiplyDivide", n= "%s_pvCounter_MD01" % self.prefix )    # pvCntMD
            cmds.connectAttr( "%s.rx" % self.legIkJnt[0], "%s.input1X" % pvCntMD )
            cmds.connectAttr( "%s.rx" % self.legIkJnt[0], "%s.input1Y" % pvCntMD )
            cmds.setAttr( "%s.operation" % pvCntMD, 1 )
            cmds.setAttr( "%s.input2X" % pvCntMD, -1 )
            cmds.setAttr( "%s.input2Y" % pvCntMD, -0.5 )
            cmds.connectAttr( "%s.outputX" % pvCntMD, "%s.rx" % extCTLaxList[0] )
            twistCntPMA= cmds.createNode( "plusMinusAverage", n= "%s_twistCounter_PMA01" % self.prefix )    # twistCntPMA
            cmds.connectAttr( "%s.outputY" % pvCntMD, "%s.input1D[0]" % twistCntPMA )
            cmds.connectAttr( "%s.outputZ" % twistCntMD, "%s.input1D[1]" % twistCntPMA )
            cmds.connectAttr( "%s.output1D" % twistCntPMA, "%s.rx" % extCTLaxList[-4] ) 
        cmds.parentConstraint( ankleJnt02, aimUpLocGrp, mo=0 )
        cmds.parent( aimUpLocGrp, self.locGRP )
        
        # Lock All Controller Group
        for each in allCTLGRP:
            cmds.setAttr( "%s.tx" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.ty" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.tz" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.rx" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.ry" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.rz" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.sx" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.sy" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.sz" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.v" % each, e=1, l=1, k=0, cb=1 )
        cmds.select( cl=1 )
            
        
if __name__ == "__main__":
    leg= sIkFkLegSetup_Cl("R_hip_Jnt01", "R_knee_Jnt01", "R_ankle_Jnt01" )
