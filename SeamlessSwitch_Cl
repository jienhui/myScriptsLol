from PySide.QtGui import *
from PySide.QtCore import *
import maya.OpenMayaUI as mui
import maya.cmds as cmds
from shiboken import wrapInstance

########################################################################################### 

# Main UI
def mayaMainWindow():
    mainWindow= mui.MQtUtil.mainWindow()
    return wrapInstance(long(mainWindow), QWidget)

class Form(QDialog):
    def __init__(self, parent=mayaMainWindow()):
        super(Form, self).__init__()
        # Layout
        mainLayout= QGridLayout()
        mainLayout.setSpacing(5)
        mainLayout.addWidget( self.rAgrpBox(), 0, 0 )
        mainLayout.addWidget( self.lAgrpBox(), 0, 1 )
        mainLayout.addWidget( self.rLgrpBox(), 1, 0 )
        mainLayout.addWidget( self.lLgrpBox(), 1, 1 )
        # Window Structure
        self.setLayout(mainLayout)
        self.resize( 260, 120 )
        self.setWindowTitle("Seamless IK/FK Switch")
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
        
    def rAgrpBox(self):
               
        rAgbLayout= QVBoxLayout()
        rAgbBox= QGroupBox("Right Arm")
        self.rAswitchBttn= QPushButton()
        rAgbLayout.addWidget( self.rAswitchBttn )
        
        if cmds.getAttr("R_arm_extra_CTL.ikFKSwitch") == 1:
            self.rAswitchBttn.setStyleSheet("background-color: grey ")
            self.rAswitchBttn.setText( "FK" )
        else:
            self.rAswitchBttn.setStyleSheet("background-color: dark grey ")
            self.rAswitchBttn.setText( "IK" ) 
        
        rAgbBox.setLayout( rAgbLayout )
        
        self.rAswitchBttn.clicked.connect( self.rArmSwitch )
        return rAgbBox
        
    def lAgrpBox(self):
               
        lAgbLayout= QVBoxLayout()
        lAgbBox= QGroupBox("Left Arm")
        self.lAswitchBttn= QPushButton()
        lAgbLayout.addWidget( self.lAswitchBttn )
        
        if cmds.getAttr("L_arm_extra_CTL.ikFKSwitch") == 1:
            self.lAswitchBttn.setStyleSheet("background-color: grey ")
            self.lAswitchBttn.setText( "FK" )
        else:
            self.lAswitchBttn.setStyleSheet("background-color: dark grey ")
            self.lAswitchBttn.setText( "IK" ) 
        
        lAgbBox.setLayout( lAgbLayout )    
        
        self.lAswitchBttn.clicked.connect( self.lArmSwitch )
        return lAgbBox
        
    def rLgrpBox(self):
               
        rLgbLayout= QVBoxLayout()
        rLgbBox= QGroupBox("Right Leg")
        self.rLswitchBttn= QPushButton()
        rLgbLayout.addWidget( self.rLswitchBttn )
        
        if cmds.getAttr("R_leg_extra_CTL.ikFKSwitch") == 1:
            self.rLswitchBttn.setStyleSheet("background-color: grey ")
            self.rLswitchBttn.setText( "FK" )
        else:
            self.rLswitchBttn.setStyleSheet("background-color: dark grey ")
            self.rLswitchBttn.setText( "IK" ) 
        
        rLgbBox.setLayout( rLgbLayout )    

        self.rLswitchBttn.clicked.connect( self.rLegSwitch )
        return rLgbBox
    
    def lLgrpBox(self):
               
        lLgbLayout= QVBoxLayout()
        lLgbBox= QGroupBox("Left Leg")
        self.lLswitchBttn= QPushButton()
        lLgbLayout.addWidget( self.lLswitchBttn )
        
        if cmds.getAttr("L_leg_extra_CTL.ikFKSwitch") == 1:
            self.lLswitchBttn.setStyleSheet("background-color: grey ")
            self.lLswitchBttn.setText( "FK" )
        else:
            self.lLswitchBttn.setStyleSheet("background-color: dark grey ")
            self.lLswitchBttn.setText( "IK" ) 
        
        lLgbBox.setLayout( lLgbLayout )
        
        self.lLswitchBttn.clicked.connect( self.lLegSwitch )
        return lLgbBox
        
                
###########################################################################################
    # IkFK Seamless Switching Tools Function 
    def lArmSwitch( self ):
        switchValue= cmds.getAttr("L_arm_extra_CTL.ikFKSwitch")
        if switchValue == 0 :
            self.cSwitchToFK_Fn(["L_shoulder_FK01_CTL", "L_elbow_FK01_CTL", "L_wrist_FK01_CTL"], ["L_shoulder_IK01", "L_elbow_IK01", "L_wrist_IK01", "L_wrist_IK02"])
            cmds.setAttr( "L_arm_extra_CTL.ikFKSwitch", 1 )
            self.lAswitchBttn.setStyleSheet("background-color: grey ")
            self.lAswitchBttn.setText( "FK" )
            print "Switched Left Arm To FK.",
        else:
            self.cSwitchToIK_Fn(["L_shoulder_IK01_CTL", "L_arm_pv_CTL", "L_armIK_CTL"], ["L_shoulder_FK01", "L_elbow_FK01", "L_wrist_FK01"])
            cmds.setAttr( "L_arm_extra_CTL.ikFKSwitch", 0 )
            self.lAswitchBttn.setStyleSheet("background-color: dark grey ")
            self.lAswitchBttn.setText( "IK" )
            print "Switched Left Arm To IK."
    
    def rArmSwitch(self):
        switchValue= cmds.getAttr("R_arm_extra_CTL.ikFKSwitch")
        if switchValue == 0 :
            self.cSwitchToFK_Fn(["R_shoulder_FK01_CTL", "R_elbow_FK01_CTL", "R_wrist_FK01_CTL"], ["R_shoulder_IK01", "R_elbow_IK01", "R_wrist_IK01", "R_wrist_IK02"])
            cmds.setAttr( "R_arm_extra_CTL.ikFKSwitch", 1 )
            self.rAswitchBttn.setStyleSheet("background-color: grey ")
            self.rAswitchBttn.setText( "FK" )
            print "Switched Right Arm To FK.", 
        else:
            self.cSwitchToIK_Fn(["R_shoulder_IK01_CTL", "R_arm_pv_CTL", "R_armIK_CTL"], ["R_shoulder_FK01", "R_elbow_FK01", "R_wrist_FK01"])
            cmds.setAttr( "R_arm_extra_CTL.ikFKSwitch", 0 )
            self.rAswitchBttn.setStyleSheet("background-color: dark grey ")
            self.rAswitchBttn.setText( "IK" )
            print "Switched Right Arm To IK."
    
    def lLegSwitch(self):
        switchValue= cmds.getAttr( "L_leg_extra_CTL.ikFKSwitch" )
        if switchValue == 0 :
            self.cSwitchToFK_Fn(["L_hip_FK01_CTL", "L_knee_FK01_CTL", "L_ankle_FK01_CTL"], ["L_hip_IK01", "L_knee_IK01", "L_ankle_IK01", "L_ankle_IK02"])
            cmds.setAttr( "L_leg_extra_CTL.ikFKSwitch", 1 )
            self.lLswitchBttn.setStyleSheet("background-color: grey ")
            self.lLswitchBttn.setText( "FK" )
            print "Switched Left Leg To FK.",
        else:
            self.cSwitchToIK_Fn(["L_hip_IK01_CTL", "L_leg_pv_CTL", "L_legIK_CTL"], ["L_hip_FK01", "L_knee_FK01", "L_ankle_FK01"])
            cmds.setAttr( "L_leg_extra_CTL.ikFKSwitch", 0 )
            self.lLswitchBttn.setStyleSheet("background-color: dark grey ")
            self.lLswitchBttn.setText( "IK" )
            print "Switched Left Leg To IK."
    
    def rLegSwitch(self):    
        switchValue= cmds.getAttr("R_leg_extra_CTL.ikFKSwitch" )
        if switchValue == 0 :
            self.cSwitchToFK_Fn(["R_hip_FK01_CTL", "R_knee_FK01_CTL", "R_ankle_FK01_CTL"], ["R_hip_IK01", "R_knee_IK01", "R_ankle_IK01", "R_ankle_IK02"])
            cmds.setAttr( "R_leg_extra_CTL.ikFKSwitch", 1 )
            self.rLswitchBttn.setStyleSheet("background-color: grey ")
            self.rLswitchBttn.setText( "FK" )
            print "Switched Right Leg To FK.",
        else:
            self.cSwitchToIK_Fn(["R_hip_IK01_CTL", "R_leg_pv_CTL", "R_legIK_CTL"], ["R_hip_FK01", "R_knee_FK01", "R_ankle_FK01"])
            cmds.setAttr( "R_leg_extra_CTL.ikFKSwitch", 0 )
            self.rLswitchBttn.setStyleSheet("background-color: dark grey ")
            self.rLswitchBttn.setText( "IK" )
            print "Switched Right Leg To IK."
        
    # Switch To FK Function
    def cSwitchToFK_Fn( self, FKCtrlList, IKJntList ):
        self.FKCtrlList= FKCtrlList
        self.IKJntList= IKJntList
        
        if cmds.objExists( self.FKCtrlList[0] )==True:
            if cmds.objExists( self.FKCtrlList[1] )==True:
                if cmds.objExists( self.FKCtrlList[2] )==True:
                    if cmds.objExists( self.IKJntList[0] )==True:
                        if cmds.objExists( self.IKJntList[1] )==True:
                            if cmds.objExists( self.IKJntList[2] )==True:
                                pass
                            else:
                                cmds.warning( "Invalid IK Wrist/Ankle Joint." )
                        else:
                            cmds.warning( "Invalid IK Elbow/Knee Joint." )
                    else:
                        cmds.warning( "Invalid IK Shoulder/Hip Joint." )
                else:
                    cmds.warning( "Invalid FK Wrist/Ankle Controller." )
            else:
                cmds.warning( "Invalid FK Elbow/Knee Controller." )
        else:
            cmds.warning( "Invalid FK Shoulder/Hip Controller." )
        
        # Create Temparary FK Controllers Hierachy
        self.ctrlGrpList=[]
        self.locList=[]
        self.locGrpList= []
        
        for each in self.FKCtrlList:
            ctrlGrp= cmds.listRelatives( each, p=1 )[0]
            self.ctrlGrpList.append( ctrlGrp )
            loc= cmds.spaceLocator( n=str(each).replace( "CTL", "loc" ) )[0]
            self.locList.append( loc )
            locGrp= cmds.group( n="%s_GRP" % loc, em=0 )
            self.locGrpList.append( locGrp )
            tmpCnst= cmds.parentConstraint( ctrlGrp, locGrp, mo=0 )
            cmds.delete( tmpCnst )
        
        locNum= len( self.locList )
        locGrpNum= len( self.locGrpList )
        
        if locNum == locGrpNum:
            for each in reversed(range(1,locGrpNum)):
                n= each
                cmds.parent( self.locGrpList[n], self.locList[(n-1)] )
                n= n-1
        
        # Mimic IK Shoulder/Hip Position
        tmpCnst=cmds.parentConstraint( self.IKJntList[0], self.locList[0], mo=0 )
        cmds.delete( tmpCnst )
        locAPosX= cmds.getAttr( "%s.tx" % self.locList[0] )
        locAPosY= cmds.getAttr( "%s.ty" % self.locList[0] )
        locAPosZ= cmds.getAttr( "%s.tz" % self.locList[0] )
        locAOrientX= cmds.getAttr( "%s.rx" % self.locList[0] )
        locAOrientY= cmds.getAttr( "%s.ry" % self.locList[0] )
        locAOrientZ= cmds.getAttr( "%s.rz" % self.locList[0] )
        cmds.setAttr( "%s.tx" % self.FKCtrlList[0], locAPosX )
        cmds.setAttr( "%s.ty" % self.FKCtrlList[0], locAPosY )
        cmds.setAttr( "%s.tz" % self.FKCtrlList[0], locAPosZ )
        cmds.setAttr( "%s.rx" % self.FKCtrlList[0], locAOrientX )
        cmds.setAttr( "%s.ry" % self.FKCtrlList[0], locAOrientY )
        cmds.setAttr( "%s.rz" % self.FKCtrlList[0], locAOrientZ )
        
        # Mimic IK Elbow/Knee Position
        tmpCnst=cmds.parentConstraint( self.IKJntList[1], self.locList[1], mo=0 )
        cmds.delete( tmpCnst )
        locBPosX= cmds.getAttr( "%s.tx" % self.IKJntList[1] )
        locBPosY= cmds.getAttr( "%s.ty" % self.IKJntList[1] )
        locBPosZ= cmds.getAttr( "%s.tz" % self.IKJntList[1] )
        locBOrientX= cmds.getAttr( "%s.rx" % self.IKJntList[1] )
        locBOrientY= cmds.getAttr( "%s.ry" % self.IKJntList[1] )
        locBOrientZ= cmds.getAttr( "%s.rz" % self.IKJntList[1] )
        
        if cmds.getAttr( "%s.preferredAngleY" % self.IKJntList[1] ) == -90 :
            ctrlGrpBPosX= cmds.getAttr( "%s.tx" % self.ctrlGrpList[1] )
            cmds.setAttr( "%s.tx" % self.FKCtrlList[1], (locBPosX - ctrlGrpBPosX) )
        else:
            ctrlGrpBPosX= cmds.getAttr( "%s.tx" % self.ctrlGrpList[1] )
            cmds.setAttr( "%s.tx" % self.FKCtrlList[1], (locBPosX + ctrlGrpBPosX) )
        
        if cmds.getAttr( "%s.preferredAngleX" % self.IKJntList[1] ) == 90 :
            ctrlGrpBPosY= cmds.getAttr( "%s.ty" % self.ctrlGrpList[1] )
            cmds.setAttr( "%s.ty" % self.FKCtrlList[1], (locBPosY - ctrlGrpBPosY) )
        else:
            ctrlGrpBPosY= cmds.getAttr( "%s.ty" % self.ctrlGrpList[1] )
            cmds.setAttr( "%s.ty" % self.FKCtrlList[1], (locBPosY + ctrlGrpBPosY) ) 
            
        cmds.setAttr( "%s.tz" % self.FKCtrlList[1], locBPosZ )
        cmds.setAttr( "%s.rx" % self.FKCtrlList[1], locBOrientX )
        cmds.setAttr( "%s.ry" % self.FKCtrlList[1], locBOrientY )
        cmds.setAttr( "%s.rz" % self.FKCtrlList[1], locBOrientZ )
        
        # Mimic IK Wrist/Ankle Position
        tmpCnst=cmds.parentConstraint( self.IKJntList[2], self.locList[2], mo=0 )
        cmds.delete( tmpCnst )
        locCPosX= cmds.getAttr( "%s.tx" % self.IKJntList[2] )
        locCPosY= cmds.getAttr( "%s.ty" % self.IKJntList[2] )
        locCPosZ= cmds.getAttr( "%s.tz" % self.IKJntList[2] )
        locOrientX= cmds.getAttr( "%s.rx" % self.IKJntList[3] )
        locOrientY= cmds.getAttr( "%s.ry" % self.IKJntList[3] )
        locOrientZ= cmds.getAttr( "%s.rz" % self.IKJntList[3] )
        
        if cmds.getAttr( "%s.preferredAngleY" % self.IKJntList[1] ) == -90 :
            ctrlGrpCPosX= cmds.getAttr( "%s.tx" % self.ctrlGrpList[2] )
            cmds.setAttr( "%s.tx" % self.FKCtrlList[2], (locCPosX - ctrlGrpCPosX) )
        else:
            ctrlGrpCPosX= cmds.getAttr( "%s.tx" % self.ctrlGrpList[2] )
            cmds.setAttr( "%s.tx" % self.FKCtrlList[2], (locCPosX + ctrlGrpCPosX) )
        
        if cmds.getAttr( "%s.preferredAngleX" % self.IKJntList[1] ) == 90 :
            ctrlGrpCPosY= cmds.getAttr( "%s.ty" % self.ctrlGrpList[2] )
            cmds.setAttr( "%s.ty" % self.FKCtrlList[2], (locCPosY - ctrlGrpCPosY) )
        else:
            ctrlGrpCPosY= cmds.getAttr( "%s.ty" % self.ctrlGrpList[2] )
            cmds.setAttr( "%s.ty" % self.FKCtrlList[2], (locCPosY + ctrlGrpCPosY) )  

        cmds.setAttr( "%s.tz" % self.FKCtrlList[2], locCPosZ )
        cmds.setAttr( "%s.rx" % self.FKCtrlList[2], locOrientX )
        cmds.setAttr( "%s.ry" % self.FKCtrlList[2], locOrientY )
        cmds.setAttr( "%s.rz" % self.FKCtrlList[2], locOrientZ )
        
        cmds.delete( self.locGrpList[0] )
                  
    # Switch To IK Function
    def cSwitchToIK_Fn( self, IKCtrlList, FKJntList ):
        self.IKCtrlList= IKCtrlList
        self.FKJntList= FKJntList
        
        if cmds.objExists( self.IKCtrlList[0] )==True:
            if cmds.objExists( self.IKCtrlList[1] )==True:
                if cmds.objExists( self.IKCtrlList[2] )==True:
                    if cmds.objExists( self.FKJntList[0] )==True:
                        if cmds.objExists( self.FKJntList[1] )==True:
                            if cmds.objExists( self.FKJntList[2] )==True:
                                pass
                            else:
                                cmds.warning( "Invalid FK Wrist/Ankle Joint." )
                        else:
                            cmds.warning( "Invalid FK Elbow/Knee Joint." )
                    else:
                        cmds.warning( "Invalid FK Shoulder/Hip Joint." )
                else:
                    cmds.warning( "Invalid IK Wrist/Ankle Controller." )
            else:
                cmds.warning( "Invalid IK Elbow/Knee Controller." )
        else:
            cmds.warning( "Invalid IK Shoulder/Hip Controller." )
        
        # Create Temparary IK Controllers Hierachy
        ctrlGrpList= []
        self.locList=[]
        self.locGrpList= []
        
        for each in self.IKCtrlList:
            ctrlGrp= cmds.listRelatives( each, p=1 )[0]
            ctrlGrpList.append( ctrlGrp )
            loc= cmds.spaceLocator( n=str(each).replace( "CTL", "loc" ) )[0]
            self.locList.append( loc )
            locGrp= cmds.group( n="%s_GRP" % loc, em=0 )
            self.locGrpList.append( locGrp )
            tmpCnst= cmds.parentConstraint( ctrlGrp, locGrp, mo=0 )
            cmds.delete( tmpCnst )
            cmds.select( cl=1 )
        
        # Mimic Shoulder/Hip Joint Position
        tmpCnst= cmds.parentConstraint( self.FKJntList[0], self.locList[0], mo=0 )
        cmds.delete( tmpCnst )
        locAPosX= cmds.getAttr( "%s.tx" % self.locList[0] )
        locAPosY= cmds.getAttr( "%s.ty" % self.locList[0] )
        locAPosZ= cmds.getAttr( "%s.tz" % self.locList[0] )
        locOrientX= cmds.getAttr( "%s.rx" % self.locList[0] )
        locOrientY= cmds.getAttr( "%s.ry" % self.locList[0] )
        locOrientZ= cmds.getAttr( "%s.rz" % self.locList[0] )
        cmds.setAttr( "%s.tx" % self.IKCtrlList[0], locAPosX )
        cmds.setAttr( "%s.ty" % self.IKCtrlList[0], locAPosY )
        cmds.setAttr( "%s.tz" % self.IKCtrlList[0], locAPosZ )
        
        locB= cmds.spaceLocator( n=str(self.IKCtrlList[1]).replace( "CTL", "locB" ) )[0]
        locBGrp= cmds.group( n="%s_GRP" % locB, em=0 ) 
        if self.FKJntList[1].startswith( "L_elbow" ):
            cmds.setAttr( "%s.tz" % locB, -80 )
        if self.FKJntList[1].startswith( "R_elbow" ):
            cmds.setAttr( "%s.tz" % locB, 80 )
        if self.FKJntList[1].startswith( "L_knee" ):
            cmds.setAttr( "%s.tz" % locB, 80 )
        if self.FKJntList[1].startswith( "R_knee" ):
            cmds.setAttr( "%s.tz" % locB, -80 )
        tmpCnst= cmds.parentConstraint(self.FKJntList[1], locBGrp, mo=0 )
        cmds.delete( tmpCnst )
        
        # Mimic Elbow/Knee Joint Position
        tmpCnst= cmds.parentConstraint( locB, self.locList[1], mo=0 )
        cmds.delete( tmpCnst )
        locBPosX= cmds.getAttr( "%s.tx" % self.locList[1] )
        locBPosY= cmds.getAttr( "%s.ty" % self.locList[1] )
        locBPosZ= cmds.getAttr( "%s.tz" % self.locList[1] )
        cmds.setAttr( "%s.tx" % self.IKCtrlList[1], locBPosX )
        cmds.setAttr( "%s.ty" % self.IKCtrlList[1], locBPosY )
        cmds.setAttr( "%s.tz" % self.IKCtrlList[1], locBPosZ )
        
        # Hand/Leg CTL Rotation Value
        tmpCnst= cmds.parentConstraint( self.FKJntList[2], self.locList[2], mo=0 )
        cmds.delete( tmpCnst )
        locCPosX= cmds.getAttr( "%s.tx" % self.locList[2] )
        locCPosY= cmds.getAttr( "%s.ty" % self.locList[2] )
        locCPosZ= cmds.getAttr( "%s.tz" % self.locList[2] )
        locCOrientX= cmds.getAttr( "%s.rx" % self.locList[2] )
        if locCOrientX > 120 :
            locCOrientX= locCOrientX -180
        elif locCOrientX < -120 :
            locCOrientX= locCOrientX +180
        locCOrientY= cmds.getAttr( "%s.ry" % self.locList[2] )
        locCOrientZ= cmds.getAttr( "%s.rz" % self.locList[2] )
        cmds.setAttr( "%s.tx" % self.IKCtrlList[2], locCPosX )
        cmds.setAttr( "%s.ty" % self.IKCtrlList[2], locCPosY )
        cmds.setAttr( "%s.tz" % self.IKCtrlList[2], locCPosZ )
        cmds.setAttr( "%s.rx" % self.IKCtrlList[2], locCOrientX )
        
        if self.IKCtrlList[2].startswith( "L_wrist" ):
            cmds.setAttr( "%s.ry" % self.IKCtrlList[2], (locCOrientY) )
        if self.IKCtrlList[2].startswith( "R_wrist" ):
            cmds.setAttr( "%s.ry" % self.IKCtrlList[2], (locCOrientY) )
        if self.IKCtrlList[2].startswith( "L_ankle" ):
            cmds.setAttr( "%s.ry" % self.IKCtrlList[2], (locCOrientY - 9) )
        if self.IKCtrlList[2].startswith( "R_ankle" ):
            cmds.setAttr( "%s.ry" % self.IKCtrlList[2], (locCOrientY - 9) )
            
        cmds.setAttr( "%s.rz" % self.IKCtrlList[2], locCOrientZ )

        cmds.delete( self.locGrpList[0], self.locGrpList[1], self.locGrpList[2], locBGrp )

if __name__ == "__main__" :
    a= Form()
    a.show()
