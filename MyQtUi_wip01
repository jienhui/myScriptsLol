from PySide.QtGui import *
from PySide.QtCore import *
import maya.OpenMayaUI as mui
from shiboken import wrapInstance

# Main UI
def mayaMainWindow():
    mainWindow= mui.MQtUtil.mainWindow()
    return wrapInstance(long(mainWindow), QWidget)

class Form(QDialog):
    def __init__(self, parent=mayaMainWindow()):
        super(Form, self).__init__()
        # Menu Bar
        bar= QMenuBar()
        
        barFile= bar.addMenu("Edit")
        self.fileReset= barFile.addAction("Reset      ")
        self.fileReset.setShortcut("Ctrl + R")
        self.connect( self.fileReset, SIGNAL("triggered()"), self.resetUI() )
        
        barFile.addSeparator()
        
        fileQuit= barFile.addAction("Quit      ")
        self.connect( fileQuit, SIGNAL("triggered()"), SLOT("reject()") )

        barHelp= bar.addMenu("Help")
        helpReadme= barHelp.addAction("ReadMe      ")
        self.connect( helpReadme, SIGNAL("triggered()"), self.readMeDialog() )
          
        # Tab Widget
        self.tab= QTabWidget()
        self.tab1= QWidget()
        self.tab2= QWidget()
        self.tab3= QWidget()
        self.tab.addTab( self.tab1, "Prop" )
        self.tab.addTab( self.tab2, "Biped" )
        self.tab.addTab( self.tab3, "Quadruped" )
        self.tab1UI()
        self.tab2UI()
        #self.tab3UI()
        
        # Layout
        mainLayout= QVBoxLayout()
        mainLayout.addWidget( bar )
        mainLayout.setSpacing(5)
        mainLayout.addWidget( self.tab )
        mainLayout.stretch(1)
        # Window Structure
        self.setLayout(mainLayout)
        #self.resize( 220, 400 )
        self.setWindowTitle("Practice")
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
       
    # Menu Function
    def resetUI(self):
        # reset Function
        print "reset"
        
    def readMeDialog(self):
        # Read Me Function
        print "read me"
        
    # Prop Tab UI
    def tab1UI(self):
        tab1Layout= QVBoxLayout()
        tab1Layout.addWidget( self.propGrpBox() )
        tab1Layout.addWidget( self.ropeGrpBox() )
        tab1Layout.addWidget( self.cRigGrpBox() )
        self.tab1.setLayout( tab1Layout )
        tab1Layout.addStretch(1)
    
    def propGrpBox(self):
        propLayout= QGridLayout()
        propBox= QGroupBox("Auto Prop Rig")
        
        rigMethodLabel= QLabel( "Rig" )
        oneByOneRB= QRadioButton("&One By One")
        allToOneRB= QRadioButton( "&All To One" )
        deformLabel= QLabel( "Deformers" )
        addSquashCB= QCheckBox("Add &Squash")  
        propRigBttn= QPushButton( "Rig" )
        
        oneByOneRB.setChecked(True)
        addSquashCB.setChecked(True)
        
        propLayout.addWidget( rigMethodLabel , 0, 0, 1, 3 )
        propLayout.addWidget( oneByOneRB, 1, 0 )
        propLayout.addWidget( allToOneRB, 1, 1 )
        propLayout.addWidget( deformLabel, 2, 0, 1, 3 )
        propLayout.addWidget( addSquashCB, 3, 0 )
        propLayout.addWidget( propRigBttn, 4, 0, 1, 3 )
        propBox.setLayout( propLayout )
        
        return propBox
    
    def ropeGrpBox(self):
        ropeLayout= QGridLayout()
        ropeBox= QGroupBox("Auto Rope Rig")
        
        IKSpineRB= QRadioButton("&IK Spine")
        wireInOneRB= QRadioButton( "&Wire Deformer" )

        crvLE= QLineEdit()
        crvLE.setPlaceholderText( "Please add curve..." )
        crvBttn= QPushButton( "Add Curve" )
        crvMenu = QMenu(self)
        crvMenu.addAction("&Add Selected Curve")
        crvMenu.addAction("&Poly Edge To Curve")
        crvMenu.addAction("&Create Curve")
        crvBttn.setMenu(crvMenu)      
        
        ctrlLabel= QLabel("Ctrls number:")
        ctrlSB= QDoubleSpinBox()
        ctrlSB.setRange( 1, 1000 )
        
        ropeRigBttn= QPushButton( "Rig" )
        
        wireInOneRB.setChecked(True)
        
        ropeLayout.addWidget( IKSpineRB, 0, 0 )
        ropeLayout.addWidget( wireInOneRB, 0, 1 )
        ropeLayout.addWidget( crvLE, 1, 0, 1, 3 )
        ropeLayout.addWidget( crvBttn, 2, 0, 1, 3 )
        ropeLayout.addWidget( ctrlLabel, 3, 0 )
        ropeLayout.addWidget( ctrlSB, 3, 1 )
        ropeLayout.addWidget( ropeRigBttn, 4, 0, 1, 3 )
        ropeBox.setLayout( ropeLayout )
        
        return ropeBox
        
    def cRigGrpBox(self):
        cRigLayout= QVBoxLayout()
        cRigBox= QGroupBox( "Master Controllers")
        
        cRigBttn= QPushButton( "Add" )
        
        cRigLayout.addWidget( cRigBttn )
        cRigBox.setLayout( cRigLayout )
        
        return cRigBox
    
    # Biped Tab UI
    def tab2UI(self):
        tab2Layout= QVBoxLayout()
        tab2Layout.addWidget( self.boneGrpBox() )
        tab2Layout.addWidget( self.bindSkinGrpBox() )
        tab2Layout.addWidget( self.bipedRigGrpBox() )
        self.tab2.setLayout( tab2Layout )
        tab2Layout.addStretch(1)
        
    def boneGrpBox(self):
        boneLayout= QGridLayout()
        boneBox= QGroupBox("Proxy Joint")
        
        mirrorLabel= QLabel( "Mirror Joint?" ) 
        yesRB= QRadioButton( "Yes" )
        noRB= QRadioButton( "No" )
        
        setUpJntBttn= QPushButton("Create")
        resetJntBttn= QPushButton("Reset")
        freezeJntBttn= QPushButton( "Polish" )
        
        yesRB.setChecked(True)
        
        boneLayout.addWidget( mirrorLabel, 0, 0 )
        boneLayout.addWidget( yesRB, 0, 1 )
        boneLayout.addWidget( noRB, 0, 2 )
        boneLayout.addWidget( setUpJntBttn, 1, 0, 1, 3 )
        boneLayout.addWidget( resetJntBttn, 2, 0, 1, 3 )
        boneLayout.addWidget( freezeJntBttn, 3, 0, 1, 3 )
        boneBox.setLayout( boneLayout )
        
        return boneBox
        
    def bindSkinGrpBox(self):
        bindSkinLayout= QVBoxLayout()
        bindSkinBox= QGroupBox( "Skinning" )
        
        bindBttn= QPushButton( "Bind Skin" )
        
        bindSkinLayout.addWidget( bindBttn )
        bindSkinBox.setLayout( bindSkinLayout )
        
        return bindSkinBox
        
    def bipedRigGrpBox(self):
        bipedLayout= QVBoxLayout()
        bipedBox= QGroupBox( "Setup Controllers" )
        
        setupRigBttn= QPushButton( "Setup Rig" )
        
        bipedLayout.addWidget( self.bendyBox() )
        bipedLayout.addWidget( setupRigBttn )
        bipedBox.setLayout( bipedLayout )
        
        return bipedBox
        
    def bendyBox(self):
        bendyLayout= QVBoxLayout()
        bendyBox= QGroupBox("Bendy Setup")
        bendyBox.setCheckable(True)
        bendyBox.setChecked(True)
        
        allRB= QRadioButton( "All" )
        armRB= QRadioButton( "Arm" )
        legRB= QRadioButton( "Leg" )
        
        allRB.setChecked(True)
        
        bendyLayout.addWidget( allRB )
        bendyLayout.addWidget( armRB )
        bendyLayout.addWidget( legRB )
        bendyBox.setLayout( bendyLayout )
        
        return bendyBox
            
        
        
        
if __name__ == "__main__":
    a= Form()
    a.show()
