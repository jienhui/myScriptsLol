from PySide.QtGui import *
from PySide.QtCore import *
import maya.OpenMayaUI as mui
from shiboken import wrapInstance

# Main UI
def mayaMainWindow():
    mainWindow= mui.MQtUtil.mainWindow()
    return wrapInstance(long(mainWindow), QWidget)

class Form(QDialog):
    def __init__(self, parent=mayaMainWindow()):
        super(Form, self).__init__()
        # Menu Bar
        bar= QMenuBar()
        
        barFile= bar.addMenu("Edit")
        self.fileReset= barFile.addAction("Reset      ")
        self.fileReset.setShortcut("Ctrl + R")
        self.connect( self.fileReset, SIGNAL("triggered()"), self.resetUI() )
        
        barFile.addSeparator()
        
        fileQuit= barFile.addAction("Quit      ")
        self.connect( fileQuit, SIGNAL("triggered()"), SLOT("reject()") )

        barHelp= bar.addMenu("Help")
        helpReadme= barHelp.addAction("ReadMe      ")
        self.connect( helpReadme, SIGNAL("triggered()"), self.readMeDialog() )
          
        # Tab Widget
        tab= QTabWidget()
        self.tab1= QWidget()
        self.tab2= QWidget()
        self.tab3= QWidget()
        tab.addTab( self.tab1, "Prop" )
        tab.addTab( self.tab2, "Biped" )
        tab.addTab( self.tab3, "Quadruped" )
        self.tab1UI()
        #self.tab2UI()
        #self.tab3UI()
        
        # Layout
        mainLayout= QVBoxLayout()
        mainLayout.addWidget( bar )
        mainLayout.setSpacing(5)
        mainLayout.addWidget( tab )
        mainLayout.stretch(1)
        # Window Structure
        self.setLayout(mainLayout)
        self.setWindowTitle("Practice")
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
        
        
    # Menu Function
    def resetUI(self):
        # reset Function
        print "reset"
        
    def readMeDialog(self):
        # Read Me Function
        print "read me"
        
    # Prop Tab UI
    def tab1UI(self):
        tab1Layout= QVBoxLayout()
        tab1Layout.addWidget( self.propGrpBox() )
        tab1Layout.addWidget( self.ropeGrpBox() )
        self.tab1.setLayout( tab1Layout )
    
    def propGrpBox(self):
        propLayout= QGridLayout()
        propBox= QGroupBox("Auto Prop Rig")
        
        rigMethodLabel= QLabel( "Rig" )
        oneByOneRB= QRadioButton("&One by one")
        allToOneRB= QRadioButton( "&All to one" )
        deformLabel= QLabel( "Deformers" )
        addSquashCB= QCheckBox("Add &squash")  
        propRigBttn= QPushButton( "Rig" )
        
        oneByOneRB.setChecked(True)
        addSquashCB.setChecked(True)
        
        propLayout.addWidget( rigMethodLabel , 0, 0, 1, 3 )
        propLayout.addWidget( oneByOneRB, 1, 0 )
        propLayout.addWidget( allToOneRB, 1, 1 )
        propLayout.addWidget( deformLabel, 2, 0, 1, 3 )
        propLayout.addWidget( addSquashCB, 3, 0 )
        propLayout.addWidget( propRigBttn, 4, 0, 1, 3 )
        propBox.setLayout( propLayout )
        
        return propBox
    
    def ropeGrpBox(self):
        ropeLayout= QGridLayout()
        ropeBox= QGroupBox("Auto Rope Rig")
        
        IKSpineRB= QRadioButton("&IK Spine")
        wireInOneRB= QRadioButton( "&Wire Deformer" )

        crvLE= QLineEdit()
        crvLE.setPlaceholderText( "Please add curve..." )
        crvBttn= QPushButton( "Add Curve" )
        crvMenu = QMenu(self)
        crvMenu.addAction("&Create Curve")
        crvMenu.addAction("&Poly Edge To Curve")
        crvMenu.addAction("&Add Selected")
        crvBttn.setMenu(crvMenu)      
        
        ctrlLabel= QLabel("Ctrl number:")
        ctrlSB= QDoubleSpinBox()
        ctrlSB.setRange( 1, 1000 )
        
        ropeRigBttn= QPushButton( "Rig" )
        
        wireInOneRB.setChecked(True)
        
        ropeLayout.addWidget( IKSpineRB, 0, 0 )
        ropeLayout.addWidget( wireInOneRB, 0, 1 )
        ropeLayout.addWidget( crvLE, 1, 0, 1, 3 )
        ropeLayout.addWidget( crvBttn, 2, 0, 1, 3 )
        ropeLayout.addWidget( ctrlLabel, 3, 0 )
        ropeLayout.addWidget( ctrlSB, 3, 1 )
        ropeLayout.addWidget( ropeRigBttn, 4, 0, 1, 3 )
        ropeBox.setLayout( ropeLayout )
        
        return ropeBox
        
        
        



if __name__ == "__main__":
    a= Form()
    a.show()
