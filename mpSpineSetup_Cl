import maya.cmds as cmds

    ####################################################################################    Return List Notes    #################################################################################
    #                                                                                                                                                                                            #
    #    1. self.spineNodesList= [ 'spine_CI01', 'spine_stVolume_pma01', 'spine_autoStretch_con01', 'spine_stretchy_DIV_MD01', 'spine_stretchy_POW_MD01', 'spine_stretchy_DIV_MD02' ]            #
    #    2. self.ikCTLList= [ 'pelvis_IK_CTL01', 'spine_IK_CTL01', 'chest_IK_CTL01' ]                                                                                                            #
    #    3. self.ikCTLGrpList= [ 'body_IK_CTL01_GRP', 'body_IK_CTL02_GRP', 'body_IK_CTL03_GRP' ]                                                                                                 #
    #    4. self.drvJntList= [ 'body_Drv01', 'body_Drv02', 'body_Drv03' ]                                                                                                                        #
    #    5. self.MPList= [ 'body_Jnt01_MP', 'body_Jnt02_MP', 'body_Jnt03_MP' ]                                                                                                                   #
    #    6. self.jntGrpList= [ 'body_Jnt01_GRP', 'body_Jnt02_GRP', 'body_Jnt03_GRP' ]                                                                                                            #
    #    7. self.centerCTL, centerCTLGrp, self.chestFkCTL, chestFkCTLGrp                                                                                                                         #
    #                                                                                                                                                                                            #
    ##############################################################################################################################################################################################
    
###### Motion Path Spine Setup Class ######
class mpSpineSetup_Cl():
    def __init__( self, pelvis, spine, chest ):
        self.pelvis= pelvis
        self.spine= spine
        self.chest= chest
        if cmds.objExists( self.pelvis ) == True:
            if cmds.objExists( self.spine ) == True:
                if cmds.objExists( self.chest ) == True:
                    self.mpSpineSetup_Fn()
                else:
                    cmds.warning( "Chest Joint Not Found!" )
            else:
                cmds.warning( "Spine Joint Not Found!" )
        else:
                cmds.warning( "Pelvis Joint Not Found!" )
        
    # Motion Path Spine Setup Function
    def mpSpineSetup_Fn(self):         
        
        self.MPList= []
        self.drvJntList= []
        self.jntGrpList= []
        self.jntAxList= []
        self.spineNodesList= []
        self.ikCTLList= []
        self.ikCTLGrpList= []
        allCTLGRP= []
        self.spineCTLGrp= cmds.group( n= "spine_CTL_GRP", em=1 )
        self.spineIKCTLGrp= cmds.group( n= "spine_IK_CTL_GRP", em=1 )
        self.aimLocGrp= cmds.group( n="spine_aimLoc_GRP", em=1 )
        cmds.setAttr( "%s.v" % self.aimLocGrp, 0 )
        self.spineJntGrp= cmds.group( n="spine_Jnt_GRP", em=1 )
        cmds.setAttr( "%s.v" % self.spineJntGrp, 0 )
        self.spineDrvJntGrp= cmds.group( n="spine_Drv_GRP", em=1 )
        cmds.setAttr( "%s.v" % self.spineDrvJntGrp, 0 )
        self.spineExtra= cmds.group( n="spine_extraNodes", em=1 )
        cmds.parent( self.spineIKCTLGrp, self.spineCTLGrp )
        cmds.parent( self.aimLocGrp, self.spineDrvJntGrp, self.spineExtra )
        
        # tmpPelvis & tmpChest position
        cmds.select(cl=1)
        tmpChest= cmds.joint( n="tmpChest" )
        tmpCnst= cmds.parentConstraint( self.chest, self.spine, tmpChest, mo=0 )[0]
        cmds.setAttr( "%s.%sW0" % (tmpCnst, self.chest), 0.7 )
        cmds.setAttr( "%s.%sW1" % (tmpCnst, self.spine), 0.3 )
        cmds.delete( tmpCnst )
        cmds.select(cl=1)
        tmpPelvis= cmds.joint( n="tmpPelvis" )
        tmpCnst= cmds.parentConstraint( self.pelvis, self.spine, tmpPelvis, mo=0 )[0]
        cmds.setAttr( "%s.%sW0" % (tmpCnst, self.pelvis), 0.7 )
        cmds.setAttr( "%s.%sW1" % (tmpCnst, self.spine), 0.3 )
        cmds.delete( tmpCnst )
        
        # create motion path curve
        pelvisPos= cmds.xform( self.pelvis, q=1, t=1, ws=1 )
        tmpPelvisPos= cmds.xform( tmpPelvis, q=1, t=1, ws=1 )
        chestPos= cmds.xform( self.chest, q=1, t=1, ws=1 )
        tmpChestPos= cmds.xform( tmpChest, q=1, t=1, ws=1 )
        spinePos= cmds.xform( self.spine, q=1, t=1, ws=1 )
        newCrv= cmds.curve( d=3, p= [(pelvisPos), (tmpPelvisPos), (spinePos), (tmpChestPos), (chestPos)], k=[0,0,0,1,2,2,2] )
        self.spineCrv= cmds.rename( newCrv, "spine_crv" )
        cmds.setAttr( "%s.v" % self.spineCrv, 0 )
        cmds.parent( self.spineCrv, self.spineExtra )
        self.selJnt= [ self.pelvis, self.spine, self.chest ]
        cmds.delete( tmpChest, tmpPelvis )
        cmds.select( cl=1 )
        jntRad= cmds.getAttr( "%s.radius" % self.chest )

        for each in self.selJnt:
            # create group for each joints
            self.jntAx= cmds.group( n= "%s_ax" % each, em=1 )
            self.jntAxList.append( self.jntAx )
            self.jntGrp= cmds.group( n= "%s_GRP" % each, em=0 )
            self.jntGrpList.append( self.jntGrp )
            tmpCnst= cmds.parentConstraint( each, self.jntGrp, mo=0 )
            cmds.delete( tmpCnst )
            cmds.parent( each, self.jntAx )
            cmds.parent( self.jntGrp, self.spineJntGrp )
            cmds.select( cl=1 )
            # create spine drv joint
            self.drvJnt= cmds.joint( n=str(each).replace("Jnt", "Drv"), rad=1 )
            self.drvJntList.append( self.drvJnt )
            tmpCnst= cmds.parentConstraint( each, self.drvJnt, mo=0 )
            cmds.delete( tmpCnst )
            cmds.select( cl=1 )
            cmds.parent( self.drvJnt, self.spineDrvJntGrp )
            # set up aimLoc
            self.loc= cmds.spaceLocator( n="%s_aimUp_loc" % each )[0]
            self.locGrp= cmds.group( n="%s_GRP" % self.loc, em=0 )
            cmds.parent( self.locGrp, self.aimLocGrp )
            tmpCnst= cmds.parentConstraint( each, self.locGrp, mo=0 )
            cmds.delete( tmpCnst )
            cmds.setAttr( "%s.tz" % self.locGrp, jntRad*25 )
            # create controller for drv joint
            self.ikCTL= cmds.circle( n= str(self.drvJnt).replace("Drv","IK_CTL"), nr= [0,1,0], r=jntRad*12.5,ch=0 )[0]
            self.ikCTLList.append( self.ikCTL )
            cmds.setAttr( "%s.v" % self.ikCTL, l=1, k=0, ch=0 )
            cmds.setAttr( "%sShape.overrideEnabled" % self.ikCTL, 1 )
            cmds.setAttr( "%sShape.overrideColor" % self.ikCTL, 18 )
            self.ikCTLGRP= cmds.group( n="%s_GRP" % self.ikCTL, em=0 )
            self.ikCTLGrpList.append( self.ikCTLGRP )
            allCTLGRP.append( self.ikCTLGRP )
            tmpCnst= cmds.parentConstraint( each, self.ikCTLGRP, mo=0 )
            cmds.delete( tmpCnst )
            cmds.parentConstraint( self.ikCTL, self.drvJnt, mo=0 )
            cmds.connectAttr( "%s.rx" % self.ikCTL, "%s.rx" % each )
            cmds.connectAttr( "%s.rz" % self.ikCTL, "%s.rz" % each )
            cmds.connectAttr( "%s.sx" % self.ikCTL, "%s.sx" % each )
            cmds.connectAttr( "%s.sy" % self.ikCTL, "%s.sy" % each )
            cmds.connectAttr( "%s.sz" % self.ikCTL, "%s.sz" % each )
            cmds.parentConstraint( self.ikCTL, self.locGrp, mo=1 )
            cmds.scaleConstraint( self.ikCTL, self.locGrp, mo=1 )
            cmds.parent( self.ikCTLGRP, self.spineIKCTLGrp )
            # create Motion Path nodes
            self.MP= cmds.createNode( "motionPath", n="%s_MP" % each )
            self.MPList.append( self.MP )
            cmds.setAttr( "%s.worldUpType" % self.MP, 1 )
            cmds.setAttr("%s.fractionMode" % self.MP, 1 )
            cmds.connectAttr( "%sShape.worldSpace[0]" % self.spineCrv, "%s.geometryPath" % self.MP )
            cmds.connectAttr( "%s.worldMatrix[0]" % self.loc, "%s.worldUpMatrix" % self.MP )
            cmds.connectAttr( "%s.allCoordinates" % self.MP, "%s.translate" % self.jntGrp )
            cmds.connectAttr( "%s.rotate" % self.MP, "%s.rotate" % self.jntGrp )
            cmds.connectAttr( "%s.rotateOrder" % self.MP, "%s.rotateOrder" % self.jntGrp )
            cmds.connectAttr( "%s.message" % self.MP, "%s.specifiedManipLocation" % self.jntGrp )
        
        # create chest FK and center controller
        # chest CTL
        self.chestFkCTL= cmds.circle( n= "chest_FK_CTL", nr= [0,1,0], r=jntRad*15,ch=0 )[0]
        cmds.setAttr( "%s.sx" % self.chestFkCTL, l=1, k=0, ch=0 )
        cmds.setAttr( "%s.sy" % self.chestFkCTL, l=1, k=0, ch=0 )
        cmds.setAttr( "%s.sz" % self.chestFkCTL, l=1, k=0, ch=0 )
        cmds.setAttr( "%s.v" % self.chestFkCTL, l=1, k=0, ch=0 )
        cmds.setAttr( "%sShape.overrideEnabled" % self.chestFkCTL, 1 )
        cmds.setAttr( "%sShape.overrideColor" % self.chestFkCTL, 17 )
        self.chestFkCTLGrp= cmds.group( n="%s_GRP" % self.chestFkCTL, em=0 )
        allCTLGRP.append( self.chestFkCTLGrp )
        cmds.parent( self.chestFkCTLGrp, self.spineCTLGrp )
        tmpCnst= cmds.parentConstraint( self.ikCTLList[1], self.ikCTLList[2], self.chestFkCTLGrp, mo=0 )
        cmds.delete( tmpCnst )
        cmds.parentConstraint( self.chestFkCTL, self.ikCTLGrpList[2], mo=1 )
        
        # center CTL
        self.centerCTL= cmds.circle( n= "center_CTL", nr= [0,1,0], r=jntRad*15,ch=0 )[0]
        cmds.setAttr( "%s.sx" % self.centerCTL, l=1, k=0, ch=0 )
        cmds.setAttr( "%s.sy" % self.centerCTL, l=1, k=0, ch=0 )
        cmds.setAttr( "%s.sz" % self.centerCTL, l=1, k=0, ch=0 )
        cmds.setAttr( "%s.v" % self.centerCTL, l=1, k=0, ch=0 )
        cmds.setAttr( "%sShape.overrideEnabled" % self.centerCTL, 1 )
        cmds.setAttr( "%sShape.overrideColor" % self.centerCTL, 13 )
        cmds.addAttr( self.centerCTL, ln= "____________",  at= "enum", en= "________:" )
        cmds.setAttr( "%s.____________" % self.centerCTL, e=1, cb=1, l=1 )
        cmds.setAttr( "%s.rotateOrder" % self.centerCTL, e=1 , k=1, cb=1 )
        cmds.addAttr( self.centerCTL, ln= "autoVolume",  at= "long", min= 0, max= 1, dv= 1 )
        cmds.setAttr( "%s.autoVolume" % self.centerCTL, e=1, cb=1 )
        cmds.setAttr( "%s.autoVolume" % self.centerCTL, k=1 )
        cmds.addAttr( self.centerCTL, ln= "stretchVolume",  at= "double", min= -10, max= 10, dv= 1 )
        cmds.setAttr( "%s.stretchVolume" % self.centerCTL, e=1, cb=1 )
        cmds.setAttr( "%s.stretchVolume" % self.centerCTL, k=1 )
        cmds.addAttr( self.centerCTL, ln= "secondaryCTL",  at= "long", min= 0, max= 1, dv= 1 )
        cmds.setAttr( "%s.secondaryCTL" % self.centerCTL, e=1, cb=1 )
        self.centerCTLGrp= cmds.group( n="%s_GRP" % self.centerCTL, em=0 )
        allCTLGRP.append( self.centerCTLGrp )
        tmpCnst= cmds.parentConstraint( self.ikCTLList[0], self.ikCTLList[1], self.centerCTLGrp, mo=0 )
        cmds.delete( tmpCnst )
        cmds.parent( self.spineCTLGrp, self.centerCTL )
        cmds.connectAttr( "%s.secondaryCTL" % self.centerCTL, "%s.v" % self.spineIKCTLGrp  )
            
        # create stretchy spine
        self.spineCI= cmds.createNode( "curveInfo", n="spine_CI01" )
        self.spineNodesList.append( self.spineCI )
        cmds.connectAttr( "%s.worldSpace[0]" % self.spineCrv, "%s.inputCurve" % self.spineCI )
        self.curveLength= cmds.getAttr( "%s.arcLength" % self.spineCI )
        self.globalScaleMD= cmds.createNode( "multiplyDivide", n="spine_globalScale_MD01" )
        cmds.setAttr( "%s.input1X" % self.globalScaleMD, self.curveLength )
        cmds.setAttr( "%s.input2X" % self.globalScaleMD, 1 )
        self.spineCon= cmds.createNode( "condition", n="spine_autoStretch_con01" )
        self.spineNodesList.append( self.spineCon )
        cmds.setAttr( "%s.firstTerm" % self.spineCon, 1 )
        cmds.setAttr( "%s.operation" % self.spineCon, 0 )
        cmds.setAttr( "%s.colorIfFalseR" % self.spineCon, self.curveLength )
        cmds.connectAttr( "%s.arcLength" % self.spineCI, "%s.colorIfTrueR" % self.spineCon )
        cmds.connectAttr( "%s.autoVolume" % self.centerCTL, "%s.secondTerm" % self.spineCon )
        self.stretchMD01= cmds.createNode( "multiplyDivide", n="spine_stretchy_DIV_MD01" )
        self.spineNodesList.append( self.stretchMD01 )
        cmds.setAttr( "%s.operation" % self.stretchMD01, 2 )
        cmds.setAttr( "%s.input2X" % self.stretchMD01, self.curveLength )
        cmds.connectAttr( "%s.outColorR" % self.spineCon, "%s.input1X" % self.stretchMD01 )
        cmds.connectAttr( "%s.outputX" % self.globalScaleMD, "%s.colorIfFalseR" % self.spineCon )
        cmds.connectAttr( "%s.outputX" % self.globalScaleMD, "%s.input2X" % self.stretchMD01 )
        self.stretchMD02= cmds.createNode( "multiplyDivide", n="spine_stretchy_POW_MD01" )
        self.spineNodesList.append( self.stretchMD02 )
        cmds.setAttr( "%s.operation" % self.stretchMD02, 3 )
        cmds.connectAttr( "%s.outputX" % self.stretchMD01, "%s.input1X" % self.stretchMD02 )
        cmds.connectAttr( "%s.outputX" % self.stretchMD01, "%s.input1Y" % self.stretchMD02 )
        cmds.connectAttr( "%s.outputX" % self.stretchMD01, "%s.input1Z" % self.stretchMD02 )
        self.stretchMD03= cmds.createNode( "multiplyDivide", n="spine_stretchy_DIV_MD02" )
        self.spineNodesList.append( self.stretchMD03 )
        cmds.setAttr( "%s.operation" % self.stretchMD03, 2 )
        cmds.setAttr( "%s.input1X" % self.stretchMD03, 1 )
        cmds.setAttr( "%s.input1Y" % self.stretchMD03, 1 )
        cmds.setAttr( "%s.input1Z" % self.stretchMD03, 1 )
        cmds.connectAttr( "%s.output" % self.stretchMD02, "%s.input2" % self.stretchMD03 )
        cmds.connectAttr( "%s.outputX" % self.stretchMD03, "%s.sx" % self.jntGrpList[0] )
        cmds.connectAttr( "%s.outputX" % self.stretchMD03, "%s.sz" % self.jntGrpList[0] )
        cmds.connectAttr( "%s.outputY" % self.stretchMD03, "%s.sx" % self.jntGrpList[1] )
        cmds.connectAttr( "%s.outputY" % self.stretchMD03, "%s.sz" % self.jntGrpList[1] )
        cmds.connectAttr( "%s.outputZ" % self.stretchMD03, "%s.sx" % self.jntGrpList[2] )
        cmds.connectAttr( "%s.outputZ" % self.stretchMD03, "%s.sz" % self.jntGrpList[2] )
        self.stretchMD04= cmds.createNode( "multiplyDivide", n="spine_stretchy_MUL_MD01" )
        cmds.setAttr( "%s.operation" % self.stretchMD04, 1 )
        cmds.setAttr( "%s.input2X" % self.stretchMD04, 0.5 )
        cmds.setAttr( "%s.input2Y" % self.stretchMD04, 1.5 )
        cmds.setAttr( "%s.input2Z" % self.stretchMD04, 0.5 )
        cmds.connectAttr( "%s.stretchVolume" % self.centerCTL, "%s.input1X" % self.stretchMD04  )
        cmds.connectAttr( "%s.stretchVolume" % self.centerCTL, "%s.input1Y" % self.stretchMD04  )
        cmds.connectAttr( "%s.stretchVolume" % self.centerCTL, "%s.input1Z" % self.stretchMD04  )
        cmds.connectAttr( "%s.outputX" % self.stretchMD04, "%s.input2X" % self.stretchMD02 )
        cmds.connectAttr( "%s.outputY" % self.stretchMD04, "%s.input2Y" % self.stretchMD02 )
        cmds.connectAttr( "%s.outputZ" % self.stretchMD04, "%s.input2Z" % self.stretchMD02 )
        
        # relocate joint groups
        cmds.setAttr( "%s.uValue" % self.MPList[0], 0 )
        cmds.setAttr( "%s.uValue" % self.MPList[1], 0.5 )
        cmds.setAttr( "%s.uValue" % self.MPList[2], 1 )
        
        # skin spine curve
        cmds.skinCluster( self.drvJntList[0], self.drvJntList[1], self.drvJntList[2], self.spineCrv, mi=2, dr=2, n= "%sShape_skinCluster" % self.spineCrv )
        
        # Lock All Controller Group
        for each in allCTLGRP:
            cmds.setAttr( "%s.tx" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.ty" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.tz" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.rx" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.ry" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.rz" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.sx" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.sy" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.sz" % each, e=1, l=1, k=0, cb=1 )
            cmds.setAttr( "%s.v" % each, e=1, l=1, k=0, cb=1 )
        cmds.select( cl=1 ) 
        
if __name__ == "__main__":
    M= mpSpineSetup_Cl( "pelvis_Jnt01", "spine_Jnt01", "chest_Jnt01" )
