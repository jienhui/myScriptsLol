global proc shelf_Custom () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "source \"N:/openPipeline/openPipeline.mel\";\n\nopenPipeline;" 
        -enableBackground 0
        -align "center" 
        -label "source \"N:/openPipeline/openPipeline.mel\";\n\nopenPipeline;" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "N:/openPipeline/openPipeline/OPICON.bmp" 
        -image1 "N:/openPipeline/openPipeline/OPICON.bmp" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"N:/openPipeline/openPipeline.mel\";\n\nopenPipeline;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit the references for the current scene" 
        -enableBackground 0
        -align "center" 
        -label "Reference Editor" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "RE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconFile.png" 
        -image1 "menuIconFile.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ReferenceEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Display and edit connections in shading networks" 
        -enableBackground 0
        -align "center" 
        -label "Hypershade" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Hshd" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "HypershadeWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "List the objects in the scene" 
        -enableBackground 0
        -align "center" 
        -label "Outliner" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Outl" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "OutlinerWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Click to place joint. Click on existing joint to add to skeleton. Click-Drag to position joint." 
        -enableBackground 0
        -align "center" 
        -label "Joint Tool" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "kinJoint.png" 
        -image1 "kinJoint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "JointTool" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "create Joint On Curve" 
        -enableBackground 0
        -align "center" 
        -label "create Joint On Curve" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "CJOC" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Copyright (C) 2006 Ozgur Yilmaz\n// \n// createJointOnCurve v0.2.0\n// \n// ----------------------------------------------------------------------------------\n// Description:\n// \n// creates joints on selected curve\n//\n// Usage:\n//\n// Select one curve run the script, fill the fields, hit create joints...\n// \n// ----------------------------------------------------------------------------------\n//\n// version track:\n// -----------------\n// \n// v0.2.0\n// - added joint nameing support (prefix and subfix)\n// - added curve direction reversing\n// - create joint button position changed\n// - the frameLayout has been removed\n//\n// v0.1.1\n// - added checking for selected objects\n//\n// v0.1.0\n// - added \"align to world\" check box to align the joint to world not to eachother\n//\n// v0.0.1\n// - initial version\n\n\nglobal proc CJOC_getValues(){\n\t\n\tint $numberOfJoints;\n\tint $orientation;\n\tint $secondAxis;\n\tint $alignToWorld;\n\tint $reverseDir;\n\t\n\tint $jointName;\n\tstring $jointNameString = \"\";\n\n\tint $subFix;\n\tstring $subFixString = \"\";\n\t\n\t//-------------------------------------------------\n\t\n\t\n\t$numberOfJoints = `intFieldGrp -q -v1 CJOC_intFieldGrp`;\n\t$orientation = `optionMenuGrp -q -sl CJOC_autoJointOrient`;\n\t$secondAxis = `optionMenuGrp -q -sl CJOC_secondAxisOrient`;\n\t$alignToWorld = `checkBoxGrp -q -v1 CJOC_checkBoxGrp1`;\n\t$reverseDir = `checkBoxGrp -q -v1 CJOC_checkBoxGrp2`;\n\t\n\t$jointName = `checkBoxGrp -q -v1 CJOC_jointNamesCheckBoxGrp`;\n\tif ($jointName) $jointNameString = `textField -q -tx CJOC_jointNamesTextField`;\n\n\t$subFix = `checkBoxGrp -q -v1 CJOC_subfixCheckBoxGrp`;\n\tif ($subFix) $subFixString = `textField -q -tx CJOC_subfixTextField`;\n\t\n\tCJOC_doCreateJoints ( $numberOfJoints , $orientation , $secondAxis , $alignToWorld , $reverseDir , $jointNameString , $subFixString );\n\t\n}\n\n\n\nglobal proc CJOC_doCreateJoints(int $jointCnt , int $orientation , int $secondAxis , int $alignToWorld , int $reverseDir , string $jointName , string $subFix){\n\t\n\t//------------------------------------------------------------------\n\t// Declerations\n\t//------------------------------------------------------------------\n\tstring $selList[];\n\tstring $curve;\n\tstring $curveShape;\n\t\t\n\tstring $joint[];\n\t\n\tstring $aimConstraint[];\n\t\n\tstring $motionPath1;\n\t\n\tstring $temp1[];\n\t\n\tint $i;\n\t\n\tfloat $worldPos1[];\n\t\t\n\tfloat $uValue;\n\t\n\tfloat $aimVector[];\n\tfloat $upVector[];\n\tfloat $worldUpVector[];\n\t\n\t//------------------------------------------------------------------\n\t\n\t$selList = `ls -sl`;\n\tif ( size($selList) < 1){\n\t\terror \"Please select one curve\";\n\t}\n\t\n\t$curve = $selList[0];\n\t\n\t$temp1 = `listRelatives -s $curve`;\n\t$curveShape = $temp1[0];\n\t\n\t\n\tif (!`objectType -i \"nurbsCurve\" $curveShape`) error \"Please select one curve\";\n\tif ($curveShape == \"\") error \"Please select one curve\";\n\tif (`objectType -i \"joint\" $curve`) error \"Please select one curve\";\t\n\t\n\t\n\tif ($jointName == \"\" ) $jointName = \"joint\";\n\t\n\t$motionPath1 = `createNode motionPath -n \"CJOC_motionPath1\"`;\n\t\n\tconnectAttr ($curveShape+\".worldSpace[0]\") ($motionPath1+\".geometryPath\");\n\t\n\tsetAttr ($motionPath1+\".fractionMode\") 1;\n\t\n\t//--------------------------------------------------\n\tswitch($orientation){\n\t\tcase 1: // xyz\n\t\t\t$aimVector[0] = 1;\n\t\t\t$aimVector[1] = 0;\n\t\t\t$aimVector[2] = 0;\n\t\t\t\n\t\t\t$worldUpVector[0] = 0;\n\t\t\t$worldUpVector[1] = 1;\n\t\t\t$worldUpVector[2] = 0;\n\t\t\tbreak;\n\t\t\tprint \"orientation : xyz\\n\";\t\t\n\t\tcase 4: // xzy\n\t\t\t$aimVector[0] = 1;\n\t\t\t$aimVector[1] = 0;\n\t\t\t$aimVector[2] = 0;\n\t\t\t\n\t\t\t$worldUpVector[0] = 0;\n\t\t\t$worldUpVector[1] = 0;\n\t\t\t$worldUpVector[2] = 1;\n\t\t\tbreak;\n\t\t\tprint \"orientation : xzy\\n\";\n\t\tcase 2: // yzx\n\t\t\t$aimVector[0] = 0;\n\t\t\t$aimVector[1] = 1;\n\t\t\t$aimVector[2] = 0;\n\t\t\t\n\t\t\t$worldUpVector[0] = 0;\n\t\t\t$worldUpVector[1] = 0;\n\t\t\t$worldUpVector[2] = 1;\n\t\t\tprint \"orientation : yzx\\n\";\n\t\t\tbreak;\n\n\t\tcase 5: // yxz\n\t\t\t$aimVector[0] = 0;\n\t\t\t$aimVector[1] = 1;\n\t\t\t$aimVector[2] = 0;\n\t\t\t\n\t\t\t$worldUpVector[0] = 1;\n\t\t\t$worldUpVector[1] = 0;\n\t\t\t$worldUpVector[2] = 0;\n\t\t\tprint \"orientation : yxz\\n\";\n\t\t\tbreak;\t\t\t\n\t\tcase 3: // zxy\n\t\t\t$aimVector[0] = 0;\n\t\t\t$aimVector[1] = 0;\n\t\t\t$aimVector[2] = 1;\n\n\t\t\t$worldUpVector[0] = 1;\n\t\t\t$worldUpVector[1] = 0;\n\t\t\t$worldUpVector[2] = 0;\n\t\t\tprint \"orientation : zxy\\n\";\n\t\t\tbreak;\t\t\t\n\t\tcase 6: // zyx\n\t\t\t$aimVector[0] = 0;\n\t\t\t$aimVector[1] = 0;\n\t\t\t$aimVector[2] = 1;\n\n\t\t\t$worldUpVector[0] = 0;\n\t\t\t$worldUpVector[1] = 1;\n\t\t\t$worldUpVector[2] = 0;\n\t\t\tprint \"orientation : zyx\\n\";\n\t\t\tbreak;\n\t}\n\n\t//--------------------------------------------------\n\tswitch($secondAxis){\n\t\tcase 1: // +x\n\t\t\t$upVector[0] = 1;\n\t\t\t$upVector[1] = 0;\n\t\t\t$upVector[2] = 0;\n\t\t\tprint \"second Axis : +x\\n\";\n\t\t\tbreak;\n\t\t\t\n\t\tcase 2: // -x\n\t\t\t$upVector[0] = -1;\n\t\t\t$upVector[1] = 0;\n\t\t\t$upVector[2] = 0;\n\t\t\tprint \"second Axis : -x\\n\";\n\t\t\tbreak;\n\t\t\t\n\t\tcase 3: // +y\n\t\t\t$upVector[0] = 0;\n\t\t\t$upVector[1] = 1;\n\t\t\t$upVector[2] = 0;\n\t\t\tprint \"second Axis : +y\\n\";\n\t\t\tbreak;\n\t\t\t\n\t\tcase 4: // -y\n\t\t\t$upVector[0] = 0;\n\t\t\t$upVector[1] = -1;\n\t\t\t$upVector[2] = 0;\n\t\t\tprint \"second Axis : -y\\n\";\n\t\t\tbreak;\n\t\t\t\n\t\tcase 5: // +z\n\t\t\t$upVector[0] = 0;\n\t\t\t$upVector[1] = 0;\n\t\t\t$upVector[2] = 1;\n\t\t\tprint \"second Axis : +z\\n\";\n\t\t\tbreak;\n\t\t\t\n\t\tcase 5: // -z\n\t\t\t$upVector[0] = 0;\n\t\t\t$upVector[1] = 0;\n\t\t\t$upVector[2] = -1;\n\t\t\tprint \"second Axis : -z\\n\";\n\t\t\tbreak;\n\t\t\t\n\t\tdefault:\n\t\t\t$upVector[0] = -1;\n\t\t\t$upVector[1] = 0;\n\t\t\t$upVector[2] = 0;\n\t\t\tbreak;\n\t}\n\t\n\t\n\t\n\tfor ($i = 0 ; $i < $jointCnt ; $i++){\n\t\t\n\t\t$uValue = (1.0*(float)$i/((float)$jointCnt-1.0));\n\n\t\tif ($reverseDir){\n\t\t\t$uValue = 1.0 - $uValue;\n\t\t}\n\t\t\n\t\tsetAttr ($motionPath1+\".uValue\") $uValue;\n\n\t\t$worldPos1[0] = `getAttr ($motionPath1+\".xCoordinate\")`;\n\t\t$worldPos1[1] = `getAttr ($motionPath1+\".yCoordinate\")`;\n\t\t$worldPos1[2] = `getAttr ($motionPath1+\".zCoordinate\")`;\n\t\t\t\t\t\t\n\t\t$joint[$i] = `createNode \"joint\" -n ($jointName+\"1\")`;\n\t\tsetAttr ($joint[$i]+\".t\") $worldPos1[0] $worldPos1[1] $worldPos1[2];\n\t\tsetAttr ($joint[$i]+\".rotateOrder\") ($orientation-1);\n\t}\n\t\n\t\n\t\n\t\n\tif ($subFix != \"\"){\n\t\tfor ($i = 0 ; $i < $jointCnt ; $i++){\n\t\t\t$joint[$i] = `rename $joint[$i] ($joint[$i]+$subFix)`;\n\t\t}\n\t}\n\n\t\n\t\n\t\n\tfor ($i = 0 ; $i < $jointCnt-1 ; $i++){\n\t\t\n\t\tif (!$alignToWorld){\n\t\t\t\n\t\t\t$aimConstraint = `aimConstraint\n\t\t\t\t\t\t\t\t\t\t\t\t-wut \"vector\"\n\t\t\t\t\t\t\t\t\t\t\t\t-aim $aimVector[0] $aimVector[1] $aimVector[2]\n\t\t\t\t\t\t\t\t\t\t\t\t-wu $upVector[0] $upVector[1] $upVector[2]\n\t\t\t\t\t\t\t\t\t\t\t\t-u $worldUpVector[0] $worldUpVector[1] $worldUpVector[2]\n\t\t\t\t\t\t\t\t\t\t\t\t$joint[$i+1] $joint[$i]`;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tdelete $aimConstraint;\n\t\t\t\n\t\t}\n\t\n\t\tparent -a $joint[$i+1] $joint[$i];\n\n\t}\n\t\n\tmakeIdentity -apply true -t 0 -r 0 -s 0 -n 0 -jointOrient $joint[$jointCnt-1];\n\t\n\t\n\t\n\tdelete $motionPath1;\t\n\t\n\tselect $joint[0];\n\tmakeIdentity -apply true -t 0 -r 1 -s 0 -n 0;\n\t\n}\n\n\n\n\nglobal proc createJointOnCurve(){\n\t\n\tstring $buttonCommand;\n\t\n\tint $windowWidth = 243;\n\tint $windowHeight = 209;\n\t\n\tif (`window -q -ex CJOC_Window`){\n\t\tdeleteUI -wnd CJOC_Window;\n\t}\n\t\n\twindow -w $windowWidth -h $windowHeight -t \"joint on curve v0.2.0\" CJOC_Window;\n\t\t\n\t\tcolumnLayout -adj true CJOC_jointTool;\n\t\t\tcolumnLayout CJOC_jointOptions;\n\t\t\t\t\n\t\t\t\tintFieldGrp -l \"Number of joints\" -v1 2 -cw2 159 45 -cl2 \"right\" \"left\" CJOC_intFieldGrp;\n\t\t\t\t\n\t\t\t\toptionMenuGrp -l \"Orientation\" -cl2 \"right\" \"left\" -cw 1 160 -annotation \"The first letter indicates the axis to point down the bone. The second letter aligns with the second world axis orientation.\" CJOC_autoJointOrient;\n\t\t\t\t\tmenuItem -l \"xyz\" CJOC_ajoXYZ;\n\t\t\t\t\tmenuItem -l \"yzx\" CJOC_ajoYZX;\n\t\t\t\t\tmenuItem -l \"zxy\" CJOC_ajoZXY;\n\t\t\t\t\tmenuItem -l \"xzy\" CJOC_ajoXZY;\n\t\t\t\t\tmenuItem -l \"yxz\" CJOC_ajoYXZ;\n\t\t\t\t\tmenuItem -l \"zyx\" CJOC_ajoZYX;\n\n\t\t\t\toptionMenuGrp -cw2 160 70 -l \"Second Axis World Orientation\" -cw 1 160 -cl2 \"right\" \"left\" -annotation \"Specify the world axis alignment for the second axis.\" CJOC_secondAxisOrient;\n\t\t\t\t\tmenuItem -l \" +x\" CJOC_saoX;\n\t\t\t\t\tmenuItem -l \" -x\" CJOC_saoNegX;\n\t\t\t\t\tmenuItem -l \" +y\" CJOC_saoY;\n\t\t\t\t\tmenuItem -l \" -y\" CJOC_saoNegY;\n\t\t\t\t\tmenuItem -l \" +z\" CJOC_saoZ;\n\t\t\t\t\tmenuItem -l \" -z\" CJOC_saoNegZ;\n\t\t\t\t\tmenuItem -l \"none\" CJOC_saoNone;\n\t\t\t\t\n\t\t\t\tcheckBoxGrp -l \"Align to world\" -cw2 158 57 -cl2 \"right\" \"left\" -v1 0 CJOC_checkBoxGrp1; \n\t\t\t\tcheckBoxGrp -l \"Reverse curve\" -cw2 158 57 -cl2 \"right\" \"left\" -v1 0 CJOC_checkBoxGrp2; \n\t\t\t\t\n\t\t\t\trowLayout -nc 2 -cw2 130 100 -ct2 \"left\" \"left\" CJOC_jointNamesRowLayout;\n\t\t\t\t\tcheckBoxGrp -l \"Joint Names\" -cw2 105 16 -cl2 \"right\" \"left\" -v1 0\n\t\t\t\t\t\t\t\t\t\t\t-onc \"textField -e -en 1 CJOC_jointNamesTextField;\"\n\t\t\t\t\t\t\t\t\t\t\t-ofc \"textField -e -en 0 CJOC_jointNamesTextField;\"\n\t\t\t\t\t\t\t\t\t\t\tCJOC_jointNamesCheckBoxGrp;\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\ttextField -en 0 -tx \"joint\" -w 100 CJOC_jointNamesTextField;\n\t\t\t\t\t\n\t\t\t\tsetParent..;\n\n\t\t\t\trowLayout -nc 2 -cw2 130 100 -ct2 \"left\" \"left\" CJOC_subfixRowLayout;\n\t\t\t\t\tcheckBoxGrp -l \"Subfix Joint Names\" -cw2 105 16 -cl2 \"right\" \"left\" -v1 0\n\t\t\t\t\t\t\t\t\t\t\t-onc \"textField -e -en 1 CJOC_subfixTextField;\"\n\t\t\t\t\t\t\t\t\t\t\t-ofc \"textField -e -en 0 CJOC_subfixTextField;\"\n\t\t\t\t\t\t\t\t\t\t\tCJOC_subfixCheckBoxGrp;\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\ttextField -en 0 -tx \"_subfix\" -w 100 CJOC_subfixTextField;\n\t\t\t\t\t\n\t\t\t\tsetParent..;\n\n\t\t\t\t\n\t\t\t\trowLayout -nc 1 -cw1 ($windowWidth-15) -ct1 \"right\" CJOC_createJointsRowLayout;\n\t\t\t\t\tbutton -l \"Create Joints\" CJOC_button1;\n\t\t\t\tsetParent..;\n\t\t\t\t\n\t\tsetParent ..; // jointFrame\n\t\n\toptionMenuGrp -e -sl 1 CJOC_autoJointOrient;\n\t\n\t\n\t\n\t$buttonCommand = \" CJOC_getValues; \";\n\t\n\t\n\tbutton -e -c $buttonCommand CJOC_button1;\n\t\n\t\n\tshowWindow CJOC_Window;\n\twindow -e -w $windowWidth -h $windowHeight CJOC_Window;\n\t\n}\ncreateJointOnCurve;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create IK spline handle on joint chain" 
        -enableBackground 0
        -align "center" 
        -label "IK Spline Handle Tool" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "kinSplineHandle.png" 
        -image1 "kinSplineHandle.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "IKSplineHandleTool" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "IK handle tool options" 
        -enableBackground 0
        -align "center" 
        -label "handleDialogItem" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "kinHandle.png" 
        -image1 "kinHandle.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "IKHandleToolOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "SkinAs" 
        -enableBackground 0
        -align "center" 
        -label "SkinAs" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "SkinAs" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "/*  This file downloaded from Highend3d.com\n''  \n''  Highend3d.com File Information:\n''  \n''    Script Name: SkinAs v1.0\n''    Author: Christophe Petit\n''    Last Updated: May 27, 2003\n''    Update/Change this file at:\n''    http://www.highend3d.com/maya/mel/?section=animation#2305\n''  \n''  History:\n''    SkinAs v0.0 on May 19, 2003 by Christophe Petit\n''  \n''  Please do not alter any information above this line\n''  it is generated dynamically by Highend3d.com and will\n''  be changed automatically on any updates.\n*/\n\n\n\n/*//////////////////////////////////////////////////////////////////\n// MODIFY THIS AT YOUR OWN RISK\n//\n// Creation Date:  04/05/03\n//\n// Author:      Christophe Petit\n//\n//\n//  Procedure Name:\n//\n//      skinAs.mel v.1.1\n//\n//  Description:\n//      allow you to skin a geometry as an other (support influence objects)\n//\tit skins the 1rst geometry on the same skeleton as the second with same influence Objects.\n//\n//\tusefull to reskin a geometry with more split or high res model, or change the position of joints without detach Skin....etc\n//\n//\t0.copy this script in your script directory. \n//\t1.select the geometry to skin.\n//\t2.select the geometry used as referenc skinning.\n// \t3.type : skinAs\n//\n//\tP.S.:\n//\t\tThx to Nicolas Combecave \n//\t\tfor debugging \"skinCluster history\" \n////////////////////////////////////////////////////////////////////\t\n*/\nglobal proc skinAs()\n{\n\tstring $sel[] = `ls -sl`;\n\tif (size ($sel)>2)\n\t\terror (\"select ONE Source and ONE Destination\");\n\n\tstring $tmp[] = `listRelatives -s -ad -ni $sel[0]`;\n\tstring $dest = $tmp[0];\n\t$tmp = `listRelatives -s -ad -ni $sel[1]`;\n\tstring $source = $tmp[0];\n\n//\tApparemment ne retourne pas les skinClusters !\n//\t$tmp = `listConnections -c true $source`;\n//\tListHistory semble lui retourner les skinClusters...\n\n\tstring $skinClstr = `findRelatedSkinCluster $tmp[0]`;\n\n\tif ($skinClstr != \"\") \n\t{\n\t\t$skinClusterName = $skinClstr;\n\t\tstring $InfList[] = `skinCluster -q -inf $skinClusterName`;\n\t\tstring $joints[] = `ls -typ \"joint\" $InfList`;\n\t\tstring $transforms[] = `ls -typ \"transform\" $InfList`;\n\t\t$transforms = stringArrayRemove ($joints,$transforms);\n\t\tstring $name[] = `skinCluster -dr 4.5 -mi 3 -ibp -tsb -n ($dest + \"_skinCluster\") $joints $dest`;\n\t\tstring $skinClusterAttr[] = `listAttr -k $skinClusterName`;\n\t\t$skinClusterAttr = stringArrayRemove ({\"weightList.weights\"},$skinClusterAttr);\n\t\tfor ($attr in $skinClusterAttr)\n\t\t{\n\t\t\tsetAttr ($name[0] + \".\" + $attr) (`getAttr ($skinClusterName + \".\" + $attr)`);\n\t\t}\n\n\t\tfor ($obj in $transforms)\n\t\t{\n\t\t\tstring $shape[] = `listRelatives -s $obj`;\n\t\t\tstring $geometry[] =`ls -ni -typ \"nurbsSurface\" -typ \"mesh\" -typ \"nurbsCurve\" $shape`;\n\t\t\tif(size($geometry)!=0)\n\t\t\t{\n\t\t\t\tskinCluster -e -ug -dr 4.5 -ai $obj $name[0];\n\t\t\t}else{ \n\t\t\t\tskinCluster -e -dr 4.5 -ai $obj $name[0];\n\t\t\t}\n\t\t}\n\n\t\tcopySkinWeights -ss $skinClusterName -ds $name[0] -noMirror;\n\t\t\n\n\t}else{\n\t\twarning (\"I can't do the Job...Sorry  :) \");\n\t}\n\t\n}\n\nskinAs()" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "abSymMesh" 
        -enableBackground 0
        -align "center" 
        -label "abSymMesh" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "abSymMesh" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "/*\nabSymMesh v 1.91\nbrendan ross 03.10.2004\nwww.supercrumbly.com\n\nupdate -- 09.20.2004: \"Select Moved Verts\" button will select vertices that have been moved relative to the base mesh.\nupdate -- 3.21.2005: Added progress bar for \"Select Moved Verts\".  I love progress bars.\nupdate -- 10.12.2006: Added popupMenu to \"Revert Selected to Base\" button to revert by a given percentage.  Added $abSymProgBarThresh to adjust the number of verts included in an operation before a progress bar will be displayed (adjust higher for faster computers).\nupdate -- 10.25.2006: Added a slider to dynamically revert selected verts to base object.  The slider only works on vertex selections, not on the object level (too slow).  You can now specify alternate versions of the base mesh to revert to as well.  Improved performance of revert.\nupdate -- 12.04.2006: It should now work in Maya 8.\nupdate -- 4.12.2008: Added operations menu.  Allows you to copy, add and subtract blendshapes from one another.\nupdate -- 1.29.2009: Added limited ability to establish symmetry.\nupdate -- 9.19.2013: Added \"Attempt To Restore Symmetry\" to (new) \"Tools\" menu.\nupdate -- v. 1.91 datae: 10.28.2013: Added float field to the revert slider.  Fixed issue with duplicate menu name preventing script from loading. \n\nuse:\n\nA useful little script for building symmetrical and asymmetrical blendshapes.  Check for symmetry, mirror\nand flip polygon geometry, and much more.\n\n(ok, not much more, but it is pretty useful)\n\ndirections:\n\nIt should be fairly self explanatory, but here goes.\n\nSelect a mesh and click \"Check Symmetry\" to highlight asymmetric vertices.  \n\nTo use the selection mirror, mirror selected, flip, and revert functions, you must first select a symmetrical mesh\nand click \"Select Base Geometry.\"  You can now select a duplicate mesh with the same structure,  and you should be\nable to use all of the functions on it.  Revert, mirror, and flip work on both vertex (component) and object selections.\n\nUncheck \"Use Pivot as Origin\" to evaluate your objects using the mirror axis world origin as \nyour axis of symmetry.  \n\nThat's it.  I hope you find it useful.\n*/\n\nglobal int $abSymProgBarThresh = 800; //number of verts in an operation beyond which a progress bar is shown (set higher for faster computers)\nglobal int $abSymTable[];\n\nglobal string $abSymRevVertTable[];\nglobal vector $abSymRevPosTable[];\nglobal vector $abSymRevBasePosTable[];\nglobal int $abSymSliderDragging = false; //used to flag when the mouse is dragging a slider\n\nglobal proc string[] abCheckSym(string $obj, int $axis, float $tol, int $bTable, int $usePiv) {\n\t//$bTable is bool to use $obj to create and populate $abSymTable\n\t//which goes a little like {obj.vtx[pos mAxis 1], obj.vtx[neg mAxis 1]}\n\t\t\n\tglobal int $abSymTable[];\n\tstring $aNegVerts[];\n\tstring $aPosVerts[];\n\tstring $aNonSymVerts[];\n\tstring $aStr[];\n\tstring $vtx;\n\tstring $str;\n\tint $aPosVertsInt[];\n\tint $aNegVertsInt[];\n\tint $aInt[];\n\tint $totVtx;\n\tint $i;\n\tint $j;\n\tint $mAxisInd = $axis - 1; //mirror axis index (for xform)\n\tint $axis2Ind = ($mAxisInd + 1) % 3;\n\tint $axis3Ind = ($mAxisInd + 2) % 3;\n\tint $mod;\n\tint $prog;\n\tint $vertCounter = 0;\n\tfloat $aNegVertTrans[];\n\tfloat $aPosVertTrans[];\n\tfloat $aVtxTrans[];\n\tfloat $aVtx2Trans[];\n\tfloat $bBox[];\n\tfloat $mid;\n\tfloat $midOffset;\n\tfloat $posOffset;\n\tfloat $negOffset;\n\tfloat $flt;\n\tfloat $progNum;\n\tfloat $progDenom;\n\tfloat $test1;\n\tfloat $test2;\n\t\n\tfloat $midOffsetTol = -.0000001;\n\t\n\tif ($usePiv){\n\t\t$aVtxTrans = `xform -q -ws -t $obj`;\n\t\t$mid = $aVtxTrans[$mAxisInd];\n\t}else{\n\t\tif ($bTable){\n\t\t\t$bBox = `xform -q -ws -boundingBox $obj`;\n\t\t\t$mid = $bBox[$mAxisInd] + (($bBox[($mAxisInd+3)] - $bBox[$mAxisInd])/2);\n\t\t}else{\n\t\t\t$mid = 0; //if object isn't symmetrical, it's got to be at the origin to measure symmetry\n\t\t}\n\t}\n\t\n\tif ($bTable) clear($abSymTable);\n\t\t\n\t$aInt = `polyEvaluate -v $obj`; \n\t$totVtx = $aInt[0];\n\t\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Sorting\";\n\t$progDenom = $totVtx;\n\t$flt = ceil($progDenom/50);\n\t$mod = $flt;\n\n\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$vtx = $obj+\".vtx[\"+$i+\"]\";\n\t\t$aVtxTrans = `xform -q -ws -translation $vtx`;\n\t\t$midOffset = $aVtxTrans[$mAxisInd] - $mid;\n\t\tif ($midOffset >= $midOffsetTol){\n\t\t\t$aPosVerts[size($aPosVerts)] = $vtx;\n\t\t\tif ($bTable){$aPosVertsInt[size($aPosVertsInt)] = $i;}\n\t\t\t$aPosVertTrans[size($aPosVertTrans)] = $aVtxTrans[$mAxisInd];\n\t\t}else{\n\t\t\tif ($midOffset < $midOffsetTol){\n\t\t\t\t$aNegVerts[size($aNegVerts)] = $vtx;\n\t\t\t\tif ($bTable){$aNegVertsInt[size($aNegVertsInt)] = $i;}\n\t\t\t\t$aNegVertTrans[size($aNegVertTrans)] = $aVtxTrans[$mAxisInd];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif ($bTable){$str = \"Building Symmetry Table\";}else{$str = \"Checking For Symmetry\";}\n\tprogressWindow -e -progress 0 -status $str;\n\t$progDenom = size($aPosVerts);\n\t$flt = ceil($progDenom/50);\n\t$mod = $flt;\n\t\n\t//now find nonsymverts\n\tfor ($i=0;$i<size($aPosVerts);$i++){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$vtx = $aPosVerts[$i];\n\t\t$posOffset = ($aPosVertTrans[$i] - $mid);\n\t\tif ($posOffset < $tol){\n\t\t\t$aPosVerts[$i] = \"m\";\n\t\t\t$vertCounter ++;\n\t\t\tcontinue;\n\t\t}\n\t\tfor ($j=0;$j<size($aNegVerts);$j++){\n\t\t\tif ($aNegVerts[$j] == \"m\") continue;\n\t\t\t$negOffset = $mid - $aNegVertTrans[$j];\n\t\t\tif ($negOffset < $tol){\n\t\t\t\t$aNegVerts[$j] = \"m\";\n\t\t\t\t$vertCounter ++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (abs($posOffset - $negOffset) <= $tol){\n\t\t\t\t$aVtxTrans = `xform -q -ws -t $vtx`;\n\t\t\t\t$aVtx2Trans = `xform -q -ws -t $aNegVerts[$j]`;\n\t\t\t\t$test1 = $aVtxTrans[$axis2Ind] - $aVtx2Trans[$axis2Ind];\n\t\t\t\t$test2 = $aVtxTrans[$axis3Ind] - $aVtx2Trans[$axis3Ind];\n\t\t\t\tif (abs($test1) < $tol && abs($test2) < $tol){\n\t\t\t\t\t//match\n\t\t\t\t\tif ($bTable){\n\t\t\t\t\t\t//use this info to build symmetry table\n\t\t\t\t\t\t$abSymTable[size($abSymTable)] = $aPosVertsInt[$i];\n\t\t\t\t\t\t$abSymTable[size($abSymTable)] = $aNegVertsInt[$j];\n\t\t\t\t\t\t$vertCounter += 2;\n\t\t\t\t\t}\n\t\t\t\t\t$aPosVerts[$i] = $aNegVerts[$j] = \"m\"; //m is for match\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//now strip out \"m\" from $aPosVerts and $aNegVerts, and we'll have asymmetry\n\t$aStr = {\"m\"};\n\t$aPosVerts = stringArrayRemove($aStr, $aPosVerts);\n\t$aNegVerts = stringArrayRemove($aStr, $aNegVerts);\n\t$aNonSymVerts = stringArrayCatenate($aPosVerts, $aNegVerts);\n\t\n\tif ($bTable){\n\t\t$int = size($abSymTable) + $vertCounter;\n\t\tif ($vertCounter != $totVtx){\n\t\t\t//object is not symmetrical\n\t\t\twarning \"Base geometry is not symmetrical, not all vertices can be mirrored\";\n\t\t}else{\n\t\t\tprint \"Base geometry is symmetrical\";\n\t\t}\n\t}\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\treturn $aNonSymVerts;\n}\n\n\nglobal proc int abGetSymVtx(int $vtxInt){\n\t//uses abSymTable, returns symmetrical vtx or -1 if failed\n\tglobal int $abSymTable[];\n\tint $mVtxInt = -1;\n\tint $i;\n\t\n\tfor ($i=0;$i<size($abSymTable);$i++){\n\t\tif ($vtxInt == $abSymTable[$i]){\n\t\t\t//match\n\t\t\tif (($i % 2) == 0){\n\t\t\t\t//even number, match is record above (it's a positive vert)\n\t\t\t\t$mVtxInt = $abSymTable[$i+1];\n\t\t\t}else{\n\t\t\t\t$mVtxInt = $abSymTable[$i-1];\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $mVtxInt;\n}\n\n\nglobal proc abMirrorSel(string $obj, string $baseObj, string $aSelVerts[], int $axis, int $negToPos, int $flip, int $usePiv, float $tol){\n\t//$axis is 1, 2, 3 -- $negToPos is bool -- true mirrors negative (axis) to positive (axis)\n\t//$flip is bool -- if true, selVerts are flipped instead of mirrored\n\t//$usePiv is bool to use pivot on $obj as origin\n\tglobal int $abSymTable[];\n\tglobal int $abSymProgBarThresh;\n\t\n\tstring $aStr[];\n\tstring $str;\n\tstring $vtx;\n\tstring $obj;\n\tint $aPosVertsInt[];\n\tint $aNegVertsInt[];\n\tint $aZeroVertsInt[];\n\tint $mAxisInd = $axis - 1; //mirror axis index (for xform)\n\tint $axis2Ind = ($mAxisInd + 1) % 3;\n\tint $axis3Ind = ($mAxisInd + 2) % 3;\n\tint $vertNum;\n\tint $i;\n\tint $j;\n\tint $prog;\n\tint $mod;\n\tint $showProg = false;  //don't show the progress bar\n\tfloat $bBox[];\n\tfloat $baseMid;\n\tfloat $baseMidOffset;\n\tfloat $aVtxTrans[];\n\tfloat $aFlpVtxTrans[];\n\tfloat $mid; //mirror axis midpoint\n\tfloat $progNum;\n\tfloat $progDenom;\n\tfloat $flt;\n\t\n\tif ($usePiv){\n\t\t$aVtxTrans = `xform -q -ws -t $obj`;\n\t\t$mid = $aVtxTrans[$mAxisInd];\n\t\t$aVtxTrans = `xform -q -ws -t $baseObj`;\n\t\t$baseMid = $aVtxTrans[$mAxisInd];\n\t}else{\n\t\t$mid = 0;\n\t\t$bBox = `xform -q -ws -boundingBox $baseObj`;\n\t\t$baseMid = $bBox[$mAxisInd] + (($bBox[($mAxisInd+3)] - $bBox[$mAxisInd])/2);\n\t}\n\t\n\twaitCursor -state on;\n\tif (size($aSelVerts) > $abSymProgBarThresh){ //show prog if more than this many verts being mirrored\n\t\t$showProg = true;\n\t\t$str = \"Mirroring Vertices\";\n\t\tif ($flip){$str = \"Flipping Vertices\";}\n\t\tprogressWindow -title \"Working\" -progress 0 -status $str;\n\t\t$progDenom = size($aSelVerts);\n\t\t$flt = ceil($progDenom/50);\n\t\t$mod = $flt;\n\t}\n\t\t\n\t//strip out Pos verts if $negToPos is true (and vice versa)\n\t//aposverts (and anegverts) are int arrays in this proc to simplify matching\n\t//get pos neg info from base mesh\n\tfor ($i=0;$i<size($aSelVerts);$i++){\n\t\t\n\t\t//prog win\n\t\tif ($showProg){\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*50.0;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$vtx = $aSelVerts[$i];\n\t\t//$aVtxTrans = `xform -q -ws -translation $vtx`;\n\t\t$vertNum = match(\"([0-9])+\", (match (\"([0-9])+\\\\]\", $vtx)));\n\t\t$aVtxTrans = `xform -q -ws -translation ($baseObj+\".vtx[\"+$vertNum+\"]\")`;\n\t\t$baseMidOffset = $aVtxTrans[$mAxisInd] - $baseMid;\n\t\tif (abs($baseMidOffset) < $tol){\n\t\t\t$aZeroVertsInt[size($aZeroVertsInt)] = $vertNum;\n\t\t\tcontinue;\n\t\t}\n\t\tif ($baseMidOffset > 0){\n\t\t\t$aPosVertsInt[size($aPosVertsInt)] = $vertNum;\n\t\t\tcontinue;\n\t\t}\n\t\tif ($baseMidOffset < 0){\n\t\t\t$aNegVertsInt[size($aNegVertsInt)] = $vertNum;\n\t\t\tcontinue;\n\t\t}\n\t}\n\t\n\tif ($negToPos){\n\t\t$aPosVertsInt = $aNegVertsInt;\n\t}\n\t\n\tif ($showProg){\n\t\t$progDenom = size($aPosVertsInt);\n\t\t$flt = ceil($progDenom/50);\n\t\t$mod = $flt;\n\t}\n\t\n\tfor ($i=0;$i<size($aPosVertsInt);$i++){\n\t\t\n\t\t//prog win\n\t\tif ($showProg){\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*50.0 + 50;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$vertNum = abGetSymVtx($aPosVertsInt[$i]);\n\t\tif ($vertNum != -1){\n\t\t\tif (!$flip){ //mirror selected\n\t\t\t\t$aVtxTrans = `xform -q -ws -t ($obj+\".vtx[\"+$aPosVertsInt[$i]+\"]\")`;\n\t\t\t\t$aVtxTrans[$mAxisInd] = 2*$mid - $aVtxTrans[$mAxisInd];\n\t\t\t\txform -ws -t $aVtxTrans[0] $aVtxTrans[1] $aVtxTrans[2] ($obj+\".vtx[\"+$vertNum+\"]\");\n\t\t\t}else{ //flip selected\n\t\t\t\t$aVtxTrans = `xform -q -ws -t ($obj+\".vtx[\"+$aPosVertsInt[$i]+\"]\")`;\n\t\t\t\t$aVtxTrans[$mAxisInd] = 2*$mid - $aVtxTrans[$mAxisInd];\n\t\t\t\t$aFlpVtxTrans = `xform -q -ws -t ($obj+\".vtx[\"+$vertNum+\"]\")`;\n\t\t\t\t$aFlpVtxTrans[$mAxisInd] = 2*$mid - $aFlpVtxTrans[$mAxisInd];\n\t\t\t\txform -ws -t $aVtxTrans[0] $aVtxTrans[1] $aVtxTrans[2] ($obj+\".vtx[\"+$vertNum+\"]\");\n\t\t\t\txform -ws -t $aFlpVtxTrans[0] $aFlpVtxTrans[1] $aFlpVtxTrans[2] ($obj+\".vtx[\"+$aPosVertsInt[$i]+\"]\");\n\t\t\t}\n\t\t}\n\t}\n\tfor ($i=0;$i<size($aZeroVertsInt);$i++){ //flip middle verts too\n\t\tif ($flip){\n\t\t\t$aVtxTrans = `xform -q -ws -t ($obj+\".vtx[\"+$aZeroVertsInt[$i]+\"]\")`;\n\t\t\t$aVtxTrans[$mAxisInd] = 2*$mid - $aVtxTrans[$mAxisInd];\n\t\t\txform -ws -t $aVtxTrans[0] $aVtxTrans[1] $aVtxTrans[2] ($obj+\".vtx[\"+$aZeroVertsInt[$i]+\"]\");\n\t\t}else{\n\t\t\t$aVtxTrans = `xform -q -ws -t ($obj+\".vtx[\"+$aZeroVertsInt[$i]+\"]\")`;\n\t\t\t$aVtxTrans[$mAxisInd] = $mid;\n\t\t\txform -ws -t $aVtxTrans[0] $aVtxTrans[1] $aVtxTrans[2] ($obj+\".vtx[\"+$aZeroVertsInt[$i]+\"]\");\n\t\t}\n\t}\n\tif ($showProg){progressWindow -endProgress;}\n\twaitCursor -state off;\n}\n\n\nglobal proc abRevertSel(string $aSelVerts[], string $obj, string $baseObj, float $bias){\n\t//reverts selected verts to base -os trans -- $bias is the percentage (0-1) to revert from current verts position to the base verts position, 100 taking on the base object's vert positions (original default behaviour) \n\tglobal int $abSymProgBarThresh;\n\t\t\n\tstring $str;\n\tstring $vtx;\n\tint $vertNum;\n\tint $i;\n\tint $prog;\n\tint $mod;\n\tint $showProg = false;  //don't show the progress bar\n\tfloat $aTrans[];\n\tfloat $progNum;\n\tfloat $progDenom;\n\tfloat $flt;\n\tfloat $tol = 0;\n\tvector $vTol = <<$tol, $tol, $tol>>;\n\tvector $vBaseTrans;\n\tvector $vObjTrans;\n\t\n\tif ($bias > 1){\n\t\t$bias = 1;\n\t}else if ($bias < 0){\n\t\t$bias = 0;\n\t}\n\t$bias = 1 - $bias;\n\tif ($bias < .01) $bias = 0;\n\t\n\tif (size($aSelVerts) > $abSymProgBarThresh){ //show prog if more than this many verts being mirrored\n\t\t$showProg = true;\n\t\tprogressWindow -title \"Working\" -progress 0 -status \"Reverting Vertices\";\n\t\t$progDenom = size($aSelVerts);\n\t\t$flt = ceil($progDenom/50);\n\t\t$mod = $flt;\n\t}\n\t\n\twaitCursor -state on;\n\tfor ($i=0;$i<size($aSelVerts);$i++){\n\t\t//prog win\n\t\tif ($showProg){\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*100;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t}\n\t\t//end prog win\n\t\t$vtx = $aSelVerts[$i];\n\t\t$vertNum = match(\"([0-9])+\", (match (\"([0-9])+\\\\]\", $vtx)));\n\t\t$aTrans = `xform -q -os -t ($baseObj+\".vtx[\"+$vertNum+\"]\")`;\n\t\t$vBaseTrans = <<$aTrans[0], $aTrans[1], $aTrans[2]>>;\n\t\t\n\t\t//bias stuff\n\t\t$aTrans = `xform -q -os -t $vtx`;\n\t\t$vObjTrans = <<$aTrans[0], $aTrans[1], $aTrans[2]>>;\n\t\t\n\t\tif (abs($vObjTrans - $vBaseTrans) > $vTol) xform -os -t ($vBaseTrans.x+($vObjTrans.x-$vBaseTrans.x)*$bias) ($vBaseTrans.y+($vObjTrans.y-$vBaseTrans.y)*$bias) ($vBaseTrans.z+($vObjTrans.z-$vBaseTrans.z)*$bias) $vtx;\n\t\t//done\n\t}\n\t\n\tif ($showProg){progressWindow -endProgress;}\t\n\twaitCursor -state off;\n}\n\n\nglobal proc abSymInteractiveRevertToBase(){\n\t//responds to revert to base slider movement\n\t\n\tglobal string $abSymRevVertTable[];\n\tglobal vector $abSymRevPosTable[];\n\tglobal vector $abSymRevBasePosTable[];\n\tglobal int $abSymSliderDragging;\n\tglobal string $abAltSbg;\n\tglobal string $abSbg;\n\t\n\tint $i;\n\tint $firstClick = false;\n\t\n\tif ($abSymSliderDragging == false){\n\t\t$abSymSliderDragging = true;\n\t\t\n\t\t//check to see if selection is the same -- if it is, use the existing $abSymRevPosTable\n\t\t\n\t\tstring $aStr[], $selObj, $aSelVerts[], $aBaseVerts[];\n\t\tint $buildNewTables = true;\n\t\t\n\t\t$aStr = `filterExpand -sm 12`;\n\t\tif (size($aStr) == 1){\n\t\t\t$selObj = $aStr[0];\n\t\t}else{\n\t\t\t$aStr = `ls -hilite`;\n\t\t\tif (size($aStr) == 1){\n\t\t\t\t$selObj = $aStr[0];\n\t\t\t}\n\t\t}\n\t\t\n\t\t$aSelVerts = `filterExpand -sm 31`;\n\t\t\n\t\tif ($selObj != \"\" && size($aSelVerts) > 0){\n\t\t\t\n\t\t\tif (size($aSelVerts) == size($abSymRevVertTable) && size($abSymRevVertTable) == size($abSymRevBasePosTable)){\t\t\t\t\n\t\t\t\t$buildNewTables = false;\n\t\t\t\tfor ($i=0;$i<size($aSelVerts);$i++){\n\t\t\t\t\tif ($aSelVerts[$i] != $abSymRevVertTable[$i]){\n\t\t\t\t\t\t$buildNewTables = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif ($buildNewTables){\n\t\t\t\t\n\t\t\t\tabSymClearRevTables();\n\t\t\t\t\n\t\t\t\tfloat $tol = .001;\n\t\t\t\tfloat $aFlt[];\n\t\t\t\tstring $aBaseVerts[];\n\t\t\t\tvector $vector1, $vector2;\n\t\t\t\t\n\t\t\t\tstring $baseObj = ($abAltSbg != \"\") ? $abAltSbg : $abSbg;\n\t\t\t\t\n\t\t\t\t//make base verts array\n\t\t\t\tfor ($i=0;$i<size($aSelVerts);$i++){\n\t\t\t\t\t$aBaseVerts[size($aBaseVerts)] = $baseObj+(`match \"\\\\.vtx\\\\[([0-9])+]$\" $aSelVerts[$i]`);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor ($i=0;$i<size($aSelVerts);$i++){\n\t\t\t\t\t\n\t\t\t\t\t$aFlt = `xform -q -os -translation $aSelVerts[$i]`;\n\t\t\t\t\t$vector1 = <<$aFlt[0], $aFlt[1], $aFlt[2]>>;\n\t\t\t\t\t$aFlt = `xform -q -os -translation $aBaseVerts[$i]`;\n\t\t\t\t\t$vector2 = <<$aFlt[0], $aFlt[1], $aFlt[2]>>;\n\t\t\t\t\t\n\t\t\t\t\tif ((abs($vector1 - $vector2)) > <<$tol, $tol, $tol>>){\n\t\t\t\t\t\t\n\t\t\t\t\t\t$abSymRevVertTable[size($abSymRevVertTable)] = $aSelVerts[$i];\n\t\t\t\t\t\t$abSymRevPosTable[size($abSymRevPosTable)] = $vector1;\n\t\t\t\t\t\t$abSymRevBasePosTable[size($abSymRevBasePosTable)] = $vector2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tabSymClearRevTables();\n\t\t\twarning \"Select vertices on one polygon object.\";\n\t\t}\n\t\t$firstClick = true;\n\t}\n\t\n\tfloat $bias = `floatSlider -q -v rvrtFltSldr`;\n\tfloat $aObjTrans[], $aBaseTrans[];\n\tvector $vObjTrans, $vBaseTrans;\n\t\n\tif (size($abSymRevVertTable) == size($abSymRevPosTable) && size($abSymRevPosTable) == size($abSymRevBasePosTable)){\n\t\tfor ($i=0;$i<size($abSymRevVertTable);$i++){\n\t\t\t\n\t\t\t$vObjTrans = $abSymRevPosTable[$i];\n\t\t\t$vBaseTrans = $abSymRevBasePosTable[$i];\n\t\t\txform -os -t ($vBaseTrans.x+($vObjTrans.x-$vBaseTrans.x)*$bias) ($vBaseTrans.y+($vObjTrans.y-$vBaseTrans.y)*$bias) ($vBaseTrans.z+($vObjTrans.z-$vBaseTrans.z)*$bias) $abSymRevVertTable[$i];\n\t\t}\n\t}\n\t\n\tif ($firstClick) undoInfo -swf off;\n}\n\n\nglobal proc abSymEndDrag(){\n\t//called when dragging is done\n\t\n\tglobal int $abSymSliderDragging;\n\t\n\t$abSymSliderDragging = false;\n\tundoInfo -swf on;\n}\n\n\nglobal proc abSymClearRevTables(){\n\t//clears out globals associated with dragging reversion slider\n\t\n\tglobal string $abSymRevVertTable[];\n\tglobal vector $abSymRevPosTable[];\n\tglobal vector $abSymRevBasePosTable[];\n\t\n\tclear $abSymRevVertTable;\n\tclear $abSymRevPosTable;\n\tclear $abSymRevBasePosTable;\n}\n\n\nglobal proc abSymUseAlternateBase(int $useAltBase){\n\t//substitute alternate variation of this mesh as the base shape for revert commands -- $useAltBase is a boolean which determines whether to use the alternate base or to revert to original base object\n\t\n\tglobal string $abAltSbg;\n\tglobal string $abSbg;\n\t\n\tstring $aStr[];\n\tint $aInt[], $totNewVtx, $totOrigVtx;\n\t\n\t\n\tif ($useAltBase){\n\t\t$aStr = `filterExpand -sm 12`;\n\t\tif (size($aStr) == 1){\n\t\t\t\n\t\t\t$aInt = `polyEvaluate -v $abSbg`; \n\t\t\t$totOrigVtx = $aInt[0];\n\t\t\t$aInt = `polyEvaluate -v  $aStr[0]`; \n\t\t\t$totNewVtx = $aInt[0];\n\t\t\tif ($totOrigVtx = $totNewVtx){\n\t\t\t\t//number of verts match up, so accept this mesh as a usable base\n\t\t\t\t\n\t\t\t\t$abAltSbg = $aStr[0];\n\t\t\t\tabSymClearRevTables();\n\t\t\t\tmenuItem -e -label (\"Using \"+$abAltSbg+\" as Base\") abSymCurBsMnIt;\n\t\t\t\tmenuItem -e -enable true abSymSlOrigRvtBsMnIt;\n\t\t\t\tmenuItem -e -enable true abSymSlAltMvVtsMnIt;\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\twarning \"The new base mesh must have the same number of vertices as the current base mesh.\";\n\t\t\t}\n\t\t}else{\n\t\t\twarning \"Select a mesh to use as a base object.\";\n\t\t}\n\t}else{\n\t\t$abAltSbg = \"\";\n\t\tabSymClearRevTables();\n\t\tmenuItem -e -label \"Using Original Base\" abSymCurBsMnIt;\n\t\tmenuItem -e -enable false abSymSlOrigRvtBsMnIt;\n\t\tmenuItem -e -enable false abSymSlAltMvVtsMnIt;\n\t\t\n\t}\n}\n\n\nglobal proc string[] abSelMovedVerts(string $obj, string $baseObj, float $tol){\n\t//select repositioned verts (as compared to the base mesh)\n\tint $aInt[];\n\tint $totVtx;\n\tint $i;\n\tint $j;\n\tfloat $tFlt;\n\tfloat $aVtxTrans[];\n\tstring $objStr = $obj+\".vtx[\";\n\tstring $baseObjStr = $baseObj+\".vtx[\";\n\tstring $aRetSel[];\n\tstring $vtx;\n\t\n\tvector $vTrans1, $vTrans2;\n\tvector $vTol = <<$tol, $tol, $tol>>;\n\t\n\t$aInt = `polyEvaluate -v $obj`; \n\t$totVtx = $aInt[0];\n\t\n\tint $mod, $prog;\n\tfloat $flt, $progNum, $progDenom;\n\tfloat $progUpdate = 50.0;\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Checking Verts\";\n\t$progDenom = $totVtx;\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t\n\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$vtx = $objStr+$i+\"]\";\n\t\t$aVtxTrans = `xform -q -os -t ($baseObjStr+$i+\"]\")`;\n\t\t$vTrans1 = <<$aVtxTrans[0], $aVtxTrans[1], $aVtxTrans[2]>>;\n\t\t\n\t\t$aVtxTrans = `xform -q -os -t $vtx`;\n\t\t$vTrans2 = <<$aVtxTrans[0], $aVtxTrans[1], $aVtxTrans[2]>>;\n\t\t\n\t\tif (abs($vTrans1 - $vTrans2) > $vTol) $aRetSel[size($aRetSel)] = $vtx;\n\t}\n\t\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\t\n\treturn $aRetSel;\n}\n\n\nglobal proc abSMServiceAddSubtractCopy(int $operation){\n\t// called by add, subtract and copy buttons in the menu -- if selection and basemesh are in order it calls abSMAddSubtractCopyMesh\n\t// operation is passed to abSMAddSubtractCopyMesh\n\t\n\tglobal string $abSbg;\n\t\n\tif ($abSbg == \"\"){\n\t\twarning \"You must select a base mesh first.\";\n\t\treturn;\n\t}\n\t\n\tstring $aSel[] = `ls -sl`;\n\t\n\tif (size($aSel) != 2){\n\t\twarning \"Select two mesh objects (source and target).\";\n\t\treturn;\n\t}\n\t\n\tstring $mesh, $aRel[];\n\t\n\tint $aInt[] = `polyEvaluate -v $abSbg`; \n\tint $baseVertNum = $aInt[0];\n\t\n\t// make sure that both objects are meshes with the correct number of verts (same as base mesh) and neither is the basemesh\n\tfor ($mesh in $aSel){\n\t\t// make sure neither mesh is the base mesh\n\t\tif ($mesh == $abSbg){\n\t\t\twarning \"The basemesh cannot be used as a source or target.  Try using revert instead.\";\n\t\t\treturn;\n\t\t}\n\t\t$aRel = `listRelatives -type mesh`;\n\t\tif (size($aRel) == 0){\n\t\t\twarning ($mesh+\" is not a mesh.  Unable to proceed.\");\n\t\t\treturn;\n\t\t}else{\n\t\t\t$aInt = `polyEvaluate -v $mesh`;\n\t\t\tif ($aInt[0] != $baseVertNum){\n\t\t\t\twarning ($mesh+\" topology doesn't match the base object.  Unable to proceed.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// ok, it's good to go\n\tabSMAddSubtractCopyMesh($abSbg, $aSel[0], $aSel[1], $operation);\n\t\n}\n\n/* \nglobal proc abSMAddSubtractCopyMesh(string $baseMesh, string $source, string $target, int $operation){\n\t// adds or subtracts one blend ($source) from another ($target) based on operation (0 == subtract, 1 == add, 2 == copy)\n\t\n\tint $aInt[], $totVtx, $i;\n\tfloat $aBaseVtxTrans[], $aSourceVtxTrans[], $aTargetVtxTrans[], $aSourceBaseOffset[];\n\tstring $baseMeshStr = $baseMesh+\".vtx[\";\n\tstring $sourceMeshStr = $source+\".vtx[\";\n\tstring $targetMeshStr = $target+\".vtx[\";\n\t\n\t\n\t$aInt = `polyEvaluate -v $baseMesh`; \n\t$totVtx = $aInt[0];\n\t\t\n\t// get offset of source verts from baseMesh\n\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\n\t\t$aBaseVtxTrans = `xform -q -os -t ($baseMeshStr+$i+\"]\")`;\n\t\t$aSourceVtxTrans = `xform -q -os -t ($sourceMeshStr+$i+\"]\")`;\n\t\t$aTargetVtxTrans = `xform -q -os -t ($targetMeshStr+$i+\"]\")`;\n\t\t$aSourceBaseOffset = {$aSourceVtxTrans[0]-$aBaseVtxTrans[0], $aSourceVtxTrans[1]-$aBaseVtxTrans[1], $aSourceVtxTrans[2]-$aBaseVtxTrans[2]};\n\t\t\n\t\tif ($operation == 0){\n\t\t\t// subtract\n\t\t\t$aTargetVtxTrans = {$aTargetVtxTrans[0]-$aSourceBaseOffset[0], $aTargetVtxTrans[1]-$aSourceBaseOffset[1], $aTargetVtxTrans[2]-$aSourceBaseOffset[2]};\n\t\t}else if ($operation  == 1){\n\t\t\t// add\n\t\t\t$aTargetVtxTrans = {$aTargetVtxTrans[0]+$aSourceBaseOffset[0], $aTargetVtxTrans[1]+$aSourceBaseOffset[1], $aTargetVtxTrans[2]+$aSourceBaseOffset[2]};\n\t\t}else if ($operation == 2){\n\t\t\t// copy\n\t\t\t$aTargetVtxTrans = $aSourceVtxTrans;\n\t\t}\n\t\t\n\t\txform -os -t $aTargetVtxTrans[0] $aTargetVtxTrans[1] $aTargetVtxTrans[2] ($targetMeshStr+$i+\"]\");\n\t}\n\t\n}\n*/\n\n\nglobal proc abSMAddSubtractCopyMesh(string $baseMesh, string $source, string $target, int $type){\n\t// adds or subtracts one blend ($source) from another ($target) based on type (0 == subtract, 1 == add, 2 == copy)\n\t// 3, 4, and 5 are mirror versions of 0, 1, and 2\n\t// 6, and 7 are like 0 and 1 but use offset from the target instead of the base (7 is same as 2)\n\t// 9 and 10 are mirror versions of 6 and 7\n\t\n\tglobal int $abSymTable[];\n\t\n\tint $aInt[], $totVtx, $i, $srcVtx, $trgVtx, $vtx, $aMSymTable[], $mirror, $operation, $offsetTableInd;\n\tint $axisSel = (`radioButtonGrp -q -select saRbGrp`) - 1; // 0 == x, 1 == y, 2 == z\n\tint $aSelAxis[] = {1, 1, 1};\n\t\n\tfloat $aBaseVtxTrans[], $aSourceVtxTrans[], $aTargetVtxTrans[], $aSourceBaseOffset[], $aOffsetTable[];\n\tstring $mSource, $aStr[], $aSelVerts[], $baseMeshStr, $sourceMeshStr, $targetMeshStr, $baseMeshStr, $sourceMeshStr, $targetMeshStr;\n\t\n\tif ($type == 7) $operation = 2;\n\t\telse $operation = $type % 3;\n\t\t\n\t$mirror = ($type == 3 || $type == 4 || $type == 5 || $type == 9 || $type == 10);\n\t\n\t// use target for base for types 6 - 10\n\tif ($type >= 6) $baseMesh = $target;\n\t\n\t$baseMeshStr = $baseMesh+\".vtx[\";\n\t$sourceMeshStr = $source+\".vtx[\";\n\t$targetMeshStr = $target+\".vtx[\";\n\t\n\t$totVtx = size($abSymTable);\n\tstring $aTest[];\n\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\n\t\t$vtx = $abSymTable[$i];\n\t\t\n\t\t// if mirroring, get mirror vtx\n\t\tif ($mirror) $aMSymTable[$i] = ($i%2 == 0) ? $abSymTable[$i+1] : $abSymTable[$i-1];\n\t\t\n\t\t$aBaseVtxTrans = `xform -q -os -t ($baseMeshStr+$vtx+\"]\")`;\n\t\t$aSourceVtxTrans = `xform -q -os -t ($sourceMeshStr+$vtx+\"]\")`;\n\t\t$aTargetVtxTrans = `xform -q -os -t ($targetMeshStr+$vtx+\"]\")`;\n\t\t$aSourceBaseOffset = {$aSourceVtxTrans[0]-$aBaseVtxTrans[0], $aSourceVtxTrans[1]-$aBaseVtxTrans[1], $aSourceVtxTrans[2]-$aBaseVtxTrans[2]};\n\t\t\n\t\tif ($mirror){\n\t\t\t\n\t\t\t$aOffsetTable[size($aOffsetTable)] = $aSourceBaseOffset[0];\n\t\t\t$aOffsetTable[size($aOffsetTable)] = $aSourceBaseOffset[1];\n\t\t\t$aOffsetTable[size($aOffsetTable)] = $aSourceBaseOffset[2];\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif ($operation == 0){\n\t\t\t// subtract\n\t\t\t$aTargetVtxTrans = {$aTargetVtxTrans[0]-$aSourceBaseOffset[0], $aTargetVtxTrans[1]-$aSourceBaseOffset[1], $aTargetVtxTrans[2]-$aSourceBaseOffset[2]};\n\t\t\t\n\t\t}else if ($operation  == 1){\n\t\t\t// add\n\t\t\t$aTargetVtxTrans = {$aTargetVtxTrans[0]+$aSourceBaseOffset[0], $aTargetVtxTrans[1]+$aSourceBaseOffset[1], $aTargetVtxTrans[2]+$aSourceBaseOffset[2]};\n\t\t\t\n\t\t}else if ($operation == 2){\n\t\t\t// copy\n\t\t\t$aTargetVtxTrans = $aSourceVtxTrans;\n\t\t}\n\t\t\n\t\txform -os -t $aTargetVtxTrans[0] $aTargetVtxTrans[1] $aTargetVtxTrans[2] ($targetMeshStr+$vtx+\"]\");\n\t}\n\t\n\tif ($mirror){\n\t\t\n\t\tif ($axisSel == 0) $aSelAxis[1] = -1;\n\t\t\n\t\t// if mirroring, now we can apply the transforms to their matching verts\n\t\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\t\n\t\t\t$offsetTableInd = $i*3;\n\t\t\t$vtx = $aMSymTable[$i];\n\t\t\t\n\t\t\t$aTargetVtxTrans = `xform -q -os -t ($targetMeshStr+$vtx+\"]\")`;\n\t\t\t$aSourceBaseOffset[0] = $aOffsetTable[$offsetTableInd]*$aSelAxis[0];\n\t\t\t$aSourceBaseOffset[1] = $aOffsetTable[$offsetTableInd+1]*$aSelAxis[1];\n\t\t\t$aSourceBaseOffset[2] = $aOffsetTable[$offsetTableInd+2]*$aSelAxis[2];\n\t\t\t\n\t\t\tif ($operation == 1){\n\t\t\t\t// add\n\t\t\t\t$aTargetVtxTrans = {$aTargetVtxTrans[0]-$aSourceBaseOffset[0], $aTargetVtxTrans[1]-$aSourceBaseOffset[1], $aTargetVtxTrans[2]-$aSourceBaseOffset[2]};\n\t\t\t\t\n\t\t\t}else if ($operation  == 0){\n\t\t\t\t// subtract\n\t\t\t\t$aTargetVtxTrans = {$aTargetVtxTrans[0]+$aSourceBaseOffset[0], $aTargetVtxTrans[1]+$aSourceBaseOffset[1], $aTargetVtxTrans[2]+$aSourceBaseOffset[2]};\n\t\t\t\t\n\t\t\t}else if ($operation == 2){\n\t\t\t\t// copy\n\t\t\t\t$aTargetVtxTrans = $aSourceVtxTrans;\n\t\t\t}\n\t\t\t\n\t\t\txform -os -t $aTargetVtxTrans[0] $aTargetVtxTrans[1] $aTargetVtxTrans[2] ($targetMeshStr+$vtx+\"]\");\n\t\t\t\n\t\t}\n\t}\n\t\n}\n\n\nglobal proc string[] abSelSideVerts(string $obj, string $baseObj, int $mAxisInd, int $selNeg, int $usePiv, float $tol){\n\t//selects a side of the object (located on origin) for faster mirroring (instead of having to find symmetrical verts)\n\t//$selNeg true -- select Negative side of mesh, false -- select Pos side, 2 -- select all verts\n\tint $aInt[];\n\tint $totVtx;\n\tint $i;\n\tstring $aRetSel[]; //return string of selected verts\n\tstring $vtxStr;\n\tfloat $aVtxTrans[];\n\tfloat $bBox[];\n\tfloat $baseMid;\n\tfloat $baseMidOffset;\n\t\n\t$mAxisInd -= 1; //from (1 to 3) to (0 to 2)\n\t\n\t$aInt = `polyEvaluate -v $obj`; \n\t$totVtx = $aInt[0];\n\t\n\tif ($selNeg == 2){ //return all verts\n\t\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\t$vtx = $obj+\".vtx[\"+$i+\"]\";\n\t\t\t$aRetSel[size($aRetSel)] = $vtx;\n\t\t}\n\t\treturn $aRetSel;\n\t}\n\t\n\tif ($usePiv){\n\t\t$aVtxTrans = `xform -q -ws -t $baseObj`;\n\t\t$baseMid = $aVtxTrans[$mAxisInd];\n\t}else{\n\t\t$bBox = `xform -q -ws -boundingBox $baseObj`;\n\t\t$baseMid = $bBox[$mAxisInd] + (($bBox[($mAxisInd+3)] - $bBox[$mAxisInd])/2);\n\t}\n\n\tfor ($i=0;$i<$totVtx;$i++){\n\t\t$vtxStr = \".vtx[\"+$i+\"]\";\n\t\t$aVtxTrans = `xform -q -ws -translation ($baseObj+$vtxStr)`;\n\t\t$baseMidOffset = $aVtxTrans[$mAxisInd] - $baseMid;\n\t\tif (abs($baseMidOffset) < $tol){\n\t\t\t$aRetSel[size($aRetSel)] = $obj+$vtxStr;\n\t\t\tcontinue;\n\t\t}\n\t\tif ($baseMidOffset > 0 && !$selNeg){\n\t\t\t$aRetSel[size($aRetSel)] = $obj+$vtxStr;\n\t\t\tcontinue;\n\t\t}\n\t\tif ($baseMidOffset < 0 && $selNeg){\n\t\t\t$aRetSel[size($aRetSel)] = $obj+$vtxStr;\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn $aRetSel;\n}\n\n\nglobal proc string[] abSelMirror(string $obj, string $aSelVerts[]){\n\t//mirror selection (not selected)\n\tglobal int $abSymTable[];\n\tstring $aRetVerts[];\n\tstring $vtxStr;\n\tint $i;\n\tint $vertNum;\n\tint $mVertNum;\n\t\n\tif (size($abSymTable) == 0){\n\t\twarning \"No Base Geometry Selected\";\n\t\treturn $aSelVerts;\n\t}\n\twaitCursor -state on;\n\t$vtxStr = $obj+\".vtx[\";\n\tfor ($i=0;$i<size($aSelVerts);$i++){\n\t\t$vertNum = match(\"([0-9])+\", (match (\"([0-9])+\\\\]\", ($vtxStr+$aSelVerts[$i]+\"]\"))));\n\t\t$mVertNum = abGetSymVtx($vertNum);\n\t\tif ($mVertNum != -1){\n\t\t\t$aRetVerts[size($aRetVerts)] = ($vtxStr+$mVertNum+\"]\");\n\t\t}else{ //return non symverts too (zeros and others)\n\t\t\t$aRetVerts[size($aRetVerts)] = ($vtxStr+$vertNum+\"]\");\n\t\t}\n\t}\n\twaitCursor -state off;\n\treturn $aRetVerts;\n}\n\n\nglobal proc abClearSbg(){\n\t//clears sbgFld and empties $abSymTable\n\tglobal int $abSymTable[];\t\n\tglobal string $abSbg;\n\tglobal string $abAltSbg;\n\t\n\tbutton -e -enable false smBn;\n\tbutton -e -enable false smvBn;\n\tbutton -e -enable false msBn;\n\tbutton -e -enable false fsBn;\n\tbutton -e -enable false rsBn;\n\tclear($abSymTable);\n\t$abSbg = $abAltSbg = \"\";\n\ttextField -e -text \"\" sbgFld;\n}\n\n\nglobal proc abSymCtl(string $action){\n\t\n\tglobal int $abSymTable[];\n\tglobal string $abSbg;\n\tglobal string $abAltSbg;\n\t\n\tstring $sel[] = `ls -sl -fl`;\n\tstring $aStr[];\n\tstring $aSelVerts[];\n\tstring $aHiliteObj[];\n\tstring $baseObj = $abSbg;\n\tstring $revertBaseObj = ($abAltSbg != \"\") ? $abAltSbg : $abSbg;\n\tstring $str;\n\tstring $selMesh;\n\tfloat $tol = `floatField -q -value tolFltFld`;\n\tint $axisSel = `radioButtonGrp -q -select saRbGrp`;\n\tint $negToPos = `checkBox -q -value maChkBx`;\n\tint $usePiv = `checkBox -q -value upoChkBx`;\n\tint $warned = false; //set if warning has already been passed\n\tfloat $revertBias = 1;\n\t\n\tif ($action == \"rsPrBn\"){\n\t\t$revertBias = `floatField -q -value rsPrFltFld`;\n\t\t$action = \"rsBn\";\n\t}\n\t\n\t//get selection info\n\t\n\t$aStr = `filterExpand -sm 12 $sel`;\n\tif (size($aStr) > 1){\n\t\twarning \"Select one polygon object\";\n\t\t$warned = true;\n\t}else{\n\t\t$selMesh = $aStr[0]; //if an object is selected\n\t}\n\t\n\t//make sure selected components are on only one mesh\n\tif ($selMesh == \"\"){\n\t\t$aHiliteObj = `ls -hilite`;\n\t\tif (size($aHiliteObj) == 1){\n\t\t\t$selMesh = $aHiliteObj[0];\n\t\t\t$aSelVerts = `filterExpand -sm 31 $sel`;\n\t\t}else{\n\t\t\tif (size($aHiliteObj) > 1){\n\t\t\t\tclear($aSelVerts);\n\t\t\t\twarning \"Only one object can be hilited in component mode\";\n\t\t\t\t$warned = true;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tselect $selMesh; //if two objects are selected\n\t}\n\t\n\tswitch ($action){\n\t\t\n\t\tcase \"sbgBn\":\n\t\t\tif ($selMesh != \"\"){\n\t\t\t\tabCheckSym($selMesh, $axisSel, $tol, true, $usePiv);\n\t\t\t\t$abSbg = $selMesh;\n\t\t\t\ttextField -e -text $selMesh sbgFld;\n\t\t\t\tbutton -e -enable true smBn;\n\t\t\t\tbutton -e -enable true smvBn;\n\t\t\t\tbutton -e -enable true msBn;\n\t\t\t\tbutton -e -enable true fsBn;\n\t\t\t\tbutton -e -enable true rsBn;\n\t\t\t}else{\n\t\t\t\tabClearSbg();\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase \"favBn\":\n\t\t\tif ($selMesh != \"\"){\n\t\t\t\t$aSelVerts = abCheckSym($selMesh, $axisSel, $tol, false, $usePiv);\n\t\t\t\tif (size($aSelVerts) > 0){\n\t\t\t\t\tselectMode -component;\n\t\t\t\t\tselect $aSelVerts;\n\t\t\t\t\tprint (size($aSelVerts)+\" asymmetric vert(s)\");\n\t\t\t\t}else{\n\t\t\t\t\tselect $selMesh;\n\t\t\t\t\tprint ($selMesh+\" is symmetrical\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase \"smBn\":\n\t\t\tif (size($aSelVerts) > 0){\n\t\t\t\t$aSelVerts = abSelMirror ($selMesh, $aSelVerts);\n\t\t\t\tselect $aSelVerts;\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase \"smvBn\":\n\t\t\tif ($selMesh != \"\"){\n\t\t\t\t$aSelVerts = abSelMovedVerts($selMesh, $baseObj, $tol);\n\t\t\t\tselect $aSelVerts;\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase \"smvAltBn\":\n\t\t\tif ($selMesh != \"\"){\n\t\t\t\t$aSelVerts = abSelMovedVerts($selMesh, $revertBaseObj, $tol);\n\t\t\t\tselect $aSelVerts;\n\t\t\t}\n\t\t\tbreak;\t\n\t\t\t\n\t\tcase \"msBn\":\n\t\t\tif (size($aSelVerts) > 0){\n\t\t\t\tabMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, false, $usePiv, $tol);\n\t\t\t}else{\n\t\t\t\tif ($selMesh != \"\"){ //if object is selected, select half side verts then pass that as $aSelVerts\n\t\t\t\t\t$aSelVerts = abSelSideVerts ($selMesh, $baseObj, $axisSel, $negToPos, $usePiv, $tol);\n\t\t\t\t\tabMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, false, $usePiv, $tol);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase \"fsBn\":\n\t\t\tif (size($aSelVerts) > 0){\n\t\t\t\tabMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, true, $usePiv, $tol);\n\t\t\t}else{\n\t\t\t\tif ($selMesh != \"\"){ //if object is selected, select half side verts then pass that as $aSelVerts\n\t\t\t\t\t$aSelVerts = abSelSideVerts ($selMesh, $baseObj, $axisSel, $negToPos, $usePiv, $tol);\n\t\t\t\t\tabMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, true, $usePiv, $tol);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\t\t\n\t\tcase \"rsBn\":\n\t\t\t\n\t\t\tif (size($aSelVerts) > 0){\n\t\t\t\tabRevertSel($aSelVerts, $selMesh, $revertBaseObj, $revertBias);\n\t\t\t}else{\n\t\t\t\tif ($selMesh != \"\"){ //if object is selected, select half side verts then pass that as $aSelVerts\n\t\t\t\t\t$aSelVerts = abSelSideVerts ($selMesh, $baseObj, $axisSel, 2, $usePiv, $tol); //2 returns all verts\n\t\t\t\t\tabRevertSel($aSelVerts, $selMesh, $revertBaseObj, $revertBias);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\n\t\tcase \"cBn\":\n\t\t\tabClearSbg();\n\t\t\tabSymClearRevTables();\n\t\t\tdeleteUI -window abSymWin;\n\t\t\tbreak;\n\t\t\n\t\tcase \"saRbGrp\":\n\t\t\tabClearSbg();\n\t\t\tswitch ($axisSel){\n\t\t\t\tcase 1:\n\t\t\t\t\t$str = \"X\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t$str = \"Y\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t$str = \"Z\";\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t}\n\t\t\t$str = \"Operate -\"+$str+\" to +\"+$str;\n\t\t\tcheckBox -e -l $str maChkBx;\n\t}\n\tsetFocus \"modelPanel1\";\n}\n\n\nglobal proc abSymMesh(){\n\t\n\tglobal int $abSymTable[];\n\tglobal string $abSbg;\n\tglobal string $abAltSbg;\n\tglobal int $abSymSliderDragging;\n\t\n\t$abSymSliderDragging = false;\n\t\n\tabSymClearRevTables();\n\t\n\tfloat $aRevertPopupVals[] = {1,2,3,4,5,1111,10,20,30,40,50,60,70,80,90}; //values that will appear in the revert popup menu (1111 is a divider bar)\n\t\n\tint $sbgBnsEn = false; //bool for enabled state of sbg dependent buttons\n\tstring $selBaseGeo;\n\t\n\tif (size($abSymTable) > 0 && `objExists $abSbg`){ //reselect object whose data is in symTable\n\t\t$selBaseGeo = $abSbg;\n\t\t$sbgBnsEn = true;\n\t}else{\n\t\tclear($abSymTable);\n\t\t$abSbg = $abAltSbg = \"\";\n\t}\n\t\n\tif (`window -exists abSymWin`){\n\t\tdeleteUI -window abSymWin;\n\t}\n\t\n\twindow -t \"abSymMesh\" -w 180 -h 474 -menuBar true abSymWin;\n\t\n\t// add menu\n\tmenu -label \"Operations\" -postMenuCommand \"global string $abSbg;string $aStr[], $str;$aStr = {\\\"abSMOpCopyMnIt\\\",\\\"abSMOpAddMnIt\\\",\\\"abSMOpSubtractMnIt\\\",\\\"abSMOpMirrCopyMnIt\\\",\\\"abSMOpMirrAddMnIt\\\",\\\"abSMOpMirrSubtractMnIt\\\",\\\"abSMOpBBaseAddMnIt\\\",\\\"abSMOpBBaseSubtractMnIt\\\",\\\"abSMOpBBaseMirrAddMnIt\\\",\\\"abSMOpBBaseMirrSubtractMnIt\\\"};for ($str in $aStr) menuItem -e -en ($abSbg != \\\"\\\" && `radioButtonGrp -q -select saRbGrp` == 1) $str;\";\n\tmenuItem -label \"Copy A to B\" -command \"abSMServiceAddSubtractCopy(2);\" abSMOpCopyMnIt;\n\tmenuItem -label \"Add A to B\" -command \"abSMServiceAddSubtractCopy(1);\" abSMOpAddMnIt;\n\tmenuItem -label \"Subtract A from B\" -command \"abSMServiceAddSubtractCopy(0);\" abSMOpSubtractMnIt;\n\tmenuItem -divider true;\n\tmenuItem -label \"Copy Mirror A to B\" -command \"abSMServiceAddSubtractCopy(5);\" abSMOpMirrCopyMnIt;\n\tmenuItem -label \"Add Mirror A to B\" -command \"abSMServiceAddSubtractCopy(4);\" abSMOpMirrAddMnIt;\n\tmenuItem -label \"Subtract Mirror A from B\" -command \"abSMServiceAddSubtractCopy(3);\" abSMOpMirrSubtractMnIt;\n\tmenuItem -divider true;\n\tmenuItem -label \"Add A to B (Use B as Base)\" -command \"abSMServiceAddSubtractCopy(7);\" abSMOpBBaseAddMnIt;\n\tmenuItem -label \"Subtract A from B (Use B as Base)\" -command \"abSMServiceAddSubtractCopy(6);\" abSMOpBBaseSubtractMnIt;\n\tmenuItem -divider true;\n\tmenuItem -label \"Add Mirror A to B (Use B as Base)\" -command \"abSMServiceAddSubtractCopy(10);\" abSMOpBBaseMirrAddMnIt;\n\tmenuItem -label \"Subtract Mirror A from B (Use B as Base)\" -command \"abSMServiceAddSubtractCopy(9);\" abSMOpBBaseMirrSubtractMnIt;\n\t\n\t\n\tmenu -label \"Tools\";\n\tmenuItem -label \"Attempt To Restore Symmetry\" -ann \"Attempt to restore X axis symmetry by matching vertices while iterating through a series of increasing radii.\" -command \"abSymmetrizeVertsUI();\";\n\t\n\t// continue with layout\n\tformLayout -numberOfDivisions 100 abSymForm;\n\t\n\tradioButtonGrp -numberOfRadioButtons 3 -l1 \"YZ\" -l2 \"XZ\" -l3 \"XY\"\n\t\t-select 1 -columnWidth3 52 52 52 -onCommand \"abSymCtl(\\\"saRbGrp\\\")\" saRbGrp;\n\tseparator sep1;\n\ttext -l \"Global Tolerance\" tolTxt;\n\t\n\tfloatField -min 0 -max 1 -value .001 tolFltFld;\n\tseparator sep2;\n\tbutton -l \"Select Base Geometry\" -command \"abSymCtl(\\\"sbgBn\\\")\" sbgBn;\n\ttextField -editable false -text $selBaseGeo sbgFld;\n\tseparator sep3;\n\tbutton -l \"Check Symmetry\" -command \"abSymCtl(\\\"favBn\\\")\" csBn;\n\tbutton -l \"Selection Mirror\" -enable $sbgBnsEn -command \"abSymCtl(\\\"smBn\\\")\" smBn;\n\tbutton -l \"Select Moved Verts\" -enable $sbgBnsEn -command \"abSymCtl(\\\"smvBn\\\")\" smvBn;\n\tseparator sep4;\n\tbutton -l \"Mirror Selected\" -enable $sbgBnsEn -command \"abSymCtl(\\\"msBn\\\")\" msBn;\n\tbutton -l \"Flip Selected\" -enable $sbgBnsEn -command \"abSymCtl(\\\"fsBn\\\")\" fsBn;\n\tbutton -l \"Revert Selected to Base\" -enable $sbgBnsEn  -command \"abSymCtl(\\\"rsBn\\\")\" rsBn;\n\t\n\tstring $tCmdStr = \"floatField -e -value ((`floatField -q -v rvrtFltValFltFld`)/100.0) rsPrFltFld;abSymCtl(\\\"rsPrBn\\\");\";\n\t\n\tfloatField -value 0 -pre 2 -min 0 -max 100 -cc $tCmdStr -ec $tCmdStr rvrtFltValFltFld;\n\tfloatSlider -value 1 -minValue 0 -maxValue 1 -dragCommand \"abSymInteractiveRevertToBase();\" -changeCommand \"abSymEndDrag();\" rvrtFltSldr;\n\t\n\tpopupMenu -button 3 -p rvrtFltSldr rsPpUpMn;\n\tmenuItem -label \"Commit Changes\" -command \"abSymClearRevTables();\";\n\tseparator sep5;\n\tcheckBox -l \"Operate -X to +X\" -value false maChkBx;\n\tcheckBox -l \"Use Pivot as Origin\" -value true upoChkBx;\n\tbutton -l \"Close\" -height 24 -command \"abSymCtl(\\\"cBn\\\")\" cBn;\n\t\n\t//hidden var field\n\tfloatField -value 1 -min 0 -max 1 -pre 2 -manage 0 rsPrFltFld;\n\t\t\n\t//revert button popup menus\n\t\n\tpopupMenu -button 3 -p rsBn rsPpUpMn;\n\t\n\tif (size($aRevertPopupVals) > 0){\n\t\t\n\t\tint $i;\n\t\tstring $cmdStr;\n\t\tfloat $flt;\n\t\t\n\t\tfor ($i=0;$i<size($aRevertPopupVals);$i++){\n\t\t\t\n\t\t\tif ($aRevertPopupVals[$i] == 1111){\n\t\t\t\t$cmdStr += \"menuItem -divider true;\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t$flt = $aRevertPopupVals[$i]/100;\n\t\t\t$cmdStr += \"menuItem -label \\\"\"+$aRevertPopupVals[$i]+\"%\\\" -command \\\"floatField -e -value \"+$flt+\" rsPrFltFld;abSymCtl(\\\\\\\"rsPrBn\\\\\\\");\\\";\";\n\t\t}\n\t\t\n\t\t$cmdStr += \"menuItem -divider true;\";\n\t\teval($cmdStr);\n\t}\n\t\n\tsetParent -m rsPpUpMn;\n\t\n\tstring $baseStr;\n\tint $enableOrigRecall = false;\n\t\n\tif ($abAltSbg != \"\" && `objExists $abAltSbg`){\n\t\t$baseStr = \"Using \"+$abAltSbg+\" as Base\";\n\t\t$enableOrigRecall = true;\n\t}else{\n\t\t$baseStr = \"Using Original Base\";\n\t}\n\t\n\tmenuItem -label $baseStr abSymCurBsMnIt;\n\tmenuItem -divider true;\n\tmenuItem -label \"Use Selected as Base\" -command \"abSymUseAlternateBase(1);\" abSymSlRvtBsMnIt;\n\tmenuItem -label \"Use Original Base\" -enable $enableOrigRecall -command \"abSymUseAlternateBase(0);\" abSymSlOrigRvtBsMnIt;\n\tmenuItem -label \"Select Moved from Revert Base\" -enable $enableOrigRecall -command \"abSymCtl(\\\"smvAltBn\\\");\" abSymSlAltMvVtsMnIt;\n\tmenuItem -divider true;\n\tmenuItem -label \"Use Overshoot\" -checkBox 0 -command \"float $min,$max;if (`menuItem -q -c abSymOvrShtMnIt`){$min=-.5;$max=1.5;}else{$min=0;$max=1;}floatSlider -e -min $min -max $max rvrtFltSldr;\" abSymOvrShtMnIt;\n\tsetParent ..;\n\t\n\tint $tMarg = 7;\n\tint $lMarg = 5;\n\tint $rMarg = 5;\n\tint $ctSpc = 5; //control top space\n\tint $cbSpc = 20;\n\t\t\n\tformLayout -e\n\t\t\n\t\t-af saRbGrp \"top\" $tMarg\n\t\t-af saRbGrp \"left\" 18\n\t\t\n\t\t-af sep1 \"left\" $lMarg\n\t\t-ac sep1 \"top\" $ctSpc saRbGrp\n\t\t-af sep1 \"right\" $rMarg\n\t\t\n\t\t-af tolTxt \"left\" $lMarg\n\t\t-ac tolTxt \"top\" ($ctSpc+2) sep1\n\t\t-ac tolFltFld \"left\" $ctSpc tolTxt\n\t\t-ac tolFltFld \"top\" $ctSpc sep1\n\t\t-af tolFltFld \"right\" $rMarg\n\t\t\n\t\t-af sep2 \"left\" $lMarg\n\t\t-ac sep2 \"top\" $ctSpc tolFltFld\n\t\t-af sep2 \"right\" $rMarg\n\t\t\n\t\t-af sbgBn \"left\" $lMarg\n\t\t-ac sbgBn \"top\" $ctSpc sep2\n\t\t-af sbgBn \"right\" $rMarg\n\t\t\n\t\t-af sbgFld \"left\" $lMarg\n\t\t-ac sbgFld \"top\" $ctSpc sbgBn\n\t\t-af sbgFld \"right\" $rMarg\n\t\t\n\t\t-af sep3 \"left\" $lMarg\n\t\t-ac sep3 \"top\" $ctSpc sbgFld\n\t\t-af sep3 \"right\" $rMarg\n\t\t\n\t\t-af csBn \"left\" $lMarg\n\t\t-ac csBn \"top\" $ctSpc sep3\n\t\t-af csBn \"right\" $rMarg\n\t\t\n\t\t-af smBn \"left\" $lMarg\n\t\t-ac smBn \"top\" $ctSpc csBn\n\t\t-af smBn \"right\" $rMarg\n\t\t\n\t\t-af smvBn \"left\" $lMarg\n\t\t-ac smvBn \"top\" $ctSpc smBn\n\t\t-af smvBn \"right\" $rMarg\n\t\t\n\t\t-af sep4 \"left\" $lMarg\n\t\t-ac sep4 \"top\" $ctSpc smvBn\n\t\t-af sep4 \"right\" $rMarg\n\t\t\n\t\t-af msBn \"left\" $lMarg\n\t\t-ac msBn \"top\" $ctSpc sep4\n\t\t-af msBn \"right\" $rMarg\n\t\t\t\t\n\t\t-af fsBn \"left\" $lMarg\n\t\t-ac fsBn \"top\" $ctSpc msBn\n\t\t-af fsBn \"right\" $rMarg\n\t\t\n\t\t-af sep5 \"left\" $lMarg\n\t\t-ac sep5 \"top\" $ctSpc fsBn\n\t\t-af sep5 \"right\" $rMarg\n\t\t\n\t\t-af rsBn \"left\" $lMarg\n\t\t-ac rsBn \"top\" $ctSpc sep5\n\t\t-af rsBn \"right\" $rMarg\n\t\t\t\n\t\t-af rvrtFltSldr \"left\" $lMarg\n\t\t-ac rvrtFltSldr \"top\" ($ctSpc+4) rsBn\n\t\t-ap rvrtFltSldr \"right\" $rMarg 78\n\t\t\n\t\t-ac rvrtFltValFltFld \"left\" $lMarg rvrtFltSldr\n\t\t-ac rvrtFltValFltFld \"top\" $ctSpc rsBn\n\t\t-af rvrtFltValFltFld \"right\" $rMarg\n\t\t\n\t\t-af maChkBx \"left\" $lMarg\n\t\t-ac maChkBx \"top\" ($ctSpc+4) rvrtFltSldr\n\t\t\n\t\t-af upoChkBx \"left\" $lMarg\n\t\t-ac upoChkBx \"top\" $ctSpc maChkBx\n\t\t\n\t\t-af cBn \"left\" $lMarg\n\t\t-ac cBn \"top\" $cbSpc upoChkBx\n\t\t-af cBn \"right\" $rMarg\n\t\t\n\t\tabSymForm\n\t\t;\n\t\n\tshowWindow abSymWin;\n}\n\n\nglobal proc abSymmetrizeVertsUI(){\n\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\tint $tmargin = 5;\n\t\n\tif (`window -exists abSymmetrizeVertsWin`)\n\t\tdeleteUI -window abSymmetrizeVertsWin;\n\t\n\twindow -t \"Symmetrize Verts\" -w 164 -h 114 -menuBar false -minimizeButton false -maximizeButton false abSymmetrizeVertsWin;\n\t\t\n\tformLayout -numberOfDivisions 100 abSymmetrizeVertsForm;\n\t\n\ttext -l \"Iterations:\" abSymVtIterationsTxt;\n\tintField -min 10 -v 200 abSymVtIterationsIntFld; \n\t\n\ttext -l \"Start Radius:\" abSymVtStRadTxt;\n\tfloatField -precision 6 -min .00000001 -v .000001 abSymVtStRadFltFld;\n\t\n\ttext -l \"End Radius:\" abSymVtEndRadTxt;\n\tfloatField -precision 6 -min .001 -v 1 abSymVtEndRadFltFld;\n\t\n\tbutton -h 28 -l \"Symmetrize Selected Verts\" -c \"abSymmetrizeVerts(`floatField -q -v abSymVtStRadFltFld`, `floatField -q -v abSymVtEndRadFltFld`, `intField -q -v abSymVtIterationsIntFld`);\" abSymVtGoBn;\n\t\n\tformLayout -e\n\t\n\t-af abSymVtIterationsTxt \"top\" $tmargin\n\t-af abSymVtIterationsTxt \"left\" $lmargin\n\t\n\t-af abSymVtIterationsIntFld \"top\" $tmargin\n\t-ac abSymVtIterationsIntFld \"left\" $lmargin abSymVtIterationsTxt\n\t-af abSymVtIterationsIntFld \"right\" $rmargin\n\t\n\t-ac abSymVtStRadTxt \"top\" $tmargin abSymVtIterationsIntFld\n\t-af abSymVtStRadTxt \"left\" $lmargin\n\t\n\t-ac abSymVtStRadFltFld \"top\" $tmargin abSymVtIterationsIntFld\n\t-ac abSymVtStRadFltFld \"left\" $lmargin abSymVtStRadTxt\n\t-af abSymVtStRadFltFld \"right\" $rmargin\n\t\n\t-ac abSymVtEndRadTxt \"top\" $tmargin abSymVtStRadFltFld\n\t-af abSymVtEndRadTxt \"left\" $lmargin\n\t\n\t-ac abSymVtEndRadFltFld \"top\" $tmargin abSymVtStRadFltFld\n\t-ac abSymVtEndRadFltFld \"left\" $lmargin abSymVtEndRadTxt\n\t-af abSymVtEndRadFltFld \"right\" $rmargin\n\t\n\t-ac abSymVtGoBn \"top\" $tmargin abSymVtEndRadFltFld\n\t-af abSymVtGoBn \"left\" $lmargin\n\t-af abSymVtGoBn \"right\" $rmargin\n\t\n\tabSymmetrizeVertsForm\n\t;\n\t\n\tshowWindow abSymmetrizeVertsWin;\n\t\n}\n\n\nglobal proc abSymmetrizeVerts(float $startTol, float $endTol, int $iterations){\n\t// select src, targ, src, targ and this funtion will symmetrize them across the yz axis\n\t\n\tstring $aSel[], $aSelObj[], $obj, $aLfVts[], $aRtVts[], $aOriginVts[], $aTempLfVts[], $aTempRtVts[], $plural;\n\tfloat $aTrans[], $aSrcTrans[], $aDestTrans[], $tol, $t, $aOffset[];\n\tint $i, $k, $it, $match, $matchCounter;\n\t\n\t$matchCounter = 0;\n\t\n\tif ($startTol > $endTol){\n\t\twarning \"Start radius must be less than end tolerance.  Try again.\";\n\t\treturn;\n\t}\n\t\n\t$aSel = `filterExpand -sm 31`;\n\t\n\t$aSelObj = `ls -hilite`;\n\t\n\tif (size($aSelObj) != 1){\n\t\twarning \"Select asymmetrical verts on a single object and try again.\";\n\t\treturn;\n\t}\n\t\n\t$obj = $aSelObj[0];\n\t\n\t// sort verts\n\tfor ($i=0;$i<size($aSel);$i++){\n\t\t\n\t\t$aTrans = `xform -q -os -t $aSel[$i]`;\n\t\t\n\t\tif ($aTrans[0] > $startTol){\n\t\t\t\n\t\t\t$aLfVts[size($aLfVts)] = $aSel[$i];\n\t\t\t\n\t\t}else if ($aTrans[0] < (-1.0*$startTol)){\n\t\t\t\n\t\t\t$aRtVts[size($aRtVts)] = $aSel[$i];\n\t\t\t\n\t\t}else{\n\t\t\t$aOriginVts[size($aOriginVts)] = $aSel[$i];\n\t\t}\n\t}\n\t\n\tfloat $prog, $progDenom;\n\tint $numLfVts;\n\t\n\t$numLfVts = size($aLfVts);\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Matched 0 Vertices\";\n\t$progDenom = float($numLfVts);\n\t\n\t\n\t// now go through verts in ever increasing tolerance\n\tfor ($it=0;$it<$iterations;$it++){\n\t\t\n\t\t//prog win\n\t\t$prog = ((float($numLfVts-(size($aLfVts))))/$progDenom)*100.0;\n\t\tprogressWindow -e -progress (int($prog));\n\t\t//end prog win\n\t\t\n\t\t\n\t\tclear($aTempLfVts);  \n\t\t\n\t\t$t = float($it)/float($iterations-1);\n\t\t$tol = $endTol*(float($t))*(float($t)) + $startTol;\n\t\t\n\t\tfor ($i=0;$i<size($aLfVts);$i++){\n\t\t\t\n\t\t\tclear($aTempRtVts);\n\t\t\t$match = false;\n\t\t\t\n\t\t\t$aSrcTrans = `xform -q -os -t $aLfVts[$i]`;\n\t\t\t$aDestTrans = $aSrcTrans;\n\t\t\t$aDestTrans[0] *= -1.0;\n\t\t\t\t\n\t\t\tfor ($k=0;$k<size($aRtVts);$k++){\n\t\t\t\t\n\t\t\t\t$aTrans = `xform -q -os -t $aRtVts[$k]`;\n\t\t\t\t\n\t\t\t\t$aOffset[0] = abs($aDestTrans[0] - $aTrans[0]);\n\t\t\t\t$aOffset[1] = abs($aDestTrans[1] - $aTrans[1]);\n\t\t\t\t$aOffset[2] = abs($aDestTrans[2] - $aTrans[2]);\n\t\t\t\t\n\t\t\t\tif (!$match && ($aOffset[0] < $tol && $aOffset[1] < $tol && $aOffset[2] < $tol)){\n\t\t\t\t\t\n\t\t\t\t\t// match\n\t\t\t\t\t$match = true;\n\t\t\t\t\t$matchCounter++;\n\t\t\t\t\t\n\t\t\t\t\txform -os -t $aDestTrans[0] $aDestTrans[1] $aDestTrans[2] $aRtVts[$k];\n\t\t\t\t\t\n\t\t\t\t\tselect -tgl $aLfVts[$i] $aRtVts[$k] ;\n\t\t\t\t\t\n\t\t\t\t\t$plural = ($matchCounter == 1) ? \"vertex\" : \"vertices\";\n\t\t\t\t\tprogressWindow -e -status (\"Matched \"+$matchCounter+\" \"+$plural);\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t$aTempRtVts[size($aTempRtVts)] = $aRtVts[$k];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!$match)\n\t\t\t\t$aTempLfVts[size($aTempLfVts)] = $aLfVts[$i];\n\t\t\t\n\t\t\t$aRtVts = $aTempRtVts;\n\t\t}\n\t\t\n\t\t$aLfVts = $aTempLfVts;\n\t\t\n\t\tif (size($aLfVts) == 0 && size($aRtVts) == 0)\n\t\t\tbreak;\n\t}\n\t\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\t\n\t//print (\"\\nfinal tolerance was: \"+$tol);\n\t\n\tif ($matchCounter > 0)\n\t\tprint (\"\\n\\nSymmetrized \"+$matchCounter+\" \"+$plural+\".\");\n\t\n}\n\nabSymMesh" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "selHi" 
        -enableBackground 0
        -align "center" 
        -label "select - hi" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select - hi" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Skin cluster options" 
        -enableBackground 0
        -align "center" 
        -label "skinClusterDialog" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "smoothSkin.png" 
        -image1 "smoothSkin.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SmoothBindSkinOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select surface(s)." 
        -enableBackground 0
        -align "center" 
        -label "Detach Skin" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "detachSkin.png" 
        -image1 "detachSkin.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DetachSkin" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Copy the weight of a vertex to paste it onto other vertices" 
        -enableBackground 0
        -align "center" 
        -label "Copy Vertex Weights" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "CVW" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconSkinning.png" 
        -image1 "menuIconSkinning.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "artAttrSkinWeightCopy" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Paste the weight of a copied vertex onto other vertices" 
        -enableBackground 0
        -align "center" 
        -label "Paste Vertex Weights" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "PVW" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconSkinning.png" 
        -image1 "menuIconSkinning.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "artAttrSkinWeightPaste" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Mirror skin weights options" 
        -enableBackground 0
        -align "center" 
        -label "mirrorSkinWeightsDialog" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "mirrorSkinWeight.png" 
        -image1 "mirrorSkinWeight.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "MirrorSkinWeightsOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "cCtrlHrc" 
        -enableBackground 0
        -align "center" 
        -label "autoControllerCreator" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "CCtrl" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\nimport cCtrlHrc_Cl as CC\n\nselJnt= cmds.ls( sl=1 )\n\nfor each in selJnt:\n    c= CC.CCtrlHrc_Cl()\n    selName= str(each).split( '_jnt' )\n    ctrls= c.cCtrlHrc_Fn( selName[0] )\n    tmpCnst=  cmds.parentConstraint( each, ctrls[-1] )\n    cmds.delete( tmpCnst )" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "cCube" 
        -enableBackground 0
        -align "center" 
        -label "cCube" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "cCube" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nselJnt= cmds.ls(sl=1)\n\nfor each in selJnt:\n    cubeCtrl=  cmds.curve( n= str(each).replace( '_jnt','_ctrl'), d=1,\n    p=[(0.5,0.5,0.5),(0.5,0.5,-0.5),(-0.5,0.5,-0.5),(-0.5,-0.5,-0.5),(0.5,-0.5,-0.5),(0.5,0.5,-0.5),(-0.5,0.5,-0.5),(-0.5,0.5,0.5),(0.5,0.5,0.5),(0.5,-0.5,0.5),(0.5,-0.5,-0.5),(-0.5,-0.5,-0.5),(-0.5,-0.5,0.5),(0.5,-0.5,0.5),(-0.5,-0.5,0.5),(-0.5,0.5,0.5)])\n    sdkGrp= cmds.group(n= '%s_sdk' % cubeCtrl, em=0)\n    alignGrp= cmds.group(n= '%s_align' % cubeCtrl, em=0)\n    spaceGrp= cmds.group(n= '%s_space' % cubeCtrl, em=0)\n    snapGrp= cmds.parentConstraint(each, spaceGrp, mo=0)\n    cmds.delete(snapGrp)\n    cmds.parentConstraint( cubeCtrl, each, mo=1 )" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "cSphere" 
        -enableBackground 0
        -align "center" 
        -label "cSphere" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "cSphere" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nselJnt= cmds.ls(sl=1)\n\nfor each in selJnt:\n    sphereCtrl= cmds.curve( n= '%s_ctrl' % each, d=1, \n    p=[(0,0,1),(0,0.5,0.87),(0,0.87,0.5),(0,1,0),(0,0.87,-0.5),(0,0.5,-0.87),(0,0,-1),(0,-0.5,-0.87),(0,-0.87,-0.5),(0,-1,0),(0,-0.87,0.5),(0,-0.5,0.87),(0,0,1),(0.71,0,0.71),(1,0,0),(0.71,0,-0.71),(0,0,-1),(-0.71,0,-0.71),(-1,0,0),(-0.87,0.5,0),(-0.5,0.87,0),(0,1,0),(0.5,0.87,0),(0.87,0.5,0),(1,0,0),(0.87,-0.5,0),(0.5,-0.87,0),(0,-1,0),(-0.5,-0.87,0),(-0.87,-0.5,0),(-1,0,0),(-0.71,0,0.71),(0,0,1)] )\n    sdkGrp= cmds.group(n= '%s_sdk' % sphereCtrl, em=0)\n    alignGrp= cmds.group(n= '%s_align' % sphereCtrl, em=0)\n    spaceGrp= cmds.group(n= '%s_space' % sphereCtrl, em=0)\n    snapGrp= cmds.parentConstraint(each, spaceGrp, mo=0)\n    cmds.delete(snapGrp)\n    cmds.parentConstraint( sphereCtrl, each, mo=1 )" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "cNails" 
        -enableBackground 0
        -align "center" 
        -label "cNails" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "cNails" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nselJnt= cmds.ls(sl=1)\n\nfor each in selJnt:\n    ctrl= cmds.curve( n= '%s_ctrl' % each, d=1, \n    p=[(0,0,0),(-2,0,0),(-2.292893,0,-0.707107),(-3,0,-1),(-3.707107,0,-0.707107),(-4,0,0),(-3.707107,0,0.707107),(-3,0,1),(-2.292893,0,0.707107),(-2,0,0),(-2.292893,0,0.707107),(-3.707107,0,-0.707107),(-3,0,-1),(-2.292893,0,-0.707107),(-3.707107,0,0.707107),(-3,0,1),(-2.292893,0,0.707107),(-2,0,0),(0,0,0),(2,0,0),(2.292893,0,-0.707107),(3,0,-1),(3.707107,0,-0.707107),(4,0,0),(3.707107,0,0.707107),(3,0,1),(2.292893,0,0.707107),(2,0,0),(2.292893,0,0.707107),(3.707107,0,-0.707107),(3,0,-1),(2.292893,0,-0.707107),(3.707107,0,0.707107)] )\n    cmds.xform( ctrl, ro= [0,90,0] )\n    cmds.makeIdentity( ctrl, a=1, t=1, r=1, s=1 )\n    cmds.setAttr( '%s_ctrl.sx' % each, l=1, k=0, cb=0 )\n    cmds.setAttr( '%s_ctrl.sy' % each, l=1, k=0, cb=0 )\n    cmds.setAttr( '%s_ctrl.sz' % each, l=1, k=0, cb=0 )\n    cmds.setAttr( '%s_ctrl.v' % each, l=1, k=0, cb=0 )\n    sdkGrp= cmds.group( n= '%s_ctrl_sdk' % each, em=0 )\n    alignGrp= cmds.group( n= '%s_ctrl_align' % each, em=0 )\n    spaceGrp= cmds.group( n= '%s_ctrl_space' % each, em=0 )\n    tmpCnst= cmds.parentConstraint( each, spaceGrp, mo=0 )\n    cmds.delete( tmpCnst )\n    cmds.parentConstraint( ctrl, each, mo=0 )" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "FacialUI" 
        -enableBackground 0
        -align "center" 
        -label "FacialUI" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "FcUI" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//------------------------------------------------------------------------------------------------------------//\n//------------------------------------------------------------------------------------------------------------//\n//\tSCRIPT:\tjsFacialWin.mel\n//\tVERSION: 0.4\n//\tAUTHOR:\tJudd Simantov\n//\t\t\tjudd@cgmuscle.com\n//\tWEBSITE:\twww.cgmuscle.com\n//\tDATE:\t\tJune 28, 2004\n//\t\n//\n//\tDESCRIPTION:\tThis script can be used to create and setup controls for facial expressions that \n//\t\t\tare setup the \"Jason Osipa\" way.\n//\n//------------------------------------------------------------------------------------------------------------//\t\n//------------------------------------------------------------------------------------------------------------//\n\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsFacialWin\n//\t\n//\t\tThis is the main procedure for the GUI jsFacialGUI \n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsFacialWinEdited()\n{\n\n\t//check what os\n\tstring $os = `about -os`; \n\t\n\t//window name\n\tstring $winName = \"jsFacialGUI\";\n\t\n\t//check if window exist\n\t//if it does delete it\n\tif (`window -ex $winName`==true)\n\t\tdeleteUI $winName; \n\t//creates window\n\twindow -t \"jsFacialGUI\" -wh 450 430 $winName;\n\t\n\t\n\t//formLayout for GUI\n\tformLayout -bgc .8 .8 .8 mainFormLayout;\n\t\n\t\n\t//textField for control name\n\tstring $textField_01 = `textField -bgc .8 .8 .8 -tx \"ctrlName\" -w 75 textField_01`;\n\t\n\t//checkBox to choose whether or not it should create text\n\tstring $textCheckBox_01 = `checkBox  -bgc .8 .8 .8 -v 1 -l \"Create Text\" textCheckBox_01`;\n\t\n\t//checkBox to choose whether or not it should create text\n\tstring $typeCheckBox_01 = `checkBox  -bgc .8 .8 .8 -v 0 -cc \"jsToggleTypeF\" -l \"Type (F)\" typeCheckBox_01`;\n\t\n\t\n\tbutton -w 77 -h 30 -bgc .59  .798 .9 -c jsBlendsWin -l \"Blends:\" popupButton_01;\n\t\n\t\n\t\n\t\n\t\n\t\n\t//checkBox to choose between standard D or 50/50 D\n\tstring $fiftyCheckBox_01 = `checkBox  -bgc .8 .8 .8 -v 0 -cc \"jsToggleFifty\" -l \"(50/50)\" fiftyCheckBox_01`;\n\t\n\t\n\t//texfield for control active control\n\tstring $textField_02 = `textField -tx \"activeCtrl\" -cc \"jsCheckControlType\" -ec \"jsCheckControlType\" -w 75 textField_02`;\n\tstring $activeText_01 = `text -l \"Active Control\" -w 80 -bgc .8 .8 .8 -fn boldLabelFont activeText_01`;\n\t\n\t\n\t\n\t\n//------------------------------------------------------------------------------------------------------------//\n\t//creates all the necessary buttons for the control\n\tstring $buttonPic_a01;\n\tif ($os == \"win64\")\n\t\t$buttonPic_a01 = `button  -en -0 -w 30 -h 120  -l \"\" -bgc 1 1 1 buttonPic_a01`;\n\t\n\tstring $iconTxtBut_aT = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlVertical top\" -l \"\" iconTxtBut_aT`;\n\tstring $iconTxtBut_aB = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlVertical bottom\" -l \"\" iconTxtBut_aB`;\n\tstring $buttonPicDisabled_a01 = `button  -c \"jsCreateTypeAControl\" -en 1 -w 20 -h 20 -l \"\" -bgc .3 .3 .3 buttonPicDisabled_a01`;\n\tif ($os == \"linux\")\n\t\t$buttonPic_a01 = `button  -en -0 -w 30 -h 120  -l \"\" -bgc 1 1 1 buttonPic_a01`;\n\tstring $txtType_a01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l \"(A)\" txtType_a01`;\n\t\n//------------------------------------------------------------------------------------------------------------//\n\t\n\t//creates all the necessary buttons for the control\n\tstring $buttonPic_b01;\n\tif ($os == \"win64\")\n\t\t$buttonPic_b01 = `button  -en 0 -w 120 -h 120 -l \"\" -bgc 1 1 1 buttonPic_b01`;\n\tstring $iconTxtBut_bTL = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlCorners topLeft\" -l \"\" iconTxtBut_bTL`;\n\tstring $iconTxtBut_bBL = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlCorners bottomLeft\" -l \"\" iconTxtBut_bBL`;\n\tstring $iconTxtBut_bTR = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlCorners topRight\" -l \"\" iconTxtBut_bTR`;\n\tstring $iconTxtBut_bBR = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlCorners bottomRight\" -l \"\" iconTxtBut_bBR`;\n\tstring $iconTxtBut_bTM = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlVertical top\" -l \"\" iconTxtBut_bTM`;\n\tstring $iconTxtBut_bLM = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlHorizontal left\" -l \"\" iconTxtBut_bLM`;\n\tstring $iconTxtBut_bRM = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlHorizontal right\" -l \"\" iconTxtBut_bRM`;\n\tstring $iconTxtBut_bBM = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlVertical bottom\" -l \"\" iconTxtBut_bBM`;\n\tstring $buttonPicDisabled_b01 = `button  -c \"jsCreateTypeCControl\" -en 1 -w 20 -h 20 -l \"\" -bgc .3 .3 .3 buttonPicDisabled_b01`;\n\tif ($os == \"linux\")\n\t\t$buttonPic_b01 = `button  -en 0 -w 120 -h 120 -l \"\" -bgc 1 1 1 buttonPic_b01`;\n\tstring $txtType_b01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l \"(C)\" txtType_b01`;\n\t\n//------------------------------------------------------------------------------------------------------------//\n\n\t//creates all the necessary buttons for the control\t\n\tstring $buttonPic_c01;\n\tif ($os == \"win64\")\n\t\t$buttonPic_c01 = `button -en 0  -w 120 -h 30  -l \"\" -bgc 1 1 1 buttonPic_c01`;\n\tstring $iconTxtBut_aL = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlHorizontal left\" -l \"\" iconTxtBut_aL`;\n\tstring $iconTxtBut_aR = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlHorizontal right\" -l \"\" iconTxtBut_aR`;\n\tstring $buttonPicDisabled_c01 = `button  -c \"jsCreateTypeBControl\" -en 1 -w 20 -h 20 -l \"\" -bgc .3 .3 .3 buttonPicDisabled_c01`;\n\tif ($os == \"linux\")\n\t\t$buttonPic_c01 = `button -en 0  -w 120 -h 30  -l \"\" -bgc 1 1 1 buttonPic_c01`;\n\tstring $txtType_c01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l \"(B)\" txtType_c01`;\n\t\n//------------------------------------------------------------------------------------------------------------//\n\t\n\t//creates all the necessary buttons for the control\t\n\tstring $buttonPic_d01;\n\tif ($os == \"win64\")\n\t\t$buttonPic_d01 = `button -en 0 -w 120 -h 60  -l \"\" -bgc 1 1 1 buttonPic_d01`;\n\tstring $iconTxtBut_dTL = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlCorners topLeft\" -l \"\" iconTxtBut_dTL`;\n\tstring $iconTxtBut_dTR = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlCorners topRight\" -l \"\" iconTxtBut_dTR`;\n\tstring $iconTxtBut_dTM = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlVertical top\" -l \"\" iconTxtBut_dTM`;\n\tstring $iconTxtBut_dR = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlHorizontal right\" -l \"\" iconTxtBut_dR`;\n\tstring $iconTxtBut_dL = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlHorizontal left\" -l \"\" iconTxtBut_dL`;\n\tstring $buttonPicDisabled_d01 = `button  -c \"jsCreateTypeDControl\" -en 1 -w 20 -h 20 -l \"\" -bgc .3 .3 .3 buttonPicDisabled_d01`;\n\tif ($os == \"linux\")\n\t\t$buttonPic_d01 = `button -en 0 -w 120 -h 60  -l \"\" -bgc 1 1 1 buttonPic_d01`;\n\tstring $txtType_d01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l \"(D)\" txtType_d01`;\n\t\n//------------------------------------------------------------------------------------------------------------//\n\t\n\t//creates all the necessary buttons for the control\n    string $buttonPic_g01;\n\tif ($os == \"win64\")\n\t\t$buttonPic_g01 = `button -en 0 -w 60 -h 120  -l \"\" -bgc 1 1 1 buttonPic_g01`;\n\tstring $iconTxtBut_gBR = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlCorners bottomRight\" -l \"\" iconTxtBut_gBR`;\n\tstring $iconTxtBut_gTR = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlCorners topRight\" -l \"\" iconTxtBut_gTR`;\n\tstring $iconTxtBut_gTM = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlVertical top\" -l \"\" iconTxtBut_gT`;\n\tstring $iconTxtBut_gR = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlHorizontal right\" -l \"\" iconTxtBut_gR`;\n\tstring $iconTxtBut_gBM = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlVertical bottom\" -l \"\" iconTxtBut_gBM`;\n\tstring $buttonPicDisabled_g01 = `button  -c \"jsCreateTypeGControl\" -en 1 -w 20 -h 20 -l \"\" -bgc .3 .3 .3 buttonPicDisabled_g01`;\n\tif ($os == \"linux\")\n\t\t$buttonPic_g01 = `button -en 0 -w 120 -h 60  -l \"\" -bgc 1 1 1 buttonPic_g01`;\n\tstring $txtType_g01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l \"(G)\" txtType_g01`;\n//------------------------------------------------------------------------------------------------------------//\n\t\n\t//creates all the necessary buttons for the control\n\tstring $buttonPic_e01;\n\tif ($os == \"win64\")\n\t\t$buttonPic_e01 = `button -en 0  -w 60 -h 60  -l \"\" -bgc 1 1 1 buttonPic_e01`;\n\tstring $iconTxtBut_eTR = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlCorners topRight\" -l \"\" iconTxtBut_eTR`;\n\tstring $iconTxtBut_eT = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlVertical top\" -l \"\" iconTxtBut_eT`;\n\tstring $iconTxtBut_eR = `button -bgc .59  .798 .9 -w 15 -h 15 -c \"jsConnectControlHorizontal right\" -l \"\" iconTxtBut_eR`;\n\tstring $buttonPicDisabled_e01 = `button  -c \"jsCreateTypeEControl\" -en 1 -w 20 -h 20 -l \"\" -bgc .3 .3 .3 buttonPicDisabled_e01`;\n\tif ($os == \"linux\")\n\t\t$buttonPic_e01 = `button -en 0  -w 60 -h 60  -l \"\" -bgc 1 1 1 buttonPic_e01`;\n\tstring $txtType_e01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l \"(E)\" txtType_e01`;\n\t\n//------------------------------------------------------------------------------------------------------------//\n\t\n\t//creates all the necessary buttons for the GUI\n\tstring $addBlendButton = `button -bgc .59  .798 .9 -w 100 -h 30 -c \"jsAddBlend\" -l \"Add Selected\" addBlendButton`;\n\tstring $updateButton = `button -bgc .59  .798 .9 -w 50 -h 20-c \"jsUpdate\" -l \"Update\" updateButton`;\n\tstring $clearBlendButton = `button -bgc .59  .798 .9 -w 70 -h 30  -c \"textScrollList -e -ra txtScrollList_01\" -l \"Clear All\" clearBlendButton`;\n\tstring $clearSelectedBlendButton = `button -bgc .59  .798 .9 -w 100 -h 30  -c \"jsRemoveSelectedBlend\" -l \"Clear Selected\" clearSelectedBlendButton`;\n\t\n\tstring $txtScrollList_01 = `textScrollList -h 300 -w 180 -ams 1 -sc \"jsSelectBlend\" txtScrollList_01`;\n\tstring $txtLine_01 = `text -bgc .8 .8 .8 -w 50 -fn boldLabelFont -l \"Blends: \" txtLine_01`;\n\t\n\t\n\t\n\n//------------------------------------------------------------------------------------------------------------//\n\t//edit the formLayout to poistion controls \n\tformLayout -edit\n\t\n\t\t-af \t$textCheckBox_01 \"top\" 200\n\t\t\n\t\t-af\t$iconTxtBut_aT\t\"top\"  33 \n\t\t-af\t$iconTxtBut_aT\t\"left\" 32\n\t\t\n\t\t-af\t$iconTxtBut_aB\t\"top\"  124\n\t\t-af\t$iconTxtBut_aB\t\"left\" 32\n\t\t\n\t\t-af\t$buttonPic_a01 \t\"top\"\t25\n\t\t-af\t$buttonPic_a01 \t\"left\"\t25\n\t\t\n\t\t-af\t$buttonPicDisabled_a01 \t\"top\"\t76\n\t\t-af\t$buttonPicDisabled_a01 \t\"left\"\t30\n\t\t\n\t\t-af\t$txtType_a01\t\"top\"\t126\n\t\t-af\t$txtType_a01\t\"left\"\t2\n\t\t\n//------------------------------------------------------------------------------------------------------------//\n\t\t\n\t\t-af\t$iconTxtBut_bTL\t\"top\"  33\n\t\t-af\t$iconTxtBut_bTL\t\"left\" 100\n\t\t-af\t$iconTxtBut_bBL\t\"top\"  124\n\t\t-af\t$iconTxtBut_bBL\t\"left\" 100\n\t\t-af\t$iconTxtBut_bTR\t\"top\"  33\n\t\t-af\t$iconTxtBut_bTR\t\"left\" 194\n\t\t-af\t$iconTxtBut_bBR\t\"top\"  124\n\t\t-af\t$iconTxtBut_bBR\t\"left\" 194\n\t\t\n\t\t-af\t$iconTxtBut_bTM\t\"top\"  33\n\t\t-af\t$iconTxtBut_bTM\t\"left\" 147\n\t\t-af\t$iconTxtBut_bLM\t\"top\"  78\n\t\t-af\t$iconTxtBut_bLM\t\"left\" 100\n\t\t-af\t$iconTxtBut_bRM\t\"top\"  78\n\t\t-af\t$iconTxtBut_bRM\t\"left\" 194\n\t\t-af\t$iconTxtBut_bBM\t\"top\"  124\n\t\t-af\t$iconTxtBut_bBM\t\"left\" 147\n\t\t\n\t\t-af\t$buttonPicDisabled_b01 \t\"top\"\t76\n\t\t-af\t$buttonPicDisabled_b01 \t\"left\"\t144\n\t\t\n\t\t-af\t$buttonPic_b01 \t\"top\"\t25\n\t\t-af\t$buttonPic_b01 \t\"left\"\t95\n\t\t\n\t\t-af\t$txtType_b01\t\"top\"\t126\n\t\t-af\t$txtType_b01\t\"left\"\t73\n\t\t\n//------------------------------------------------------------------------------------------------------------//\n\t\t\n\t\t-af\t$iconTxtBut_aL\t\"top\"  188\n\t\t-af\t$iconTxtBut_aL\t\"left\" 100\n\t\t-af\t$iconTxtBut_aR\t\"top\"  188\n\t\t-af\t$iconTxtBut_aR\t\"left\" 196\n\t\t-af\t$buttonPic_c01 \t\"top\"  180\n\t\t-af\t$buttonPic_c01 \t\"left\" 96\n\t\t\n\t\t-af\t$buttonPicDisabled_c01 \t\"top\"\t185\n\t\t-af\t$buttonPicDisabled_c01 \t\"left\"\t144\n\t\t\n\t\t-af\t$txtType_c01\t\"top\"\t190\n\t\t-af\t$txtType_c01\t\"left\"\t73\n\t\t\n//------------------------------------------------------------------------------------------------------------//\n\t\t\n\t\t-af\t$iconTxtBut_dTL\t\"top\"  270\n\t\t-af\t$iconTxtBut_dTL\t\"left\" 100\n\t\t\n\t\t-af\t$iconTxtBut_dTR\t\"top\"  270\n\t\t-af\t$iconTxtBut_dTR\t\"left\" 194\n\t\t\n\t\t-af\t$iconTxtBut_dTM\t\"top\"  270\n\t\t-af\t$iconTxtBut_dTM\t\"left\" 147\n\t\t\n\t\t-af\t$iconTxtBut_dR\t\"top\"  305\n\t\t-af\t$iconTxtBut_dR\t\"left\" 194\n\t\t\n\t\t-af\t$iconTxtBut_dL\t\"top\"  305\n\t\t-af\t$iconTxtBut_dL\t\"left\" 100\n\t\t\n\t\t-af\t$buttonPic_d01 \t\"top\"\t265\n\t\t-af\t$buttonPic_d01 \t\"left\"\t95\n\t\t\n\t\t-af\t$buttonPicDisabled_d01 \t\"top\"\t301\n\t\t-af\t$buttonPicDisabled_d01 \t\"left\"\t144\n\t\t\n\t\t-af\t$txtType_d01\t\"top\"\t247\n\t\t-af\t$txtType_d01\t\"left\"\t95\n\t\t\n//------------------------------------------------------------------------------------------------------------//\n\n        -af\t$iconTxtBut_gBR\t\"top\"  520\n\t\t-af\t$iconTxtBut_gBR\t\"left\" 15\n\t\t\n\t\t-af\t$iconTxtBut_gTR\t\"top\"  425\n\t\t-af\t$iconTxtBut_gTR\t\"left\" 15\n\t\t\n\t\t-af\t$iconTxtBut_gTM\t\"top\"  425\n\t\t-af\t$iconTxtBut_gTM\t\"left\" 50\n\t\t\n\t\t-af\t$iconTxtBut_gR\t\"top\"  471\n\t\t-af\t$iconTxtBut_gR\t\"left\" 15\n\t\t\n\t\t-af\t$iconTxtBut_gBM\t\"top\"  520\n\t\t-af\t$iconTxtBut_gBM\t\"left\" 50\n\t\t\n\t\t-af\t$buttonPic_g01 \t\"top\"\t420\n\t\t-af\t$buttonPic_g01 \t\"left\"\t10\n\t\t\n\t\t-af\t$buttonPicDisabled_g01 \t\"top\"\t468\n\t\t-af\t$buttonPicDisabled_g01 \t\"left\"\t45\n\t\t\n\t\t-af\t$txtType_g01\t\"top\"\t400\n\t\t-af\t$txtType_g01\t\"left\"\t10\n\n//------------------------------------------------------------------------------------------------------------//\n\t\t\n\t\t-af\t$iconTxtBut_eTR\t\"top\"  270\n\t\t-af\t$iconTxtBut_eTR\t\"left\" 64\n\t\t\n\t\t-af\t$iconTxtBut_eT\t\"top\"  270\n\t\t-af\t$iconTxtBut_eT\t\"left\" 29\n\t\t\n\t\t-af\t$iconTxtBut_eR\t\"top\"  305\n\t\t-af\t$iconTxtBut_eR\t\"left\" 64\n\t\t\n\t\t-af\t$buttonPic_e01 \t\"top\"\t265\n\t\t-af\t$buttonPic_e01 \t\"left\"\t25\n\t\t\n\t\t-af\t$buttonPicDisabled_e01 \t\"top\"\t301\n\t\t-af\t$buttonPicDisabled_e01 \t\"left\"\t29\n\t\t\n\t\t\n\t\t-af\t$txtType_e01\t\"top\"\t247\n\t\t-af\t$txtType_e01\t\"left\"\t25\n\t\t\n//------------------------------------------------------------------------------------------------------------//\n\t\t\n\t\t-af     $txtLine_01     \"top\"    5\n\t\t-af     $txtLine_01     \"left\"   250\n\t\t\n\t\t-af\t$txtScrollList_01 \"top\"\t 25\n\t\t-af\t$txtScrollList_01 \"left\" 250\n\t\t-af\t$txtScrollList_01 \"right\" 5\n\t\t\n\t\t-af\t$addBlendButton \"left\"\t 250\n\t\t-ac\t$addBlendButton \"top\"\t 4 $txtScrollList_01\n\t\t\n\t\t-af\tpopupButton_01 \"left\"\t 353\n\t\t-ac\tpopupButton_01 \"top\"\t 4 $txtScrollList_01\n\t\t\n\t\t\n\t\t\n\t\t-af\t$clearBlendButton \"left\"\t 250\n\t\t-ac\t$clearBlendButton \"top\"\t 2 $addBlendButton\n\t\t\n\t\t-ac\t$clearSelectedBlendButton \"left\" 2 $clearBlendButton\n\t\t-ac\t$clearSelectedBlendButton \"top\"\t 2 $addBlendButton\n\t\t\n\t\t-af\t$textCheckBox_01 \"top\"\t 346\n\t\t-af\t$textCheckBox_01 \"left\"\t 10\n\t\t\n\t\t-af\t$textField_01 \"top\"\t 340\n\t\t-ac\t$textField_01 \"left\"\t 5 $textCheckBox_01\n\t\t\n\t\t-af\t$textField_02 \"top\"\t 365\n\t\t-ac\t$textField_02 \"left\"\t 5 $textCheckBox_01\n\t\t\n\t\t-af\t$typeCheckBox_01 \"top\"\t 190\n\t\t-af\t$typeCheckBox_01 \"left\"\t 2\n\t\t\n\t\t-af\t$fiftyCheckBox_01 \"top\"\t 247\n\t\t-af\t$fiftyCheckBox_01 \"left\" 160\n\t\t\n\t\t-af\t$activeText_01 \"top\"\t 370\n\t\t-af\t$activeText_01 \"left\"\t 11\n\t\t\n\t\t-af \t$updateButton \"left\"\t180\n\t\t-af \t$updateButton \"top\"\t366\n\n\t\t\n//------------------------------------------------------------------------------------------------------------//\n\t\n\t\n\tmainFormLayout;\n\t\n\t//show the window\n\tshowWindow $winName;\n\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsBlendsWin\n//\t\n//\t\tThis procedure will add items to the popup list\n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsBlendsWin()\n{\n\t//windows name\n\tstring $windowName = \"blendsWin\";\n\t\n\t//check if window exists\n\tif (`window -ex $windowName`==true)\n\t\tdeleteUI $windowName; \n\t//create window\n\twindow -w 100 -h 200 $windowName;\n\t\n\t//formlayout\n\tformLayout blendFL;\n\t\n\t//create textScrollList\n\ttextScrollList -w 100 -h 160 -dcc jsSelectBlends blendsTxtScrollList;\n\t\n\t//position scrollList in formLayout\n\tformLayout -e \n\t\t\n\t\t-af blendsTxtScrollList \"left\" 1\n\t\t-af blendsTxtScrollList \"right\" 1\n\t\t-af blendsTxtScrollList \"top\" 1\n\t\t-af blendsTxtScrollList \"bottom\" 1\n\tblendFL;\n\t\t\n\n\t//list all the blends in the scene\n\tstring $blends[] = `ls -typ blendShape`;\n\tstring $blend;\n\t\n\t//for each blend, add it to the scrollList\n\tfor ($blend in $blends)\n\t{\t\n\t\ttextScrollList -e -a $blend blendsTxtScrollList;\n\t\t\t\n\t}\n\t\n\t//show the window\n\tshowWindow $windowName;\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsSelectBlends\n//\t\n//\t\tThis procedure will select the blends from the list\n//------------------------------------------------------------------------------------------------------------//\n\n\nglobal proc jsSelectBlends()\n{\n\t//query the selected name quickly\n\tstring $name[] = `textScrollList -q -si blendsTxtScrollList`;\n\t//select the blend\n\tselect $name[0];\n\t\n\t//close the window\n\tdeleteUI blendsWin;\n}\n\t\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsRemoveSelectedBlend\n//\t\n//\t\tThis procedure will remove the selected name in the textScrollList\n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsRemoveSelectedBlend()\n{\n\t//get the name of the selected item\n\tstring $selectedName[] = `textScrollList -q -si txtScrollList_01`;\n\tstring $selName;\n\t\n\tfor ($selName in $selectedName)\n\t{\n\t\n\t\t//remove the selected item\n\t\ttextScrollList -e -ri $selName txtScrollList_01;\n\t\n\t\t//print that it was succesful\n\t\tprint ($selName+\" succesfully removed from list\\n\");\n\t\n\t}\n\t\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsAddBlend\n//\t\n//\t\tThis procedure will add all the attribute of the selected object to the textScrollList\n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsAddBlend()\n{\n\t//add selected objects to $selected[]\n\tstring $selected[] = `ls -sl`;\n\t//variable for loop\n\tstring $sel;\n\t\n\t//loop through all selected object\n\tfor ($sel in $selected)\n\t{\n\t\t//list atributes of selected objects\n\t\tstring $blendAttrs[]=`listAttr -m -s -r -c -k -v $sel`;\n\t\tstring $attr;\n\t\t\n\t\t//loop through all attributes and add them to the textScrollList\n\t\tfor ($attr in $blendAttrs)\n\t\t{\n\t\t\tstring $match = `match \"envelope\" $attr`;\n\t\t\tif ($match != \"envelope\")\n\t\t\ttextScrollList -e -a ($sel+\".\"+$attr) txtScrollList_01;\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsCreateTypeAControl\n//\t\n//\t\tThis procedure will create the control typeA \n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsCreateTypeAControl()\n{\n\t//check operating system\n\tstring $os = `about -os`;\n\t//get name of text control\n\tstring $name =`textField -q -tx textField_01`; \n\t\n\t//check if object by that name already exists\n\tif (!`objExists ($name+\"Grp\")`)\n\t{\n\t\t//check if it is a type F or A\n\t\tint $typef = `checkBox -q -v typeCheckBox_01`;\n\t\t\n\t\t//create empty group node\n\t\tgroup -em -n ($name+\"Grp\");\n\t\t//add type attribute\n\t\taddAttr -ln \"type\" -dt \"string\" ($name+\"Grp\");\n\t\t\n\t\t//check if object is an F type\n\t\t//if it is create control for f\n\t\tif ($typef)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($name+\"Grp.type\") \"Fa\"; \n\t\t\tnurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 1.05 -sl2 .3  -sps 1 -d 3 -ch 0 -n ($name+\"InnerSquare\") ;\n\t\t\t\n\t\t\tcircle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+\"CircleCtrl\");\n\t\t\tscale 1 .25 1 ($name+\"CircleCtrl\");\n\t\t\t\n\t\t}\n\t\t\t\n\t\t//if it isn't an F type create control for A\n\t\telse if (!$typef)\n\t\t{\n\t\t\t\n\t\t\tsetAttr -type \"string\" ($name+\"Grp.type\") \"A\"; \n\t\t\tnurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 2 -sl2 .3  -sps 1 -d 3 -ch 0 -n ($name+\"InnerSquare\") ;\n\t\t\t\n\t\t\tcircle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+\"CircleCtrl\");\n\t\t\tscale 1 .5 1 ($name+\"CircleCtrl\");\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t//check if text should be created\n\t\tif (`checkBox -q -v textCheckBox_01`)\n\t\t{\n\t\t\t//create text for linux\n\t\t\tif ($os == \"linux\")\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Courier\" -t ($name);\n\t\t\t//create text for NT\n\t\t\telse if ($os == \"win64\")\n\t\t\t{\n\t\t\t\t//textCurves -n ($name+\"Text\")-ch 0 -f \"Times New Roman-Regular\" -t \"Maya\";\n\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Arial|h-4|w400|c0\" -t ($name);\n\t\t\t\t//textCurves -n ($name+\"Text\") -ch 0 -f \"Times New Roman-Regular\" -t ($name);\n\t\t\t\tstring $relatives[] = `listRelatives`;\n\t\t\t\tstring $con;\n\t\t\t\tstring $connections[] = `listConnections $relatives[0]`;\n\t\t\t\tfor ($con in $connections)\n\t\t\t\t{\n\t\t\t\t\tstring $match = `match \"^makeText\" $con`;\n\t\t\t\t\tif ($match == \"makeText\")\n\t\t\t\t\t\tdelete $con;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\n\t\t\txform -cp ($name+\"TextShape\");\n\t\t\tpointConstraint -n ($name+\"TempConst\") ($name+\"Grp\") ($name+\"TextShape\");\n\t\t\tdelete ($name+\"TempConst\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($name+\"TextShape\");\n\t\t\tscale .4 .4 .4 ($name+\"TextShape\");\n\t\t\tmove 0 1.3 0 ($name+\"TextShape\"); \n\t\t\tsetAttr ($name+\"TextShape.template\") 1;\n\t\t\tparent ($name+\"TextShape\") ($name+\"Grp\");\n\t\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"TextShape.v\");\n\t\t}\n\t\t\n\t\t//set the squares to be templated\n\t\tsetAttr ($name+\"InnerSquare.template\") 1;\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t//set the limits on the circle control\n\t\ttransformLimits -tz  0 0 -etz 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -tx  0 0 -etx 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -ty -1 1 -ety 1 1 ($name+\"CircleCtrl\");\n\t\t\n\t\t//add message name attribute\n\t\taddAttr -ln \"name\" -dt \"string\" ($name+\"CircleCtrl\");\n\t\tsetAttr -type \"string\" ($name+\"CircleCtrl.name\") $name; \n\t\t\n\t\t//parent everything under the main group node\n\t\tparent ($name+\"CircleCtrl\") ($name+\"InnerSquare\")  ($name+\"Grp\");\n\t\t\n\t\t//if control type is F make certain changes to control\n\t\tif ($typef)\n\t\t{\n\t\t\tscale 1 2 1 ($name+\"Grp\");\n\t\t\t\n\t\t\tmove 0 1 0 ($name+\"InnerSquare\");\n\t\t\t\n\t\t\t\n\t\t\tif (`checkBox -q -v textCheckBox_01`)\n\t\t\t{\n\t\t\t\tscale .4 .2 .4 ($name+\"TextShape\");\n\t\t\t\txform -ws -t 0 2.35 0 ($name+\"TextShape\");\n\t\t\t}\n\t\t\t\n\t\t\ttransformLimits -ty 0 1 -ety 1 1 ($name+\"CircleCtrl\");\n\t\t\t\n\t\t}\n\t\t\n\t\t//lock attributes on control that are not needed\n\t\tjsLockHideAttr ($name+\"CircleCtrl\");\n\t\t\n\t\t//connect visibility of circle control to range controls\n\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"InnerSquare.v\");\n\t\t\n\t\t\n\t\t//change active text field to the control that was just created's name \n\t\ttextField -e -tx ($name) textField_02;\n\t\t\n\t\t//set default manipulator tool\n\t\tselect -r ($name+\"CircleCtrl\");\n\t\tsetDefaultManip 1;\n\t\t\n\t\t//select the group for translation\n\t\tselect -r ($name+\"Grp\");\n\t\t\n\t\t//check the control type and disable buttons that are not active\n\t\tjsCheckControlType;\n\t\n\t}\n\t//if the object already exists print the error\n\telse if (`objExists ($name+\"Grp\")`)\n\t{\n\t\tprint \"Control already exists. Please change control name!\\n\";\n\t}\n\t\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsCreateTypeBControl\n//\t\n//\t\tThis procedure will create the control typeB \n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsCreateTypeBControl()\n{\n\t//check operating system\n\tstring $os = `about -os`;\n\t\n\t//get name of text control\n\tstring $name =`textField -q -tx textField_01`; \n\t\n\t//check if object by that name already exists\n\tif (!`objExists ($name+\"Grp\")`)\n\t{\n\t\t\n\t\t//check if it is a type F or A\n\t\tint $typef = `checkBox -q -v typeCheckBox_01`;\n\t\t//create empty group node\n\t\tgroup -em -n ($name+\"Grp\");\n\t\t//add type attribute\n\t\taddAttr -ln \"type\" -dt \"string\" ($name+\"Grp\");\n\t\t\n\t\t//check if object is an F type\n\t\t//if it is create control for f\n\t\tif ($typef)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($name+\"Grp.type\") \"Fb\"; \n\t\t\tnurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 .3 -sl2 1.05  -sps 1 -d 3 -ch 0 -n ($name+\"InnerSquare\") ;\n\t\t\t\n\t\t\t\n\t\t\tcircle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+\"CircleCtrl\");\n\t\t\tscale .25 1 1 ($name+\"CircleCtrl\");\n\t\t\t\n\t\t}\n\t\t\t\n\t\t//if it isn't an F type create control for A\n\t\telse if (!$typef)\n\t\t{\n\t\t\t\n\t\t\tsetAttr -type \"string\" ($name+\"Grp.type\") \"B\"; \n\t\t\tnurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 .3 -sl2 2  -sps 1 -d 3 -ch 0 -n ($name+\"InnerSquare\") ;\n\t\t\tcircle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+\"CircleCtrl\");\n\t\t\tscale .5 1 1 ($name+\"CircleCtrl\");\n\t\t\t\n\t\t\n\t\t}\n\t\t\n\t\t//check if text should be created\n\t\tif (`checkBox -q -v textCheckBox_01`)\n\t\t{\n\t\t\t//create text for linux\n\t\t\tif ($os == \"linux\")\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Courier\" -t ($name);\n\t\t\t//create text for NT\n\t\t\telse if ($os == \"win64\")\n\t\t\t{\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Arial|h-4|w400|c0\" -t ($name);\n\t\t\t\tstring $relatives[] = `listRelatives`;\n\t\t\t\tstring $con;\n\t\t\t\tstring $connections[] = `listConnections $relatives[0]`;\n\t\t\t\tfor ($con in $connections)\n\t\t\t\t{\n\t\t\t\t\tstring $match = `match \"^makeText\" $con`;\n\t\t\t\t\tif ($match == \"makeText\")\n\t\t\t\t\t\tdelete $con;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\txform -cp ($name+\"TextShape\");\n\t\t\tpointConstraint -n ($name+\"TempConst\") ($name+\"Grp\") ($name+\"TextShape\");\n\t\t\tdelete ($name+\"TempConst\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($name+\"TextShape\");\n\t\t\tscale .4 .4 .4 ($name+\"TextShape\");\n\t\t\tmove 0 .45 0 ($name+\"TextShape\"); \n\t\t\tsetAttr ($name+\"TextShape.template\") 1;\n\t\t\tparent ($name+\"TextShape\") ($name+\"Grp\");\n\t\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"TextShape.v\");\n\t\t}\n\t\t\n\t\t//set the squares to be templated\n\t\tsetAttr ($name+\"InnerSquare.template\") 1;\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t//set the limits on the circle control\n\t\ttransformLimits -tz  0 0 -etz 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -tx -1 1 -etx 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -ty  0 0 -ety 1 1 ($name+\"CircleCtrl\");\n\t\t\n\t\t\n\t\t//add message name attribute\n\t\taddAttr -ln \"name\" -dt \"string\" ($name+\"CircleCtrl\");\n\t\tsetAttr -type \"string\" ($name+\"CircleCtrl.name\") $name; \n\t\t\n\t\t//parent everything under the main group node\n\t\tparent ($name+\"CircleCtrl\") ($name+\"InnerSquare\") ($name+\"Grp\");\n\t\t\n\t\t//if control type is F make certain changes to control\n\t\tif ($typef)\n\t\t{\n\t\t\tscale 2 1 1 ($name+\"Grp\");\n\t\t\t\n\t\t\tmove 1 0 0 ($name+\"InnerSquare\");\n\t\t\t\n\t\t\t\n\t\t\tif (`checkBox -q -v textCheckBox_01`)\n\t\t\t{\n\t\t\t\tscale .2 .4 .4 ($name+\"TextShape\");\n\t\t\t\t\n\t\t\t\tmove -r 1 0 0 ($name+\"TextShape\");\n\t\t\t}\n\t\t\t\t\n\t\t\ttransformLimits -tx 0 1 -etx 1 1 ($name+\"CircleCtrl\");\n\t\t\t\n\t\t}\n\t\t\n\t\t//lock attributes on control that are not needed\n\t\tjsLockHideAttr ($name+\"CircleCtrl\");\n\t\t\n\t\t//connect visibility of circle control to range controls\n\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"InnerSquare.v\");\n\n\t\t\n\t\t//change active text field to the control that was just created's name \n\t\ttextField -e -tx ($name) textField_02;\n\t\t\n\t\t//set default manipulator tool\n\t\tselect -r ($name+\"CircleCtrl\");\n\t\tsetDefaultManip 1;\n\t\t\n\t\t//select the group for translation\n\t\tselect -r ($name+\"Grp\");\n\t\t\n\t\t//check the control type and disable buttons that are not active\n\t\tjsCheckControlType;\n\t}\n\t\n\t//if the object already exists print the error\n\telse if (`objExists ($name+\"Grp\")`)\n\t{\n\t\tprint \"Control already exists. Please change control name!\\n\";\n\t}\n\t\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsCreateTypeCControl\n//\t\n//\t\tThis procedure will create the control typeC\n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsCreateTypeCControl()\n{\n\t//check operating system\n\tstring $os = `about -os`;\n\t\n\t//get name of text control\n\tstring $name =`textField -q -tx textField_01`;\n\t\n\t//check if object by that name already exists\n\tif (!`objExists ($name+\"Grp\")`)\n\t{\n\t\t\n\t\t//create empty group node\n\t\tgroup -em -n ($name+\"Grp\");\n\t\t\n\t\t//add type attribute\n\t\taddAttr -ln \"type\" -dt \"string\" ($name+\"Grp\");\n\t\t\n\t\t//create control\n\t\tsetAttr -type \"string\" ($name+\"Grp.type\") \"C\"; \n\t\tnurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 2 -sl2 2 -sps 1 -d 3 -ch 0 -n ($name+\"InnerSquare\") ;\n\t\tstring $cVertCurve = `curve -d 1 -p 0 -1 0 -p 0 1 0 -n ($name + \"Vert_Crv\")`;\n\t\tstring $cHorCurve = `curve -d 1 -p -1 0 0 -p 1 0 0 -n ($name + \"Hor_Crv\")`;\n\t\tcircle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+\"CircleCtrl\");\n\t\tscale 1 1 1 ($name+\"CircleCtrl\");\n\t\t\n\t\t\n\t\t//check if text should be created\n\t\tif (`checkBox -q -v textCheckBox_01`)\n\t\t{\n\t\t\t//create text for linux\n\t\t\tif ($os == \"linux\")\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Courier\" -t ($name);\n\t\t\t//create text for NT\n\t\t\telse if ($os == \"win64\")\n\t\t\t{\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Arial|h-4|w400|c0\" -t ($name);\n\t\t\t\tstring $relatives[] = `listRelatives`;\n\t\t\t\tstring $con;\n\t\t\t\tstring $connections[] = `listConnections $relatives[0]`;\n\t\t\t\tfor ($con in $connections)\n\t\t\t\t{\n\t\t\t\t\tstring $match = `match \"^makeText\" $con`;\n\t\t\t\t\tif ($match == \"makeText\")\n\t\t\t\t\t\tdelete $con;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\txform -cp ($name+\"TextShape\");\n\t\t\tpointConstraint -n ($name+\"TempConst\") ($name+\"Grp\") ($name+\"TextShape\");\n\t\t\tdelete ($name+\"TempConst\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($name+\"TextShape\");\n\t\t\tscale .4 .4 .4 ($name+\"TextShape\");\n\t\t\tmove 0 1.3 0 ($name+\"TextShape\"); \n\t\t\tsetAttr ($name+\"TextShape.template\") 1;\n\t\t\tparent ($name+\"TextShape\") ($name+\"Grp\");\n\t\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"TextShape.v\");\n\t\t}\n\t\t//set the squares to be templated\n\t\tsetAttr ($name+\"InnerSquare.template\") 1;\n\t\tsetAttr ($name+\"Vert_Crv.template\") 1;\n\t\tsetAttr ($name+\"Hor_Crv.template\") 1;\n\t\t\n\t\tconnectAttr -f ($name+\"CircleCtrl.translateY\") ($name+\"Hor_Crv.translateY\");\n\t\tconnectAttr -f ($name+\"CircleCtrl.translateX\") ($name+\"Vert_Crv.translateX\");\t\t\n\t\t//set the limits on the circle control\n\t\ttransformLimits -tz -0 0 -etz 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -tx -1 1 -etx 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -ty -1 1 -ety 1 1 ($name+\"CircleCtrl\");\n\t\t\n\t\t//add message name attribute\n\t\taddAttr -ln \"name\" -dt \"string\" ($name+\"CircleCtrl\");\n\t\tsetAttr -type \"string\" ($name+\"CircleCtrl.name\") $name; \n\t\t\n\t\t//parent everything under the main group node\n\t\tparent ($name+\"CircleCtrl\") ($name+\"InnerSquare\") ($name+\"Hor_Crv\") ($name+\"Vert_Crv\") ($name+\"Grp\");\n\t\t\n\t\t//lock attributes on control that are not needed\n\t\tjsLockHideAttr ($name+\"CircleCtrl\");\n\t\t\n\t\t//connect visibility of circle control to range controls\n\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"InnerSquare.v\");\n\t\t\n\t\t//change active text field to the control that was just created's name \n\t\ttextField -e -tx ($name) textField_02;\n\t\t\n\t\t//set default manipulator tool\n\t\tselect -r ($name+\"CircleCtrl\");\n\t\tsetDefaultManip 1;\n\t\t\n\t\t//select the group for translation\n\t\tselect -r ($name+\"Grp\");\n\t\t\n\t\t//check the control type and disable buttons that are not active\n\t\tjsCheckControlType;\n\t}\n\t//if the object already exists print the error\n\telse if (`objExists ($name+\"Grp\")`)\n\t{\n\t\tprint \"Control already exists. Please change control name!\\n\";\n\t}\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsCreateTypeDControl\n//\t\n//\t\tThis procedure will create the control typeD \n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsCreateTypeDControl()\n{\n\t//check operating system\n\tstring $os = `about -os`;\n\t\n\t//get name of text control\n\tstring $name =`textField -q -tx textField_01`; \n\t\n\t//check if object by that name already exists\n\tif (!`objExists ($name+\"Grp\")`)\n\t{\n\t\t\n\t\t//check if it is a type fifty or not\n\t\tint $fifty = `checkBox -q -v fiftyCheckBox_01`;\n\t\t\n\t\t//create empty group node\n\t\tgroup -em -n ($name+\"Grp\");\n\t\t\n\t\t//add type attribute\n\t\taddAttr -ln \"type\" -dt \"string\" ($name+\"Grp\");\n\t\t\n\t\t//check if object is a fifty type\n\t\t//if it is create control for fifty\n\t\tif ($fifty)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($name+\"Grp.type\") \"50\"; \n\t\t}\n\t\t\n\t\t//if it isn't a fifty type create control for D\n\t\telse if (!$fifty)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($name+\"Grp.type\") \"D\"; \n\t\t}\n\t\t\n\t\tnurbsSquare -c 0 .5 0 -nr 0 0 1 -sl1 1 -sl2 2 -sps 1 -d 3 -ch 0 -n ($name+\"InnerSquare\") ;\n\t\tstring $dVertCurve = `curve -d 1 -p 0 0 0 -p 0 1 0 -n ($name + \"Vert_Crv\")`;\n\t\tstring $dHorCurve = `curve -d 1 -p -1 0 0 -p 1 0 0 -n ($name + \"Hor_Crv\")`;\t\n\t\tcircle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+\"CircleCtrl\");\n\t\tscale 1 1 1 ($name+\"CircleCtrl\");\n\t\t\n\t\t\n\t\t//check if text should be created\n\t\tif (`checkBox -q -v textCheckBox_01`)\n\t\t{\n\t\t\t//create text for linux\n\t\t\tif ($os == \"linux\")\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Courier\" -t ($name);\n\t\t\t//create text for NT\n\t\t\telse if ($os == \"win64\")\n\t\t\t{\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Arial|h-4|w400|c0\" -t ($name);\n\t\t\t\tstring $relatives[] = `listRelatives`;\n\t\t\t\tstring $con;\n\t\t\t\tstring $connections[] = `listConnections $relatives[0]`;\n\t\t\t\tfor ($con in $connections)\n\t\t\t\t{\n\t\t\t\t\tstring $match = `match \"^makeText\" $con`;\n\t\t\t\t\tif ($match == \"makeText\")\n\t\t\t\t\t\tdelete $con;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\txform -cp ($name+\"TextShape\");\n\t\t\tpointConstraint -n ($name+\"TempConst\") ($name+\"Grp\") ($name+\"TextShape\");\n\t\t\tdelete ($name+\"TempConst\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($name+\"TextShape\");\n\t\t\tscale .4 .4 .4 ($name+\"TextShape\");\n\t\t\tmove 0 1.3 0 ($name+\"TextShape\"); \n\t\t\tsetAttr ($name+\"TextShape.template\") 1;\n\t\t\tparent ($name+\"TextShape\") ($name+\"Grp\");\n\t\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"TextShape.v\");\n\t\t}\n\t\t\n\t\t//set the squares to be templated\n\t\tsetAttr ($name+\"InnerSquare.template\") 1;\n\t\tsetAttr ($name + \"Hor_Crv.template\") 1;\n\t\tsetAttr ($name + \"Vert_Crv.template\") 1;\n\t\t\n\t\tconnectAttr ($name+\"CircleCtrl.translateY\") ($name + \"Hor_Crv.translateY\");\n\t\tconnectAttr ($name+\"CircleCtrl.translateX\") ($name + \"Vert_Crv.translateX\");\t\t\n\t\t\n\t\t\n\t\t//set the limits on the circle control\n\t\ttransformLimits -tz -0 0 -etz 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -tx -1 1 -etx 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -ty  0 1 -ety 1 1 ($name+\"CircleCtrl\");\n\t\t\n\t\t//add message name attribute\n\t\taddAttr -ln \"name\" -dt \"string\" ($name+\"CircleCtrl\");\n\t\tsetAttr -type \"string\" ($name+\"CircleCtrl.name\") $name; \n\t\t\n\t\t//parent everything under the main group node\n\t\tparent ($name+\"CircleCtrl\") ($name+\"InnerSquare\") ($name + \"Hor_Crv\") ($name + \"Vert_Crv\") ($name+\"Grp\");\n\t\t\n\t\t\n\t\t//lock attributes on control that are not needed\n\t\tjsLockHideAttr ($name+\"CircleCtrl\");\n\t\t\n\t\t//connect visibility of circle control to range controls\n\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"InnerSquare.v\");\n\t\t\n\t\t//change active text field to the control that was just created's name \n\t\ttextField -e -tx ($name) textField_02;\n\t\t\n\t\t//set default manipulator tool\n\t\tselect -r ($name+\"CircleCtrl\");\n\t\tsetDefaultManip 1;\n\t\t\n\t\t//select the group for translation\n\t\tselect -r ($name+\"Grp\");\n\t\t\n\t\t//check the control type and disable buttons that are not active\n\t\tjsCheckControlType;\n\t}\n\t\n\t//if the object already exists print the error\n\telse if (`objExists ($name+\"Grp\")`)\n\t{\n\t\tprint \"Control already exists. Please change control name!\\n\";\n\t}\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsCreateTypeGControl\n//\t\n//\t\tThis procedure will create the control typeG\n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsCreateTypeGControl()\n{\n\t//check operating system\n\tstring $os = `about -os`;\n\t\n\t//get name of text control\n\tstring $name =`textField -q -tx textField_01`; \n\t\n\t//check if object by that name already exists\n\tif (!`objExists ($name+\"Grp\")`)\n\t{\n\t\t\n\t\t//create empty group node\n\t\tgroup -em -n ($name+\"Grp\");\n\t\t\n\t\t//add type attribute\n\t\taddAttr -ln \"type\" -dt \"string\" ($name+\"Grp\");\n\t\t\n\t\tnurbsSquare -c -0.5 0 0 -nr 0 0 1 -sl1 2 -sl2 1 -sps 1 -d 3 -ch 0 -n ($name+\"InnerSquare\") ;\n\t\tstring $dVertCurve = `curve -d 1 -p 0 -1 0 -p 0 1 0 -n ($name + \"Vert_Crv\")`;\n\t\tstring $dHorCurve = `curve -d 1 -p -1 0 0 -p 0 0 0 -n ($name + \"Hor_Crv\")`;\t\n\t\tcircle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+\"CircleCtrl\");\n\t\tscale 1 1 1 ($name+\"CircleCtrl\");\n\t\t\n\t\t\n\t\t//check if text should be created\n\t\tif (`checkBox -q -v textCheckBox_01`)\n\t\t{\n\t\t\t//create text for linux\n\t\t\tif ($os == \"linux\")\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Courier\" -t ($name);\n\t\t\t//create text for NT\n\t\t\telse if ($os == \"win64\")\n\t\t\t{\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Arial|h-4|w400|c0\" -t ($name);\n\t\t\t\tstring $relatives[] = `listRelatives`;\n\t\t\t\tstring $con;\n\t\t\t\tstring $connections[] = `listConnections $relatives[0]`;\n\t\t\t\tfor ($con in $connections)\n\t\t\t\t{\n\t\t\t\t\tstring $match = `match \"^makeText\" $con`;\n\t\t\t\t\tif ($match == \"makeText\")\n\t\t\t\t\t\tdelete $con;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\txform -cp ($name+\"TextShape\");\n\t\t\tpointConstraint -n ($name+\"TempConst\") ($name+\"Grp\") ($name+\"TextShape\");\n\t\t\tdelete ($name+\"TempConst\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($name+\"TextShape\");\n\t\t\tscale .4 .4 .4 ($name+\"TextShape\");\n\t\t\tmove 0 1.3 0 ($name+\"TextShape\"); \n\t\t\tsetAttr ($name+\"TextShape.template\") 1;\n\t\t\tparent ($name+\"TextShape\") ($name+\"Grp\");\n\t\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"TextShape.v\");\n\t\t}\n\t\t\n\t\t//set the squares to be templated\n\t\tsetAttr ($name+\"InnerSquare.template\") 1;\n\t\tsetAttr ($name + \"Hor_Crv.template\") 1;\n\t\tsetAttr ($name + \"Vert_Crv.template\") 1;\n\t\t\n\t\tconnectAttr ($name+\"CircleCtrl.translateY\") ($name + \"Hor_Crv.translateY\");\n\t\tconnectAttr ($name+\"CircleCtrl.translateX\") ($name + \"Vert_Crv.translateX\");\t\t\n\t\t\n\t\t\n\t\t//set the limits on the circle control\n\t\ttransformLimits -tz 0 0 -etz 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -tx -1 0 -etx 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -ty  -1 1 -ety 1 1 ($name+\"CircleCtrl\");\n\t\t\n\t\t//add message name attribute\n\t\taddAttr -ln \"name\" -dt \"string\" ($name+\"CircleCtrl\");\n\t\tsetAttr -type \"string\" ($name+\"CircleCtrl.name\") $name; \n\t\t\n\t\t//parent everything under the main group node\n\t\tparent ($name+\"CircleCtrl\") ($name+\"InnerSquare\") ($name + \"Hor_Crv\") ($name + \"Vert_Crv\") ($name+\"Grp\");\n\t\t\n\t\t\n\t\t//lock attributes on control that are not needed\n\t\tjsLockHideAttr ($name+\"CircleCtrl\");\n\t\t\n\t\t//connect visibility of circle control to range controls\n\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"InnerSquare.v\");\n\t\t\n\t\t//change active text field to the control that was just created's name \n\t\ttextField -e -tx ($name) textField_02;\n\t\t\n\t\t//set default manipulator tool\n\t\tselect -r ($name+\"CircleCtrl\");\n\t\tsetDefaultManip 1;\n\t\t\n\t\t//select the group for translation\n\t\tselect -r ($name+\"Grp\");\n\t\t\n\t\t//check the control type and disable buttons that are not active\n\t\tjsCheckControlType;\n\t}\n\t\n\t//if the object already exists print the error\n\telse if (`objExists ($name+\"Grp\")`)\n\t{\n\t\tprint \"Control already exists. Please change control name!\\n\";\n\t}\n}\n\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsCreateTypeEControl\n//\t\n//\t\tThis procedure will create the control typeE \n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsCreateTypeEControl()\n{\n\t\n\t//check operating system\n\tstring $os = `about -os`;\n\t\n\t//get name of text control\n\tstring $name =`textField -q -tx textField_01`; \n\t\n\t//check if object by that name already exists\n\tif (!`objExists ($name+\"Grp\")`)\n\t{\n\t\t//create empty group node\n\t\tgroup -em -n ($name+\"Grp\");\n\t\t//add type attribute\n\t\taddAttr -ln \"type\" -dt \"string\" ($name+\"Grp\");\n\t\t//set attribute type to E\n\t\tsetAttr -type \"string\" ($name+\"Grp.type\") \"E\"; \n\t\tnurbsSquare -c .5 .5 0 -nr 0 0 1 -sl1 1 -sl2 1 -sps 1 -d 3 -ch 0 -n ($name+\"InnerSquare\") ;\n        string $cVertCurve = `curve -d 1 -p 0 0 0 -p 0 1 0 -n ($name + \"Vert_Crv\")`;\n\t\tstring $cHorCurve = `curve -d 1 -p 0 0 0 -p 1 0 0 -n ($name + \"Hor_Crv\")`;\n\t\tcircle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+\"CircleCtrl\");\n\t\tscale 1 1 1 ($name+\"CircleCtrl\");\n\t\t\n\t\t\n\t\t//check if text should be created\n\t\tif (`checkBox -q -v textCheckBox_01`)\n\t\t{\n\t\t\t//create text for linux\n\t\t\tif ($os == \"linux\")\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Courier\" -t ($name);\n\t\t\t//create text for NT\n\t\t\telse if ($os == \"win64\")\n\t\t\t{\n\t\t\t\ttextCurves -n ($name+\"Text\") -ch 0 -f \"Arial|h-4|w400|c0\" -t ($name);\n\t\t\t\tstring $relatives[] = `listRelatives`;\n\t\t\t\tstring $con;\n\t\t\t\tstring $connections[] = `listConnections $relatives[0]`;\n\t\t\t\tfor ($con in $connections)\n\t\t\t\t{\n\t\t\t\t\tstring $match = `match \"^makeText\" $con`;\n\t\t\t\t\tif ($match == \"makeText\")\n\t\t\t\t\t\tdelete $con;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\txform -cp ($name+\"TextShape\");\n\t\t\tpointConstraint -n ($name+\"TempConst\") ($name+\"Grp\") ($name+\"TextShape\");\n\t\t\tdelete ($name+\"TempConst\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($name+\"TextShape\");\n\t\t\tscale .4 .4 .4 ($name+\"TextShape\");\n\t\t\tmove .5 1.3 0 ($name+\"TextShape\"); \n\t\t\tsetAttr ($name+\"TextShape.template\") 1;\n\t\t\tparent ($name+\"TextShape\") ($name+\"Grp\");\n\t\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"TextShape.v\");\n\t\t}\n\t\t\n\t\t//set the squares to be templated\n\t\tsetAttr ($name+\"InnerSquare.template\") 1;\n\t\tsetAttr ($name + \"Hor_Crv.template\") 1;\n\t\tsetAttr ($name + \"Vert_Crv.template\") 1;\n\t\t\n        connectAttr ($name+\"CircleCtrl.translateY\") ($name + \"Hor_Crv.translateY\");\n        connectAttr ($name+\"CircleCtrl.translateX\") ($name + \"Vert_Crv.translateX\");\t\t\t\n\t\t\n\t\t\n\t\t//set the limits on the circle control\n\t\ttransformLimits -tz -0 0 -etz 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -tx  0 1 -etx 1 1 ($name+\"CircleCtrl\");\n\t\ttransformLimits -ty  0 1 -ety 1 1 ($name+\"CircleCtrl\");\n\t\t\n\t\t//add message name attribute\n\t\taddAttr -ln \"name\" -dt \"string\" ($name+\"CircleCtrl\");\n\t\tsetAttr -type \"string\" ($name+\"CircleCtrl.name\") $name; \n\t\t\n\t\t//parent everything under the main group node\n\t\tparent ($name+\"CircleCtrl\") ($name+\"InnerSquare\") ($name + \"Hor_Crv\") ($name + \"Vert_Crv\") ($name+\"Grp\");\n\t\t\n\t\t//lock attributes on control that are not needed\n\t\tjsLockHideAttr ($name+\"CircleCtrl\");\n\t\t\n\t\t//connect visibility of circle control to range controls\n\t\tconnectAttr -f ($name+\"CircleCtrl.v\") ($name+\"InnerSquare.v\");\n\t\t\n\t\t//change active text field to the control that was just created's name \n\t\ttextField -e -tx ($name) textField_02;\n\t\t\n\t\t//set default manipulator tool\n\t\tselect -r ($name+\"CircleCtrl\");\n\t\tsetDefaultManip 1;\n\t\t\n\t\t//select the group for translation\n\t\tselect -r ($name+\"Grp\");\n\t\t\n\t\t//check the control type and disable buttons that are not active\n\t\tjsCheckControlType;\n\t}\n\t\n\t//if the object already exists print the error\n\telse if (`objExists ($name+\"Grp\")`)\n\t{\n\t\tprint \"Control already exists. Please change control name!\\n\";\n\t}\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsLockHideAttr\n//\t\n//\t\tThis procedure will hide and lock attributes that are not needed \n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsLockHideAttr(string $name)\n{\n\t\n\t\t\n\t//lock translate Z\n\tsetAttr -lock true ($name+\".tz\");\n\tsetAttr -keyable false ($name+\".tz\");\n\t\n\t//lock rotate X\n\tsetAttr -lock true ($name+\".rx\");\n\tsetAttr -keyable false ($name+\".rx\");\n\t\n\t//lock rotate Y\n\tsetAttr -lock true ($name+\".ry\");\n\tsetAttr -keyable false ($name+\".ry\");\n\t\n\t//lock rotate Z\n\tsetAttr -lock true ($name+\".rz\");\n\tsetAttr -keyable false ($name+\".rz\");\n\t\n\t//lock scale X\n\tsetAttr -lock true ($name+\".sx\");\n\tsetAttr -keyable false ($name+\".sx\");\n\t\n\t//lock scale Y\n\tsetAttr -lock true ($name+\".sy\");\n\tsetAttr -keyable false ($name+\".sy\");\n\t\n\t//lock scale Z\n\tsetAttr -lock true ($name+\".sz\");\n\tsetAttr -keyable false ($name+\".sz\");\n\t\n\t\n\t//remove the comment lines if you want to also lock visibility\n\t//setAttr -lock true ($name+\".visibility\");\n\t//setAttr -keyable false ($name+\".visibility\");\n\t\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsConnectControlVertical\n//\t\n//\t\tThis procedure will make a vertical connection between the control \n//\t\tand the selected item. \n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsConnectControlVertical(string $position)\n{\n\t//get the name of the control\n\tstring $name =`textField -q -tx textField_02`; \n\t\n\tif (`objExists ($name+\"Grp\")`)\n\t{\n\t\n\t\t//get the name of the selected item\n\t\tstring $selectedName[] = `textScrollList -q -si txtScrollList_01`;\n\t\tstring $selName;\n\t\t//loop through all the selected items\n\t\tfor ($selName in $selectedName)\n\t\t{\n\t\t\t\n\t\t\t\n\t\t\t//check position\n\t\t\tif ($position == \"top\")\n\t\t\t{\n\t\t\t\t//create clamp node\n\t\t\t\tstring $topClampName = `shadingNode -n ($name+\"TopClamp\") -asUtility clamp`;\n\t\t\t\t//set clamp max and min\n\t\t\t\tsetAttr ($topClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($topClampName+\".minR\") 0;\n\t\t\t\t//connect control to clamp and clamp to blend\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.ty\") ($topClampName+\".inputR\");\n\t\t\t\tconnectAttr -f ($topClampName+\".outputR\") $selName;\n\t\t\t\t\n\t\t\t}\n\t\t\t//check position\n\t\t\telse if ($position == \"bottom\")\n\t\t\t{\n\t\t\t\t//create clamp node\n\t\t\t\tstring $bottomClampName = `shadingNode -n ($name+\"BottomClamp\") -asUtility clamp`;\n\t\t\t\t//create multiply divide node\n\t\t\t\tstring $bottomMultName = `shadingNode -n ($name+\"BottomMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\t//set operation to multiply and input 2 to -1\n\t\t\t\tsetAttr ($bottomMultName+\".operation\") 1;\n\t\t\t\tsetAttr ($bottomMultName+\".input2X\") -1;\n\t\t\t\t\n\t\t\t\t//set clamp max and min\n\t\t\t\tsetAttr ($bottomClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($bottomClampName+\".minR\") 0;\n\t\t\t\n\t\t\t\t//connect the control to the input of the multDivide node\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.ty\") ($bottomMultName+\".input1X\");\n\t\t\t\t//connect the multDivide node into the input R of the clamp node\n\t\t\t\tconnectAttr -f ($bottomMultName+\".outputX\") ($bottomClampName+\".inputR\");\n\t\t\t\t//connect the output of the clamp node into the selected attribute\n\t\t\t\tconnectAttr -f ($bottomClampName+\".outputR\") $selName;\n\t\t\t}\n\t\t\n\t\t\n\t\t\t//print that it was succesful\n\t\t\tprint (\"connection succesfully made!\\n\");\n\t\t\n\t\t}\n\t}\n\n\t\n\t\n\telse if (!`objExists ($name+\"Grp\")`)\n\t\tprint (\"No control named \"+$name+\" exists. Please change active control name!\\n\");\n\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsConnectControlHorizontal\n//\t\n//\t\tThis procedure will make a horizontal connection between the control \n//\t\tand the selected item. \n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsConnectControlHorizontal(string $position)\n{\n\t//get the name of the control\n\tstring $name =`textField -q -tx textField_02`; \n\t\n\tif (`objExists ($name+\"Grp\")`)\n\t{\n\t\t//get the name of the selected item\n\t\tstring $selectedName[] = `textScrollList -q -si txtScrollList_01`;\n\t\tstring $selName;\n\t\t\n\t\t//loop through all the selected names\n\t\tfor ($selName in $selectedName)\n\t\t{\n\t\t\t\n\t\t\t\n\t\t\t//check position\n\t\t\tif ($position == \"right\")\n\t\t\t{\n\t\t\t\t//create clamp node\n\t\t\t\tstring $rightClampName = `shadingNode -n ($name+\"RightClamp\") -asUtility clamp`;\n\t\t\t\t\n\t\t\t\t//set clamp max and min\n\t\t\t\tsetAttr ($rightClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($rightClampName+\".minR\") 0;\n\t\t\t\t//connect control to clamp and clamp to blend\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.tx\") ($rightClampName+\".inputR\");\n\t\t\t\tconnectAttr -f ($rightClampName+\".outputR\") $selName;\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t//check position\n\t\t\telse if ($position == \"left\")\n\t\t\t{\n\t\t\t\tstring $leftClampName = `shadingNode -n ($name+\"LeftClamp\") -asUtility clamp`;\n\t\t\t\tstring $leftMultName = `shadingNode -n ($name+\"LeftMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\tsetAttr ($leftMultName+\".operation\") 1;\n\t\t\t\tsetAttr ($leftMultName+\".input2X\") -1;\n\t\t\t\t\n\t\t\t\t//set clamp max and min\n\t\t\t\tsetAttr ($leftClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($leftClampName+\".minR\") 0;\n\t\t\t\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.tx\") ($leftMultName+\".input1X\");\n\t\t\t\tconnectAttr -f ($leftMultName+\".outputX\") ($leftClampName+\".inputR\");\n\t\t\t\tconnectAttr -f ($leftClampName+\".outputR\") $selName;\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\n\t\t\t//print that it was succesful\n\t\t\tprint (\"connection succesfully made!\\n\");\n\t\t\n\t\t}\n\t}\n\t\n\telse if (!`objExists ($name+\"Grp\")`)\n\t\tprint (\"No control named \"+$name+\" exists. Please change active control name!\\n\");\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsConnectControlCorners\n//\t\n//\t\tThis procedure will make a diagonal connection between the control \n//\t\tand the selected item. \n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsConnectControlCorners(string $position)\n{\n\t//get the name of the control\n\tstring $name =`textField -q -tx textField_02`; \n\t\n\t\n\t\n\tif (`objExists ($name+\"Grp\")`)\n\t{\n\t\t//get the name of the selected item\n\t\tstring $selectedName[] = `textScrollList -q -si txtScrollList_01`;\n\t\tstring $selName;\n\t\t\n\t\t//check if fifty is activated\n\t\tint $fifty = `checkBox -q -v fiftyCheckBox_01`;\n\t\t\n\t\t//loop through all the selected names\n\t\tfor ($selName in $selectedName)\n\t\t{\n\t\t\t\n\t\t\t\n\t\t\t//check position\n\t\t\tif (($position == \"topRight\") && (!$fifty))\n\t\t\t{\n\t\t\t\t//create clamp node\n\t\t\t\tstring $topRightXClampName = `shadingNode -n ($name+\"TopRightXClamp\") -asUtility clamp`;\n\t\t\t\tstring $topRightYClampName = `shadingNode -n ($name+\"TopRightYClamp\") -asUtility clamp`;\n\t\t\t\t\n\t\t\t\tstring $topRightAddName =`shadingNode -n ($name+\"TopRightAdd\") -asUtility addDoubleLinear`;\n\t\t\t\t\n\t\t\t\tstring $topRightMultName = `shadingNode -n ($name+\"TopRightMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\t\n\t\t\t\t//set clamp max and min\n\t\t\t\tsetAttr ($topRightXClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($topRightXClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($topRightYClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($topRightYClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($topRightAddName+\".input2\") 1;\n\t\t\t\t\n\t\t\t\t//connect control to clamp and clamp to blend\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.tx\") ($topRightAddName+\".input1\");\n\t\t\t\tconnectAttr -f ($topRightAddName+\".output\") ($topRightXClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.ty\") ($topRightYClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($topRightXClampName+\".outputR\") ($topRightMultName+\".input1X\");\n\t\t\t\tconnectAttr -f ($topRightYClampName+\".outputR\") ($topRightMultName+\".input2X\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($topRightMultName+\".outputX\") $selName;\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t//check position\n\t\t\telse if ($position == \"bottomRight\")\n\t\t\t{\n\t\t\t\t//create clamp node\n\t\t\t\tstring $bottomRightXClampName = `shadingNode -n ($name+\"BottomRightXClamp\") -asUtility clamp`;\n\t\t\t\tstring $bottomRightYClampName = `shadingNode -n ($name+\"BottomRightYClamp\") -asUtility clamp`;\n\t\t\t\t\n\t\t\t\tstring $bottomRightAddName =`shadingNode -n ($name+\"BottomRightAdd\") -asUtility addDoubleLinear`;\n\t\t\t\t\n\t\t\t\tstring $bottomRightMultName = `shadingNode -n ($name+\"BottomRightMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\tstring $bottomRightYMultName = `shadingNode -n ($name+\"BottomRightYMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\t\n\t\t\t\t//set clamp max and min\n\t\t\t\tsetAttr ($bottomRightXClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($bottomRightXClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($bottomRightYClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($bottomRightYClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($bottomRightAddName+\".input2\") 1;\n\t\t\t\tsetAttr ($bottomRightYMultName+\".input2X\") -1;\n\t\t\t\t\n\t\t\t\t//connect control to clamp and clamp to blend\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.tx\") ($bottomRightAddName+\".input1\");\n\t\t\t\tconnectAttr -f ($bottomRightAddName+\".output\") ($bottomRightXClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.ty\") ($bottomRightYMultName+\".input1X\");\n\t\t\t\tconnectAttr -f ($bottomRightYMultName+\".outputX\") ($bottomRightYClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($bottomRightXClampName+\".outputR\") ($bottomRightMultName+\".input1X\");\n\t\t\t\tconnectAttr -f ($bottomRightYClampName+\".outputR\") ($bottomRightMultName+\".input2X\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($bottomRightMultName+\".outputX\") $selName;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//check position\n\t\t\telse if (($position == \"topLeft\") && (!$fifty))\n\t\t\t{\n\t\t\t\t//create clamp node\n\t\t\t\tstring $topLeftXClampName = `shadingNode -n ($name+\"TopLeftXClamp\") -asUtility clamp`;\n\t\t\t\tstring $topLeftYClampName = `shadingNode -n ($name+\"TopLeftYClamp\") -asUtility clamp`;\n\t\t\t\t\n\t\t\t\tstring $topLeftXAddName =`shadingNode -n ($name+\"TopLeftAdd\") -asUtility addDoubleLinear`;\n\t\t\t\t\n\t\t\t\tstring $topLeftMultName = `shadingNode -n ($name+\"TopLeftMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\tstring $topLeftXMultName = `shadingNode -n ($name+\"TopLeftXMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\t\n\t\t\t\t//set clamp max and min\n\t\t\t\tsetAttr ($topLeftXClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($topLeftXClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($topLeftYClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($topLeftYClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($topLeftXAddName+\".input2\") 1;\n\t\t\t\tsetAttr ($topLeftXMultName+\".input2X\") -1;\n\t\t\t\t\n\t\t\t\t//connect control to clamp and clamp to blend\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.tx\") ($topLeftXMultName+\".input1X\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($topLeftXMultName+\".outputX\") ($topLeftXAddName+\".input1\");\n\t\t\t\tconnectAttr -f ($topLeftXAddName+\".output\") ($topLeftXClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.ty\") ($topLeftYClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($topLeftXClampName+\".outputR\") ($topLeftMultName+\".input1X\");\n\t\t\t\tconnectAttr -f ($topLeftYClampName+\".outputR\") ($topLeftMultName+\".input2X\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($topLeftMultName+\".outputX\") $selName;\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t//check position\n\t\t\telse if ($position == \"bottomLeft\")\n\t\t\t{\n\t\t\t\t//create clamp node\n\t\t\t\tstring $bottomLeftXClampName = `shadingNode -n ($name+\"BottomLeftXClamp\") -asUtility clamp`;\n\t\t\t\tstring $bottomLeftYClampName = `shadingNode -n ($name+\"BottomLeftYClamp\") -asUtility clamp`;\n\t\t\t\t\n\t\t\t\tstring $bottomLeftXAddName =`shadingNode -n ($name+\"BottomLeftAdd\") -asUtility addDoubleLinear`;\n\t\t\t\t\n\t\t\t\tstring $bottomLeftMultName = `shadingNode -n ($name+\"BottomLeftMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\tstring $bottomLeftXMultName = `shadingNode -n ($name+\"BottomLeftXMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\tstring $bottomLeftYMultName = `shadingNode -n ($name+\"BottomLeftYMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\t\n\t\t\t\t//set clamp max and min\n\t\t\t\tsetAttr ($bottomLeftXClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($bottomLeftXClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($bottomLeftYClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($bottomLeftYClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($bottomLeftXAddName+\".input2\") 1;\n\t\t\t\tsetAttr ($bottomLeftXMultName+\".input2X\") -1;\n\t\t\t\tsetAttr ($bottomLeftYMultName+\".input2X\") -1;\n\t\t\t\t\n\t\t\t\t//connect control to clamp and clamp to blend\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.tx\") ($bottomLeftXMultName+\".input1X\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($bottomLeftXMultName+\".outputX\") ($bottomLeftXAddName+\".input1\");\n\t\t\t\tconnectAttr -f ($bottomLeftXAddName+\".output\") ($bottomLeftXClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.ty\") ($bottomLeftYMultName+\".input1X\");\n\t\t\t\tconnectAttr -f ($bottomLeftYMultName+\".outputX\") ($bottomLeftYClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($bottomLeftXClampName+\".outputR\") ($bottomLeftMultName+\".input1X\");\n\t\t\t\tconnectAttr -f ($bottomLeftYClampName+\".outputR\") ($bottomLeftMultName+\".input2X\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($bottomLeftMultName+\".outputX\") $selName;\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t//this will connect the controls for the fifty control\n\t\t\telse if (($position == \"topRight\") && ($fifty))\n\t\t\t{\n\t\t\t\t//create clamp node\n\t\t\t\tstring $topRightXClampName = `shadingNode -n ($name+\"TopRightXClamp\") -asUtility clamp`;\n\t\t\t\tstring $topRightYClampName = `shadingNode -n ($name+\"TopRightYClamp\") -asUtility clamp`;\n\t\t\t\t\n\t\t\t\tstring $topRightAddName =`shadingNode -n ($name+\"TopRightAdd\") -asUtility addDoubleLinear`;\n\t\t\t\t\n\t\t\t\tstring $topRightMultName = `shadingNode -n ($name+\"TopRightMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\tstring $topRightDivName = `shadingNode -n ($name+\"TopRightDivide\") -asUtility multiplyDivide`;\n\t\t\t\t\n\t\t\t\t//set clamp max and min\n\t\t\t\tsetAttr ($topRightXClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($topRightXClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($topRightYClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($topRightYClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($topRightAddName+\".input2\") 1;\n\t\t\t\tsetAttr ($topRightDivName+\".operation\") 2;\n\t\t\t\tsetAttr ($topRightDivName+\".input2X\") 2;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//connect control to clamp and clamp to blend\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.tx\") ($topRightAddName+\".input1\");\n\t\t\t\tconnectAttr -f ($topRightAddName+\".output\") ($topRightDivName+\".input1X\");\n\t\t\t\tconnectAttr -f ($topRightDivName+\".outputX\") ($topRightXClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.ty\") ($topRightYClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($topRightXClampName+\".outputR\") ($topRightMultName+\".input1X\");\n\t\t\t\tconnectAttr -f ($topRightYClampName+\".outputR\") ($topRightMultName+\".input2X\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($topRightMultName+\".outputX\") $selName;\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t//this will connect the controls for the fifty control\n\t\t\telse if (($position == \"topLeft\") && ($fifty))\n\t\t\t{\n\t\t\t\t//create clamp node\n\t\t\t\tstring $topLeftXClampName = `shadingNode -n ($name+\"TopLeftXClamp\") -asUtility clamp`;\n\t\t\t\tstring $topLeftYClampName = `shadingNode -n ($name+\"TopLeftYClamp\") -asUtility clamp`;\n\t\t\t\t\n\t\t\t\tstring $topLeftAddName =`shadingNode -n ($name+\"TopLeftAdd\") -asUtility addDoubleLinear`;\n\t\t\t\t\n\t\t\t\tstring $topLeftMultName = `shadingNode -n ($name+\"TopLeftMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\tstring $topLeftMultXName = `shadingNode -n ($name+\"TopLeftXMultDivide\") -asUtility multiplyDivide`;\n\t\t\t\tstring $topLeftDivName = `shadingNode -n ($name+\"TopLeftDivide\") -asUtility multiplyDivide`;\n\t\t\t\t\n\t\t\t\t//set clamp max and min\n\t\t\t\tsetAttr ($topLeftXClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($topLeftXClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($topLeftYClampName+\".maxR\") 1;\n\t\t\t\tsetAttr ($topLeftYClampName+\".minR\") 0;\n\t\t\t\tsetAttr ($topLeftAddName+\".input2\") 1;\n\t\t\t\tsetAttr ($topLeftMultXName+\".input2X\") -1;\n\t\t\t\tsetAttr ($topLeftDivName+\".operation\") 2;\n\t\t\t\tsetAttr ($topLeftDivName+\".input2X\") 2;\n\t\t\t\tsetAttr ($topLeftMultXName+\".operation\") 1;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//connect control to clamp and clamp to blend\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.tx\") ($topLeftMultXName+\".input1X\");\n\t\t\t\tconnectAttr -f ($topLeftMultXName+\".outputX\") ($topLeftAddName+\".input1\");\n\t\t\t\tconnectAttr -f ($topLeftAddName+\".output\") ($topLeftDivName+\".input1X\");\n\t\t\t\tconnectAttr -f ($topLeftDivName+\".outputX\") ($topLeftXClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($name+\"CircleCtrl.ty\") ($topLeftYClampName+\".inputR\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($topLeftXClampName+\".outputR\") ($topLeftMultName+\".input1X\");\n\t\t\t\tconnectAttr -f ($topLeftYClampName+\".outputR\") ($topLeftMultName+\".input2X\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($topLeftMultName+\".outputX\") $selName;\n\t\t\t\t\n\t\t\t}\n\t\t\t//print that it was succesful\n\t\t\tprint (\"connection succesfully made!\\n\");\n\t\t\n\t\t}\n\t}\n\t\n\telse if (!`objExists ($name+\"Grp\")`)\n\t\tprint (\"No control named \"+$name+\" exists. Please change active control name!\\n\");\n}\n\n\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsToggleTypeF\n//\t\n//\t\tThis procedure will toggle between the A & B type and an F type\n//\n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsToggleTypeF()\n{\n\t\n\t//check state of F checkbox\n\tint $state = `checkBox -q -v typeCheckBox_01`;\n\t\n\t//if checkbox is on disable certain buttons\n\tif ($state)\n\t{\n\t\tformLayout -e \n\t\t\t-af\tbuttonPicDisabled_a01 \t\"top\"\t122\n\t\t\t-af\tbuttonPicDisabled_a01 \t\"left\"\t30\n\t\t\t\n\t\t\t-af\tbuttonPicDisabled_c01 \t\"top\"\t185\n\t\t\t-af\tbuttonPicDisabled_c01 \t\"left\"\t99\n\t\t\t\n\t\t\tmainFormLayout;\n\t\t\t\n\t\tbutton -e -en 0 iconTxtBut_aB;\n\t\tbutton -e -en 0 iconTxtBut_aL;\n\t}\n\t\t\t\n\t//if it's not on enable certain buttons\t\n\telse if (!$state)\n\t{\t\t\n\t\tformLayout -e\n\t\t\t-af\tbuttonPicDisabled_a01 \t\"top\"\t76\n\t\t\t-af\tbuttonPicDisabled_a01 \t\"left\"\t30\n\t\t\t\n\t\t\t-af\tbuttonPicDisabled_c01 \t\"top\"\t185\n\t\t\t-af\tbuttonPicDisabled_c01 \t\"left\"\t144\n\t\t\tmainFormLayout;\n\t\t\t\n\t\t\tbutton -e -en 1 iconTxtBut_aB;\n\t\t\tbutton -e -en 1 iconTxtBut_aL;\n\t}\n\t\n}\n\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsToggleFifty\n//\t\n//\t\tThis procedure will toggle between the D type and a 50/50 D type\n//\n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsToggleFifty()\n{\n\t\n\t//check state of fifty checkbox\n\tint $state = `checkBox -q -v fiftyCheckBox_01`;\n\t\n\t//get the name of the active control\n\tstring $name = `textField -q -tx textField_02`;\n\t\n\t//if it's on disable certain buttons\n\tif ($state)\n\t{\n\t\t\t\n\t\tbutton -e -vis 0 -en 0 iconTxtBut_dR;\n\t\tbutton -e -vis 0 -en 0 iconTxtBut_dL;\n\t\tbutton -e -vis 0 -en 0 iconTxtBut_dTM;\n\t\t\n\t}\n\t\t\t\n\t//if it's off enable certain buttons\t\t\n\telse if (!$state)\n\t{\t\t\n\t\tbutton -e -vis 1 -en 1 iconTxtBut_dR;\n\t\tbutton -e -vis 1 -en 1 iconTxtBut_dL;\n\t\tbutton -e -vis 1 -en 1 iconTxtBut_dTM;\n\t}\n\t\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsSelectBlend\n//\t\n//\t\tThis procedure will select the blend if it exists\n//\n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsSelectBlend()\n{\n\t//get the name of the selected item\n\tstring $selectedName[] = `textScrollList -q -si txtScrollList_01`;\n\t//buffer for tokenize\n\tstring $buffer[];\n\tint $i;\n\t//loop through all selected item\n\tfor ($i = 0; $i < size($selectedName); $i++)\n\t{\n\t\t//if it's the first item selected\n\t\tif ($i == 0)\n\t\t{\n\t\t\t//tokenize the name\n\t\t\ttokenize $selectedName[$i] \".\" $buffer;\n\t\t\t//if the blend exists clear selection and select it\n\t\t\tif (`objExists $buffer[1]`)\n\t\t\t\tselect -r $buffer[1];\n\t\t\t\n\t\t}\n\t\t//if it's not the first object\n\t\telse if ($i >= 1)\n\t\t{\n\t\t\t//tokenize the name\n\t\t\ttokenize $selectedName[$i] \".\" $buffer;\n\t\t\t//if the object exists add it to the selection\n\t\t\tif (`objExists $buffer[1]`)\n\t\t\t\tselect -add $buffer[1];\n\t\t}\n\t}\n\t\n}\n\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsUpdate\n//\t\n//\t\tThis procedure will update the active control text according to whatever object is selected\n//\n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsUpdate()\n{\n\t//get the name of the selected object\n\tstring $sel[] = `ls -sl`;\n\t\n\t//check to see if anything is selected\n\tif (size($sel) == 0)\n\t\tprint \"Nothing is selected to update. Please select a control!\\n\";\n\telse\n\t{\n\t\t//get a list of attributes\n\t\tstring $attrs[] = `listAttr`;\n\t\tstring $attr;\n\t\t\n\t\t//loop through all the attributes to check if it's a valid control\n\t\tfor ($attr in $attrs)\n\t\t{\n\t\t\tif ($attr == \"name\")\n\t\t\t{\n\t\t\t\t//get the attribute string that holds the name\n\t\t\t\t$name = `getAttr ($sel[0]+\".name\")`;\n\t\t\t\n\t\t\n\t\t\t\t//set the textField\n\t\t\t\ttextField -e -tx $name textField_02;\n\t\t\t\t\n\t\t\t\tjsCheckControlType;\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n\t\n\t\n//------------------------------------------------------------------------------------------------------------//\n//\tPROC:\tjsCheckControlType\n//\t\n//\t\tThis procedure will disable controls that are not activated\n//\n//------------------------------------------------------------------------------------------------------------//\n\nglobal proc jsCheckControlType()\n{\n\t//get the name of the active control\n\tstring $name = `textField -q -tx textField_02`;\n\t\n\t//if the object doesnt exist print this error\n\tif (!`objExists ($name+\"Grp\")`)\n\t\tprint \"Control does not exist!\\n\";\n\t\n\t//if the object does exist disable certain buttons\n\telse if (`objExists ($name+\"Grp\")`)\n\t{\n\t\t//get the attribute type for the active control\n\t\tstring $type = `getAttr ($name+\"Grp.type\")`;\n\t\tif ($type == \"A\")\n\t\t{\n\t\t\t\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_aT;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_aB;\n\t\t\ttext -e -en 1 txtType_a01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBR;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bLM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bRM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBM;\n\t\t\ttext -e -en 0 txtType_b01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aR;\n\t\t\ttext -e -en 0 txtType_c01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dL;\n\t\t\t\n\t\t\ttext -e -en 0 txtType_d01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eR;\n\t\t\ttext -e -en 0 txtType_e01;\n\t\t}\n\t\t\n\t\telse if ($type == \"B\")\n\t\t{\n\t\t\t\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_aL;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_aR;\n\t\t\ttext -e -en 1 txtType_c01;\n\t\t\t\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBR;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bLM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bRM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBM;\n\t\t\ttext -e -en 0 txtType_b01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aB;\n\t\t\ttext -e -en 0 txtType_a01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dL;\n\t\t\ttext -e -en 0 txtType_d01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eR;\n\t\t\ttext -e -en 0 txtType_e01;\n\t\t}\n\t\t\n\t\telse if ($type == \"C\")\n\t\t{\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aR;\n\t\t\ttext -e -en 0 txtType_c01;\n\t\t\t\n\t\t\t\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_bTL;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_bBL;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_bTR;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_bBR;\n\t\t\t\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_bTM;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_bLM;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_bRM;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_bBM;\n\t\t\ttext -e -en 1 txtType_b01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aB;\n\t\t\ttext -e -en 0 txtType_a01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dL;\n\t\t\ttext -e -en 0 txtType_d01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eR;\n\t\t\ttext -e -en 0 txtType_e01;\n\t\t}\n\t\t\n\t\telse if ($type == \"D\")\n\t\t{\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aR;\n\t\t\ttext -e -en 0 txtType_c01;\n\t\t\t\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBR;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bLM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bRM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBM;\n\t\t\ttext -e -en 0 txtType_b01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aB;\n\t\t\ttext -e -en 0 txtType_a01;\n\t\t\t\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_dTL;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_dTR;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_dTM;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_dR;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_dL;\n\t\t\ttext -e -en 1 txtType_d01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eR;\n\t\t\ttext -e -en 0 txtType_e01;\n\t\t}\n\t\t\n\t\telse if ($type == \"E\")\n\t\t{\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aR;\n\t\t\ttext -e -en 0 txtType_c01;\n\t\t\t\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBR;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bLM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bRM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBM;\n\t\t\ttext -e -en 0 txtType_b01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aB;\n\t\t\ttext -e -en 0 txtType_a01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dL;\n\t\t\ttext -e -en 0 txtType_d01;\n\t\t\t\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_eTR;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_eT;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_eR;\n\t\t\ttext -e -en 1 txtType_e01;\n\t\t}\n\t\t\n\t\telse if ($type == \"Fa\")\n\t\t{\n\t\t\t\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_aT;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_aB;\n\t\t\ttext -e -en 1 txtType_a01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBR;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bLM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bRM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBM;\n\t\t\ttext -e -en 0 txtType_b01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aR;\n\t\t\ttext -e -en 0 txtType_c01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dL;\n\t\t\ttext -e -en 0 txtType_d01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eR;\n\t\t\ttext -e -en 0 txtType_e01;\n\t\t}\n\t\t\n\t\telse if ($type == \"Fb\")\n\t\t{\n\t\t\t\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_aL;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_aR;\n\t\t\ttext -e -en 1 txtType_c01;\n\t\t\t\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBR;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bLM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bRM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBM;\n\t\t\ttext -e -en 0 txtType_b01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aB;\n\t\t\ttext -e -en 0 txtType_a01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dL;\n\t\t\ttext -e -en 0 txtType_d01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eR;\n\t\t\ttext -e -en 0 txtType_e01;\n\t\t}\n\t\t\n\t\telse if ($type == \"50\")\n\t\t{\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aR;\n\t\t\ttext -e -en 0 txtType_c01;\n\t\t\t\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBL;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBR;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bLM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bRM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_bBM;\n\t\t\ttext -e -en 0 txtType_b01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_aB;\n\t\t\ttext -e -en 0 txtType_a01;\n\t\t\t\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_dTL;\n\t\t\tbutton -e -en 1 -vis 1 iconTxtBut_dTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dTM;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_dL;\n\t\t\ttext -e -en 1 txtType_d01;\n\t\t\t\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eTR;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eT;\n\t\t\tbutton -e -en 0 -vis 0 iconTxtBut_eR;\n\t\t\ttext -e -en 0 txtType_e01;\n\t\t}\n\t\t\n\t}\n\t\n\t\n}\n\t\t\t\njsFacialWinEdited()" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "RIG101" 
        -enableBackground 0
        -align "center" 
        -label "RIG101" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "101" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// 101controlMaker\n//\n//////////////////////////\n//\n// AUTHOR :\t\tJavier \"Goosh\" Solsona & Lluis Llobera\n//\t\t\t\t(jsolsona@digital-dreams.net) (lluisllobera@hotmail.com)\n//\n// Copyright (C) 2003 Rigging 101 - Javier Solsona, Lluis Llobera\n//\n// CREATION DATE :\t19/02/2003\n// UPDATED DATE :\t22/05/2003\n//\n// VERSION :\t\t2.0\n//\n// DESCRIPTION :\tCreates wire controllers to use as manipulators\n//\n// HOW TO USE :\t\trun \"rig101wireControllers;\" on the command line\n//\n//////////////////////////\n\n\n/////////////////////////////////\n//  rig101WCButtonPressed\t    \n/////////////////////////////////\n\n\nglobal proc rig101WCButtonPressed (string $TYPE)\n  {\n  switch ($TYPE)\n    {\n    case \"rig101WCTriangle\" :\n      curve -d 1 \n         -p -1.03923 0 0.6 -p 1.03923 0 0.6 -p 0 0 -1.2 -p -1.03923 0 0.6 -k 0 -k 1 -k 2 -k 3 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n\tbreak ;\n\n    case \"rig101WCSquare\" :\n      curve -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 1 -p 1 0 1 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCAngle\" :\n      curve -d 1 -p -1 0 -3 -p 1 0 -3 -p 1 0 1 -p -3 0 1 -p -3 0 -1 -p -1 0 -1 -p -1 0 -3 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCCross\" :\n      curve -d 1 -p 0.4 0 -0.4 -p 0.4 0 -2 -p -0.4 0 -2 -p -0.4 0 -0.4 -p -2 0 -0.4 -p -2 0 0.4 -p -0.4 0 0.4 -p -0.4 0 2 -p 0.4 0 2 -p 0.4 0 0.4 -p 2 0 0.4 -p 2 0 -0.4 -p 0.4 0 -0.4 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCFatCross\" :\n      curve -d 1 -p 2 0 1 -p 2 0 -1 -p 1 0 -1 -p 1 0 -2 -p -1 0 -2 -p -1 0 -1 -p -2 0 -1 -p -2 0 1 -p -1 0 1 -p -1 0 2 -p 1 0 2 -p 1 0 1 -p 2 0 1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCCircle\" :\n      circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WC270Arc\" :\n      curve -d 3 -p -0.707107 0 -0.707107 -p -0.570265 0 -0.843948 -p -0.205819 0 -1.040044 -p 0.405223 0 -0.978634 -p 0.881027 0 -0.588697 -p 1.059487 0 0 -p 0.881027 0 0.588697 -p 0.405223 0 0.978634 -p -0.205819 0 1.040044 -p -0.570265 0 0.843948 -p -0.707107 0 0.707107 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 8 -k 8 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WC180Arc\" :\n      circle -c 0 0 0 -nr 0 1 0 -sw -180 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCSpiral\" :\n      curve -d 3 -p 0.474561 0 -1.241626 -p 0.171579 0 -1.214307 -p -0.434384 0 -1.159672 -p -1.124061 0 -0.419971 -p -1.169741 0 0.305922 -p -0.792507 0 1.018176 -p -0.0412486 0 1.262687 -p 0.915809 0 1.006098 -p 1.258635 0 0.364883 -p 1.032378 0 -0.461231 -p 0.352527 0 -0.810017 -p -0.451954 0 -0.43765 -p -0.634527 0 0.208919 -p -0.0751226 0 0.696326 -p 0.292338 0 0.414161 -p 0.476068 0 0.273078 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 13 -k 13 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WC12Pyramid\" :\n      curve -d 1 -p -1 0 0 -p 0 0 1 -p 0 1 0 -p -1 0 0 -p 1 0 0 -p 0 1 0 -p 1 0 0 -p 0 0 1 -p 0 1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCPyramid\" :\n      curve -d 1 -p 0 2 0 -p 1 0 -1 -p -1 0 -1 -p 0 2 0 -p -1 0 1 -p 1 0 1 -p 0 2 0 -p 1 0 -1 -p 1 0 1 -p -1 0 1 -p -1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WC12Spear\" :\n      curve -d 1 -p 0 2 0 -p 0 0 2 -p 0 0 -2 -p 0 2 0 -p -2 0 0 -p 2 0 0 -p 0 2 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCSpear\" :\n      curve -d 1 -p 0 2 0 -p 0 0 2 -p 0 -2 0 -p 0 0 -2 -p 0 2 0 -p 0 -2 0 -p 0 0 0 -p 0 0 2 -p 0 0 -2 -p 2 0 0 -p 0 0 2 -p -2 0 0 -p 0 0 -2 -p 0 0 2 -p 0 0 0 -p -2 0 0 -p 2 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCCube\" :\n      curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n\tcase \"rig101WCCylinder\" :\n\t  curve -d 1 -p 0 0.75 1 -p 0.707107 0.75 0.707107 -p 0.707107 -0.75 0.707107 -p 1 -0.75 0 -p 1 0.75 0 -p 0.707107 0.75 -0.707107 -p 0.707107 -0.75 -0.707107 -p 0 -0.75 -1 -p 0 0.75 -1 -p -0.707107 0.75 -0.707107 -p -0.707107 -0.75 -0.707107 -p -1 -0.75 0 -p -1 0.75 0 -p -0.707107 0.75 0.707107 -p -0.707107 -0.75 0.707107 -p 0 -0.75 1 -p 0 0.75 1 -p -0.707107 0.75 0.707107 -p -0.707107 -0.75 0.707107 -p -1 -0.75 0 -p -1 0.75 0 -p -0.707107 0.75 -0.707107 -p -0.707107 -0.75 -0.707107 -p 0 -0.75 -1 -p 0 0.75 -1 -p 0.707107 0.75 -0.707107 -p 0.707107 -0.75 -0.707107 -p 1 -0.75 0 -p 1 0.75 0 -p 0.707107 0.75 0.707107 -p 0.707107 -0.75 0.707107 -p 0 -0.75 1 -p 0 0.75 1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -n cylinder01_ctrl ;\n\t  group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n\t  break ;\n\n    case \"rig101WCHexagon\" :\n      curve -d 1 -p -0.5 1 0.866025 -p 0.5 1 0.866025 -p 0.5 -1 0.866025 -p 1 -1 0 -p 1 1 0 -p 0.5 1 -0.866025 -p 0.5 -1 -0.866025 -p -0.5 -1 -0.866026 -p -0.5 1 -0.866026 -p -1 1 -1.5885e-007 -p -1 -1 -1.5885e-007 -p -0.5 -1 0.866025 -p -0.5 1 0.866025 -p -1 1 -1.5885e-007 -p -0.5 1 -0.866026 -p 0.5 1 -0.866025 -p 1 1 0 -p 0.5 1 0.866025 -p 0.5 -1 0.866025 -p -0.5 -1 0.866025 -p -1 -1 -1.5885e-007 -p -0.5 -1 -0.866026 -p 0.5 -1 -0.866025 -p 1 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCRombus\" :\n      curve -d 1 -p 0 1 0 -p 1 0 0 -p 0 0 1 -p -1 0 0 -p 0 0 -1 -p 0 1 0 -p 0 0 1 -p 0 -1 0 -p 0 0 -1 -p 1 0 0 -p 0 1 0 -p -1 0 0 -p 0 -1 0 -p 1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCRombus2\":\n\t\tcurve -d 1 -p 0 0 2 -p 0 1 0 -p 0 0 -2 -p 0 -1 0 -p -1 0 0 -p 0 1 0 -p 1 0 0 -p 0 -1 0 -p 0 0 2 -p 1 0 0 -p 0 0 -2 -p -1 0 0 -p 0 0 2 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -n helperRombus;\n\tgroup -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break;\n\n    case \"rig101WCRombus3\":\n\t\tcurve -d 1 -p 0 0 2 -p -0.707107 0.707107 0 -p 0 0 -2 -p 0.707107 0.707107 0 -p 0 0 2 -p 0.707107 -0.707107 0 -p 0 0 -2 -p -0.707107 -0.707107 0 -p 0.707107 -0.707107 0 -p 0.707107 0.707107 0 -p -0.707107 0.707107 0 -p -0.707107 -0.707107 0 -p 0 0 2 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -n helperRombus;\n\tgroup -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break;\n\n    case \"rig101WCDirSingleThin\" :\n      curve -d 1 -p 0 0 1 -p 0 0 -1 -p -1 0 0 -p 0 0 -1 -p 1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCDirSingleNormal\" :\n      curve -d 1 -p 0 0 -1.32 -p -0.99 0 0 -p -0.33 0 0 -p -0.33 0 0.99 -p 0.33 0 0.99 -p 0.33 0 0 -p 0.99 0 0 -p 0 0 -1.32 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCDirSingleFat\" :\n      curve -d 1 -p 0 0 -0.99 -p -0.66 0 0 -p -0.33 0 0 -p -0.33 0 0.66 -p 0.33 0 0.66 -p 0.33 0 0 -p 0.66 0 0 -p 0 0 -0.99 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n \"controller1\" ;\n      break ;\n\n    case \"rig101WCDirDoubleThin\" :\n      curve -d 1 -p 1 0 1 -p 0 0 2 -p -1 0 1 -p 0 0 2 -p 0 0 -2 -p -1 0 -1 -p 0 0 -2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCDirDoubleNormal\" :\n      curve -d 1 -p 0 0 -2.31 -p -0.99 0 -0.99 -p -0.33 0 -0.99 -p -0.33 0 0.99 -p -0.99 0 0.99 -p 0 0 2.31 -p 0.99 0 0.99 -p 0.33 0 0.99 -p 0.33 0 -0.99 -p 0.99 0 -0.99 -p 0 0 -2.31 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCDirDoubleFat\" :\n      curve -d 1 -p 0 0 -1.35 -p -0.66 0 -0.36 -p -0.33 0 -0.36 -p -0.33 0 0.36 -p -0.66 0 0.36 -p 0 0 1.35 -p 0.66 0 0.36 -p 0.33 0 0.36 -p 0.33 0 -0.36 -p 0.66 0 -0.36 -p 0 0 -1.35 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCDirFourThin\" :\n      curve -d 1 -p 1.25 0 -0.5 -p 1.75 0 0 -p 1.25 0 0.5 -p 1.75 0 0 -p -1.75 0 0 -p -1.25 0 -0.5 -p -1.75 0 0 -p -1.25 0 0.5 -p -1.75 0 0 -p 0 0 0 -p 0 0 1.75 -p -0.5 0 1.25 -p 0 0 1.75 -p 0.5 0 1.25 -p 0 0 1.75 -p 0 0 -1.75 -p 0.5 0 -1.25 -p 0 0 -1.75 -p -0.5 0 -1.25 -p 0 0 -1.75 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCDirFourNormal\" :\n      curve -d 1 -p 0 0 -1.98 -p -0.495 0 -1.32 -p -0.165 0 -1.32 -p -0.165 0 -0.165 -p -1.32 0 -0.165 -p -1.32 0 -0.495 -p -1.98 0 0 -p -1.32 0 0.495 -p -1.32 0 0.165 -p -0.165 0 0.165 -p -0.165 0 1.32 -p -0.495 0 1.32 -p 0 0 1.98 -p 0.495 0 1.32 -p 0.165 0 1.32 -p 0.165 0 0.165 -p 1.32 0 0.165 -p 1.32 0 0.495 -p 1.98 0 0 -p 1.32 0 -0.495 -p 1.32 0 -0.165 -p 0.165 0 -0.165 -p 0.165 0 -1.32 -p 0.495 0 -1.32 -p 0 0 -1.98 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCDirFourFat\" :\n      curve -d 1 -p 0 0 -1.1025 -p -0.33 0 -0.6075 -p -0.165 0 -0.6075 -p -0.165 0 -0.165 -p -0.6075 0 -0.165 -p -0.6075 0 -0.33 -p -1.1025 0 0 -p -0.6075 0 0.33 -p -0.6075 0 0.165 -p -0.165 0 0.165 -p -0.165 0 0.6075 -p -0.33 0 0.6075 -p 0 0 1.1025 -p 0.33 0 0.6075 -p 0.165 0 0.6075 -p 0.165 0 0.165 -p 0.6075 0 0.165 -p 0.6075 0 0.33 -p 1.1025 0 0 -p 0.6075 0 -0.33 -p 0.6075 0 -0.165 -p 0.165 0 -0.165 -p 0.165 0 -0.6075 -p 0.33 0 -0.6075 -p 0 0 -1.1025 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n \n    case \"rig101WCDirEight\" :\n      curve -d 1 -p -1.8975 0 0 -p -1.4025 0 0.37125 -p -1.4025 0 0.12375 -p -0.380966 0 0.157801 -p -1.079222 0 0.904213 -p -1.254231 0 0.729204 -p -1.341735 0 1.341735 -p -0.729204 0 1.254231 -p -0.904213 0 1.079222 -p -0.157801 0 0.380966 -p -0.12375 0 1.4025 -p -0.37125 0 1.4025 -p 0 0 1.8975 -p 0.37125 0 1.4025 -p 0.12375 0 1.4025 -p 0.157801 0 0.380966 -p 0.904213 0 1.079222 -p 0.729204 0 1.254231 -p 1.341735 0 1.341735 -p 1.254231 0 0.729204 -p 1.079222 0 0.904213 -p 0.380966 0 0.157801 -p 1.4025 0 0.12375 -p 1.4025 0 0.37125 -p 1.8975 0 0 -p 1.4025 0 -0.37125 -p 1.4025 0 -0.12375 -p 0.380966 0 -0.157801 -p 1.079222 0 -0.904213 -p 1.254231 0 -0.729204 -p 1.341735 0 -1.341735 -p 0.729204 0 -1.254231 -p 0.904213 0 -1.079222 -p 0.157801 0 -0.380966 -p 0.12375 0 -1.4025 -p 0.37125 0 -1.4025 -p 0 0 -1.8975 -p -0.37125 0 -1.4025 -p -0.12375 0 -1.4025 -p -0.157801 0 -0.380966 -p -0.904213 0 -1.079222 -p -0.729204 0 -1.254231 -p -1.341735 0 -1.341735 -p -1.254231 0 -0.729204 -p -1.079222 0 -0.904213 -p -0.380966 0 -0.157801 -p -1.4025 0 -0.12375 -p -1.4025 0 -0.37125 -p -1.8975 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCCone\":\n\t\tcurve -d 1 -p 0.5 -1 0.866025 -p -0.5 -1 0.866025 -p 0 1 0 -p 0.5 -1 0.866025 -p 1 -1 0 -p 0 1 0 -p 0.5 -1 -0.866025 -p 1 -1 0 -p 0 1 0 -p -0.5 -1 -0.866026 -p 0.5 -1 -0.866025 -p 0 1 0 -p -1 -1 -1.5885e-007 -p -0.5 -1 -0.866026 -p 0 1 0 -p -0.5 -1 0.866025 -p -1 -1 -1.5885e-007 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -n helperCone;\n\tgroup -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break;\n\n    case \"rig101WCRot90Thin\" :\n      curve -d 1 -p -1.026019 0 0 -p -0.947961 0 0.392646 -p -0.725413 0 0.725516 -p -0.393028 0 0.947932 -p -0.13006 0 1 -p 0.0107043 0 1.001418 -p -0.339542 0 0.5442 -p 0.0107043 0 1.001418 -p -0.446514 0 1.351664 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCRot90Normal\" :\n      curve -d 1 -p -0.251045 0 1.015808 -p -0.761834 0 0.979696 -p -0.486547 0 0.930468 -p -0.570736 0 0.886448 -p -0.72786 0 0.774834 -p -0.909301 0 0.550655 -p -1.023899 0 0.285854 -p -1.063053 0 9.80765e-009 -p -0.961797 0 8.87346e-009 -p -0.926399 0 0.258619 -p -0.822676 0 0.498232 -p -0.658578 0 0.701014 -p -0.516355 0 0.802034 -p -0.440202 0 0.841857 -p -0.498915 0 0.567734 -p -0.251045 0 1.015808 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCRot90Fat\" :\n      curve -d 1 -p -0.923366 0 0 -p -1.128672 0 0 -p -1.042702 0 0.431934 -p -0.798049 0 0.798033 -p -0.560906 0 0.946236 -p -0.975917 0 1.036319 -p -0.124602 0 1.096506 -p -0.537718 0 0.349716 -p -0.440781 0 0.788659 -p -0.652776 0 0.652998 -p -0.853221 0 0.353358 -p -0.923366 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCRot180Thin\" :\n      curve -d 1 -p -0.446514 0 -1.351664 -p 0.0107043 0 -1.001418 -p -0.339542 0 -0.5442 -p 0.0107043 0 -1.001418 -p -0.13006 0 -1 -p -0.393028 0 -0.947932 -p -0.725413 0 -0.725516 -p -0.947961 0 -0.392646 -p -1.026019 0 0 -p -0.947961 0 0.392646 -p -0.725413 0 0.725516 -p -0.393028 0 0.947932 -p -0.13006 0 1 -p 0 0 1 -p -0.339542 0 0.5442 -p 0 0 1 -p -0.446514 0 1.351664 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCRot180Normal\" :\n      curve -d 1 -p -0.251045 0 -1.015808 -p -0.761834 0 -0.979696 -p -0.486547 0 -0.930468 -p -0.570736 0 -0.886448 -p -0.72786 0 -0.774834 -p -0.909301 0 -0.550655 -p -1.023899 0 -0.285854 -p -1.063053 0 9.80765e-009 -p -1.023899 0 0.285854 -p -0.909301 0 0.550655 -p -0.72786 0 0.774834 -p -0.570736 0 0.886448 -p -0.486547 0 0.930468 -p -0.761834 0 0.979696 -p -0.251045 0 1.015808 -p -0.498915 0 0.567734 -p -0.440202 0 0.841857 -p -0.516355 0 0.802034 -p -0.658578 0 0.701014 -p -0.822676 0 0.498232 -p -0.926399 0 0.258619 -p -0.961797 0 8.87346e-009 -p -0.926399 0 -0.258619 -p -0.822676 0 -0.498232 -p -0.658578 0 -0.701014 -p -0.516355 0 -0.802034 -p -0.440202 0 -0.841857 -p -0.498915 0 -0.567734 -p -0.251045 0 -1.015808 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCRot180Fat\" :\n      curve -d 1 -p -0.124602 0 -1.096506 -p -0.975917 0 -1.036319 -p -0.559059 0 -0.944259 -p -0.798049 0 -0.798033 -p -1.042702 0 -0.431934 -p -1.128672 0 0 -p -1.042702 0 0.431934 -p -0.798049 0 0.798033 -p -0.560906 0 0.946236 -p -0.975917 0 1.036319 -p -0.124602 0 1.096506 -p -0.537718 0 0.349716 -p -0.440781 0 0.788659 -p -0.652776 0 0.652998 -p -0.853221 0 0.353358 -p -0.923366 0 0 -p -0.853221 0 -0.353358 -p -0.652776 0 -0.652998 -p -0.439199 0 -0.785581 -p -0.537718 0 -0.349716 -p -0.124602 0 -1.096506 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCTransform\" :\n\t $circleHelper = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n \"controller1\"`;\n\t string $arrows[] ;\n\t $arrows[0] = `curve -d 1 -p 1.75625 0 0.115973 -p 1.75625 0 -0.170979 -p 2.114939 0 -0.170979 -p 2.114939 0 -0.314454 -p 2.473628 0 -0.0275029 -p 2.114939 0 0.259448 -p 2.114939 0 0.115973 -p 1.75625 0 0.115973 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n helperArrow1` ;\n         setAttr ($arrows[0] + \".overrideEnabled\") 1 ;\n         setAttr ($arrows[0] + \".overrideDisplayType\") 2 ;\n         pickWalk -d down ; TemplateObject ;\n\t $arrows[1] = `curve -d 1 -p 0.143476 0 -1.783753 -p 0.143476 0 -2.142442 -p 0.286951 0 -2.142442 -p 0 0 -2.501131 -p -0.286951 0 -2.142442 -p -0.143476 0 -2.142442 -p -0.143476 0 -1.783753 -p 0.143476 0 -1.783753 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n helperArrow2` ;\n         setAttr ($arrows[1] + \".overrideEnabled\") 1 ;\n         setAttr ($arrows[1] + \".overrideDisplayType\") 2 ;\n         pickWalk -d down ; TemplateObject ;\n\t $arrows[2] = `curve -d 1 -p -1.75625 0 -0.170979 -p -2.114939 0 -0.170979 -p -2.114939 0 -0.314454 -p -2.473628 0 -0.0275029 -p -2.114939 0 0.259448 -p -2.114939 0 0.115973 -p -1.75625 0 0.115973 -p -1.75625 0 -0.170979 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n helperArrow3`;\n         setAttr ($arrows[2] + \".overrideEnabled\") 1 ;\n         setAttr ($arrows[2] + \".overrideDisplayType\") 2 ;\n         pickWalk -d down ; TemplateObject ;\n\t $arrows[3] = `curve -d 1 -p -0.143476 0 1.728747 -p -0.143476 0 2.087436 -p -0.286951 0 2.087436 -p 0 0 2.446125 -p 0.286951 0 2.087436 -p 0.143476 0 2.087436 -p 0.143476 0 1.728747 -p -0.143476 0 1.728747 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n helperArrow4`;\n         setAttr ($arrows[3] + \".overrideEnabled\") 1 ;\n         setAttr ($arrows[3] + \".overrideDisplayType\") 2 ;\n         pickWalk -d down ; TemplateObject ;\n\t string $arrowGRP = `group -n helperArrowsGRP -p $circleHelper $arrows[0] $arrows[1] $arrows[2] $arrows[3]`;\n        select -r $circleHelper ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCArrowsOnBall\" :\n      curve -d 1 -p 0 0.35 -1.001567 -p -0.336638 0.677886 -0.751175 -p -0.0959835 0.677886 -0.751175 -p -0.0959835 0.850458 -0.500783 -p -0.0959835 0.954001 -0.0987656 -p -0.500783 0.850458 -0.0987656 -p -0.751175 0.677886 -0.0987656 -p -0.751175 0.677886 -0.336638 -p -1.001567 0.35 0 -p -0.751175 0.677886 0.336638 -p -0.751175 0.677886 0.0987656 -p -0.500783 0.850458 0.0987656 -p -0.0959835 0.954001 0.0987656 -p -0.0959835 0.850458 0.500783 -p -0.0959835 0.677886 0.751175 -p -0.336638 0.677886 0.751175 -p 0 0.35 1.001567 -p 0.336638 0.677886 0.751175 -p 0.0959835 0.677886 0.751175 -p 0.0959835 0.850458 0.500783 -p 0.0959835 0.954001 0.0987656 -p 0.500783 0.850458 0.0987656 -p 0.751175 0.677886 0.0987656 -p 0.751175 0.677886 0.336638 -p 1.001567 0.35 0 -p 0.751175 0.677886 -0.336638 -p 0.751175 0.677886 -0.0987656 -p 0.500783 0.850458 -0.0987656 -p 0.0959835 0.954001 -0.0987656 -p 0.0959835 0.850458 -0.500783 -p 0.0959835 0.677886 -0.751175 -p 0.336638 0.677886 -0.751175 -p 0 0.35 -1.001567 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n \n    case \"rig101WCSun\" :\n\t string $CONTROLLER1[] = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 16 -ch 1 -n controller1` ;\n\t select -r ($CONTROLLER1[0] + \".cv[0]\") ($CONTROLLER1[0] + \".cv[2]\") ($CONTROLLER1[0] + \".cv[4]\")($CONTROLLER1[0] + \".cv[6]\")($CONTROLLER1[0] + \".cv[8]\")($CONTROLLER1[0] + \".cv[10]\")($CONTROLLER1[0] + \".cv[12]\") ($CONTROLLER1[0] + \".cv[14]\") ;\n\t string $CONTROLCLUSTER[] = `cluster -relative -envelope 1` ;\n\t setAttr ($CONTROLCLUSTER[0] + \"Handle.scale\") 0.5 0.5 0.5 ;\n\t string $CONTROLLER2[] = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 0.25 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1 -n controller1` ;\n\t select -r $CONTROLLER2[0] $CONTROLLER1[0] ; parent ; pickWalk -d up ; DeleteHistory ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCPin\" :\n      curve -d 1 -p 0 0 0 -p 0 0 -1 -p 0 0.5 -1 -p 0 0.5 -0.5 -p 0 1.5 -0.5 -p 0 1.5 -1 -p 0 2.5 -1 -p 0 2.5 1 -p 0 1.5 1 -p 0 1.5 0.5 -p 0 0.5 0.5 -p 0 0.5 1 -p 0 0 1 -p 0 0 0 -p 1 0 0 -p 1 0.5 0 -p 0.5 0.5 0 -p 0.5 1.5 0 -p 1 1.5 0 -p 1 2.5 0 -p -1 2.5 0 -p -1 1.5 0 -p -0.5 1.5 0 -p -0.5 0.5 0 -p -1 0.5 0 -p -1 0 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCJack\" :\n      curve -d 1 -p 0 0 0 -p 0.75 0 0 -p 1 0.25 0 -p 1.25 0 0 -p 1 -0.25 0 -p 0.75 0 0 -p 1 0 0.25 -p 1.25 0 0 -p 1 0 -0.25 -p 1 0.25 0 -p 1 0 0.25 -p 1 -0.25 0 -p 1 0 -0.25 -p 0.75 0 0 -p 0 0 0 -p -0.75 0 0 -p -1 0.25 0 -p -1.25 0 0 -p -1 -0.25 0 -p -0.75 0 0 -p -1 0 0.25 -p -1.25 0 0 -p -1 0 -0.25 -p -1 0.25 0 -p -1 0 0.25 -p -1 -0.25 0 -p -1 0 -0.25 -p -0.75 0 0 -p 0 0 0 -p 0 0.75 0 -p 0 1 -0.25 -p 0 1.25 0 -p 0 1 0.25 -p 0 0.75 0 -p -0.25 1 0 -p 0 1.25 0 -p 0.25 1 0 -p 0 1 0.25 -p -0.25 1 0 -p 0 1 -0.25 -p 0.25 1 0 -p 0 0.75 0 -p 0 0 0 -p 0 -0.75 0 -p 0 -1 -0.25 -p 0 -1.25 0 -p 0 -1 0.25 -p 0 -0.75 0 -p -0.25 -1 0 -p 0 -1.25 0 -p 0.25 -1 0 -p 0 -1 -0.25 -p -0.25 -1 0 -p 0 -1 0.25 -p 0.25 -1 0 -p 0 -0.75 0 -p 0 0 0 -p 0 0 -0.75 -p 0 0.25 -1 -p 0 0 -1.25 -p 0 -0.25 -1 -p 0 0 -0.75 -p -0.25 0 -1 -p 0 0 -1.25 -p 0.25 0 -1 -p 0 0.25 -1 -p -0.25 0 -1 -p 0 -0.25 -1 -p 0.25 0 -1 -p 0 0 -0.75 -p 0 0 0 -p 0 0 0.75 -p 0 0.25 1 -p 0 0 1.25 -p 0 -0.25 1 -p 0 0 0.75 -p -0.25 0 1 -p 0 0 1.25 -p 0.25 0 1 -p 0 0.25 1 -p -0.25 0 1 -p 0 -0.25 1 -p 0.25 0 1 -p 0 0 0.75 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -k 49 -k 50 -k 51 -k 52 -k 53 -k 54 -k 55 -k 56 -k 57 -k 58 -k 59 -k 60 -k 61 -k 62 -k 63 -k 64 -k 65 -k 66 -k 67 -k 68 -k 69 -k 70 -k 71 -k 72 -k 73 -k 74 -k 75 -k 76 -k 77 -k 78 -k 79 -k 80 -k 81 -k 82 -k 83 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCFootprint\" :\n      curve -d 1 -p -0.081122 0 -1.11758 -p 0.390719 0 -0.921584 -p 0.514124 0 -0.616704 -p 0.412496 0 0.0293557 -p 0.86256 0 0.552008 -p 0.920632 0 1.161772 -p 0.775452 0 1.669908 -p 0.38346 0 2.011088 -p -0.131936 0 2.330484 -p -0.552964 0 2.308708 -p -0.654588 0 1.691688 -p -0.57474 0 0.63912 -p -0.364226 0 0.109206 -p -0.531184 0 -0.39893 -p -0.465852 0 -0.841736 -p -0.081122 0 -1.11758 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCHand\" :\n\tstring $CONTROLLERS[] ;\n\t$CONTROLLERS[0] = `curve -d 1 -p -0.718223 0 -0.925311 -p -0.718223 0 0.462656 -p -0.462656 0 0.925311 -p 0 0 0.925311 -p 0.170548 0 0.873409 -p 0.341096 0 0.925311 -p 0.925311 0 0.925311 -p 0.925311 0 0 -p 0.718223 0 -0.462656 -p 0.718223 0 -0.925311 -p 0.457051 0 -1.156639 -p -0.462656 0 -1.156639 -p -0.718223 0 -0.925311 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -n \"controller1\"` ;\n\t$CONTROLLERS[1] = `curve -d 1 -p -0.718223 0 -0.925311 -p -0.718223 0 -2.544605 -p -0.457051 0 -2.544605 -p -0.462656 0 -1.156639 -k 0 -k 1 -k 2 -k 3 -n \"controller1\"` ;\n\t$CONTROLLERS[2] = `curve -d 1 -p -0.326465 0 -1.156639 -p -0.326465 0 -2.775933 -p -0.065293 0 -2.775933 -p -0.065293 0 -1.156639 -k 0 -k 1 -k 2 -k 3 -n \"controller1\"` ;\n\t$CONTROLLERS[3] = `curve -d 1 -p 0.065293 0 -1.156639 -p 0.065293 0 -3.007261 -p 0.326465 0 -3.007261 -p 0.326465 0 -1.156639 -k 0 -k 1 -k 2 -k 3 -n \"controller1\"` ;\n\t$CONTROLLERS[4] = `curve -d 1 -p 0.457051 0 -1.156639 -p 0.457051 0 -2.775933 -p 0.718223 0 -2.775933 -p 0.718223 0 -0.925311 -k 0 -k 1 -k 2 -k 3 -n \"controller1\"` ;\n\t$CONTROLLERS[5] = `curve -d 1 -p 0.925311 0 0 -p 1.156639 0 -0.231328 -p 1.387967 0 -0.693983 -p 1.619294 0 -0.462656 -p 1.387967 0 0.231328 -p 0.925311 0 0.925311 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -n \"controller1\"` ;\n\tselect -r $CONTROLLERS ; \n\tselect -d $CONTROLLERS[0] ; \n\tselect -add $CONTROLLERS[0] ; parent ;\n\tselect -d $CONTROLLERS[0] ;\n\tfor ($ELEMENT in `ls -sl`)\n\t  {\n\t  setAttr -lock true ($ELEMENT + \".t\") ;\n\t  setAttr -lock true ($ELEMENT + \".r\") ;\n\t  setAttr -lock true ($ELEMENT + \".s\") ;\n\t  setAttr -lock true ($ELEMENT + \".v\") ;\n\t  setAttr -e -k false ($ELEMENT + \".tx\") ;\n\t  setAttr -e -k false ($ELEMENT + \".ty\") ;\n\t  setAttr -e -k false ($ELEMENT + \".tz\") ;\n\t  setAttr -e -k false ($ELEMENT + \".rx\") ;\n\t  setAttr -e -k false ($ELEMENT + \".ry\") ;\n\t  setAttr -e -k false ($ELEMENT + \".rz\") ;\n\t  setAttr -e -k false ($ELEMENT + \".sx\") ;\n\t  setAttr -e -k false ($ELEMENT + \".sy\") ;\n\t  setAttr -e -k false ($ELEMENT + \".sz\") ;\n\t  setAttr -e -k false ($ELEMENT + \".v\") ;\n\t  } ;\n\tselect -r $CONTROLLERS[0] ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCNail\" :\n      curve -d 1 -p 0 0 0 -p -2 0 0 -p -2.292893 0 0.707107 -p -3 0 1 -p -3.707107 0 0.707107 -p -4 0 0 -p -3.707107 0 -0.707107 -p -3 0 -1 -p -2.292893 0 -0.707107 -p -2 0 0 -p -2.292893 0 0.707107 -p -3.707107 0 -0.707107 -p -4 0 0 -p -3.707107 0 0.707107 -p -2.292893 0 -0.707107 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WC2Nail\" :\n      curve -d 1 -p 0 0 0 -p -2 0 0 -p -2.292893 0 -0.707107 -p -3 0 -1 -p -3.707107 0 -0.707107 -p -4 0 0 -p -3.707107 0 0.707107 -p -3 0 1 -p -2.292893 0 0.707107 -p -2 0 0 -p -2.292893 0 0.707107 -p -3.707107 0 -0.707107 -p -3 0 -1 -p -2.292893 0 -0.707107 -p -3.707107 0 0.707107 -p -3 0 1 -p -2.292893 0 0.707107 -p -2 0 0 -p 0 0 0 -p 2 0 0 -p 2.292893 0 -0.707107 -p 3 0 -1 -p 3.707107 0 -0.707107 -p 4 0 0 -p 3.707107 0 0.707107 -p 3 0 1 -p 2.292893 0 0.707107 -p 2 0 0 -p 2.292893 0 0.707107 -p 3.707107 0 -0.707107 -p 3 0 -1 -p 2.292893 0 -0.707107 -p 3.707107 0 0.707107 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WC4Nail\" :\n      curve -d 1 -p -2 0 0 -p -2.292893 0 -0.707107 -p -3 0 -1 -p -3.707107 0 -0.707107 -p -4 0 0 -p -3.707107 0 0.707107 -p -3 0 1 -p -2.292893 0 0.707107 -p -2 0 0 -p -2.292893 0 0.707107 -p -3.707107 0 -0.707107 -p -4 0 0 -p -3.707107 0 0.707107 -p -2.292893 0 -0.707107 -p -2 0 0 -p 0 0 0 -p 2 0 0 -p 2.292893 0 0.707107 -p 3 0 1 -p 3.707107 0 0.707107 -p 4 0 0 -p 3.707107 0 -0.707107 -p 3 0 -1 -p 2.292893 0 -0.707107 -p 2 0 0 -p 2.292893 0 0.707107 -p 3.707107 0 -0.707107 -p 4 0 0 -p 3.707107 0 0.707107 -p 2.292893 0 -0.707107 -p 2 0 0 -p 0 0 0 -p 0 0 2 -p -0.707107 0 2.292893 -p -1 0 3 -p -0.707107 0 3.707107 -p 0 0 4 -p 0.707107 0 3.707107 -p 1 0 3 -p 0.707107 0 2.292893 -p 0 0 2 -p 0.707107 0 2.292893 -p -0.707107 0 3.707107 -p 0 0 4 -p 0.707107 0 3.707107 -p -0.707107 0 2.292893 -p 0 0 2 -p 0 0 -2 -p -0.707107 0 -2.292893 -p -1 0 -3 -p -0.707107 0 -3.707107 -p 0 0 -4 -p 0.707107 0 -3.707107 -p 1 0 -3 -p 0.707107 0 -2.292893 -p 0 0 -2 -p 0.707107 0 -2.292893 -p -0.707107 0 -3.707107 -p 0 0 -4 -p 0.707107 0 -3.707107 -p -0.707107 0 -2.292893 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -k 49 -k 50 -k 51 -k 52 -k 53 -k 54 -k 55 -k 56 -k 57 -k 58 -k 59 -k 60 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCSphere\" :\n      curve -d 1 -p 0 0 1 -p 0 0.5 0.866025 -p 0 0.866025 0.5 -p 0 1 0 -p 0 0.866025 -0.5 -p 0 0.5 -0.866025 -p 0 0 -1 -p 0 -0.5 -0.866025 -p 0 -0.866025 -0.5 -p 0 -1 0 -p 0 -0.866025 0.5 -p 0 -0.5 0.866025 -p 0 0 1 -p 0.707107 0 0.707107 -p 1 0 0 -p 0.707107 0 -0.707107 -p 0 0 -1 -p -0.707107 0 -0.707107 -p -1 0 0 -p -0.866025 0.5 0 -p -0.5 0.866025 0 -p 0 1 0 -p 0.5 0.866025 0 -p 0.866025 0.5 0 -p 1 0 0 -p 0.866025 -0.5 0 -p 0.5 -0.866025 0 -p 0 -1 0 -p -0.5 -0.866025 0 -p -0.866025 -0.5 0 -p -1 0 0 -p -0.707107 0 0.707107 -p 0 0 1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -n \"controller1\" ;\n      group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break ;\n\n    case \"rig101WCCog\":\n\t\tstring $cog=`curve -d 3 -p 7.06316e-009 0 -1 -p 0.104714 0 -0.990425 -p 0.314142 0 -0.971274 -p 0.597534 0 -0.821244 -p 0.822435 0 -0.597853 -p 0.96683 0 -0.314057 -p 1.016585 0 -2.28604e-005 -p 0.96683 0 0.314148 -p 0.822435 0 0.597532 -p 0.597534 0 0.822435 -p 0.314142 0 0.96683 -p 1.22886e-008 0 1.016585 -p -0.314142 0 0.96683 -p -0.597534 0 0.822435 -p -0.822435 0 0.597532 -p -0.96683 0 0.314148 -p -1.016585 0 -2.29279e-005 -p -0.96683 0 -0.314057 -p -0.822435 0 -0.597853 -p -0.597534 0 -0.821244 -p -0.314142 0 -0.971274 -p -0.104714 0 -0.990425 -p 7.06316e-009 0 -1 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 20 -k 20 -n helperCog`;\n\t\tselect -r $cog.ep[1] $cog.ep[3] $cog.ep[5] $cog.ep[7] $cog.ep[9] $cog.ep[11] $cog.ep[13] $cog.ep[15] $cog.ep[17] $cog.ep[19];\n\t\tscale -r -p 0cm 0cm 0cm 0.732056 0.732056 0.732056 ;\n\t\tselect -cl;\n\tgroup -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break;\n\n    case \"rig101WCPointer\":\n\t\tcurve -d 3 -p -1.508537 0 0 -p -1.059622 0 -0.316884 -p -0.161791 0 -0.950653 -p -0.231491 0 -0.132891 -p 0.0199252 0 0.0238494 -p 0.843595 0 -0.46025 -p 1.7044 0 -1.130663 -p 1.00832 0 -0.442815 -p 0.512875 0 -0.0222687 -p 1.031578 0 0.508979 -p 1.701544 0 1.119434 -p 0.831393 0 0.447942 -p 0.018681 0 0.000680685 -p -0.212893 0 0.0475119 -p -0.15231 0 0.973132 -p -1.056461 0 0.324377 -p -1.508537 0 0 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 14 -k 14 -n helperPointer;\n\tgroup -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break;\n\n    case \"rig101WCAim\":\n\t\t curve -d 1 -p 0 0 1 -p 0 0 -1 -p 0 2 0 -p 0 -2 0 -p 0 0 -1 -p 1 0 0 -p -1 0 0 -p 0 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n helperAim;\n\t  group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break;\n\n    case \"rig101WCAim2\":\n\t\t curve -d 1 -p 0 0 1 -p 0 0 -1 -p 0 2 0 -p 0 -2 0 -p 0 0 -1 -p 2 0 0 -p -2 0 0 -p 0 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n helperAim;\n\tgroup -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n    group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n    break;\n\n    case \"rig101WCDumbell\":\n\t\tcurve -d 1 -p -1.207536 0 0.0254483 -p -1.123549 -0.202763 0.0254483 -p -0.920786 -0.28675 0.0254483 -p -0.718023 -0.202763 0.0254483 -p -0.63504 -0.00242492 0.0254483 -p 0.634091 0 0.0254483 -p 0.718023 -0.202763 0.0254483 -p 0.920786 -0.28675 0.0254483 -p 1.123549 -0.202763 0.0254483 -p 1.207536 0 0.0254483 -p 1.123549 0.202763 0.0254483 -p 0.920786 0.28675 0.0254483 -p 0.718023 0.202763 0.0254483 -p 0.634091 0 0.0254483 -p -0.63504 -0.00242492 0.0254483 -p -0.718023 0.202763 0.0254483 -p -0.920786 0.28675 0.0254483 -p -1.123549 0.202763 0.0254483 -p -1.207536 0 0.0254483 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -n helperDumbell;\n\t    group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n        group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break;\n\n    case \"rig101WCVision\":\n\t\tcurve -d 1 -p -0.870728 -0.000469542 -0.28747 -p -0.667456 -0.000469542 -0.203272 -p -0.583258 -0.000469542 0 -p -0.667456 -0.000469542 0.203272 -p -0.870728 -0.000469542 0.28747 -p -1.073999 -0.000469542 0.203272 -p -1.158197 -0.000469542 0 -p -1.073999 -0.000469542 -0.203272 -p -0.870728 -0.000469542 -0.28747 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -n helperVisionR;\n\t\tCenterPivot;\n\t\tcurve -d 1 -p 0.870728 -0.000469542 -0.28747 -p 1.073999 -0.000469542 -0.203272 -p 1.158197 -0.000469542 0 -p 1.073999 -0.000469542 0.203272 -p 0.870728 -0.000469542 0.28747 -p 0.667456 -0.000469542 0.203272 -p 0.583258 -0.000469542 0 -p 0.667456 -0.000469542 -0.203272 -p 0.870728 -0.000469542 -0.28747 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -n helperVisionL;\n\t\tCenterPivot;\n\t\tcurve -d 1 -p -0.583258 -0.000469542 0 -p 0.583258 -0.000469542 0 -k 0 -k 1 -n helperVision;\n\t\tparent helperVisionL helperVisionR helperVision;\n\t\tselect helperVision;\n\t  group -n \"controller1_Grp\"; xform -os -piv 0 0 0;\n      group -n \"controller1_Pos\"; xform -os -piv 0 0 0;\n      break;\n\n    } ;\n\n  } ;\n\n\n\n/////////////////////////////////\n//  llWireControllers\t    //\n/////////////////////////////////\n// \n// MAIN PROC\n//\n/////////////////////////////////\n\nglobal proc rig101wireControllers ()\n  {\n\n  if (`window -ex rig101WCWindow`) deleteUI rig101WCWindow ;\n\n  window\n    -wh 300 50\n    -title \"Rigging 101 wireControllers\"\n    -minimizeButton 0\n    -maximizeButton 0\n    -rtf true \n    -s 1\n  rig101WCWindow ;\n\nstring $tabs = `tabLayout -innerMarginWidth 5 -innerMarginHeight 5`;\n\nstring $flatShapes = `rowColumnLayout -numberOfColumns 4`;\n\tbutton -l \"Triangle\" -c \"rig101WCButtonPressed rig101WCTriangle\"; \n\tbutton -l \"Square\" -c \"rig101WCButtonPressed rig101WCSquare\" ;\n\tbutton -l \"Angle\" -c \"rig101WCButtonPressed rig101WCAngle\" ;\n\tbutton -l \"Cross\" -c \"rig101WCButtonPressed rig101WCCross\" ;\n\tbutton -l \"Fat Cross\" -c \"rig101WCButtonPressed rig101WCFatCross\" ;\n\tbutton -l \"Circle\" -c \"rig101WCButtonPressed rig101WCCircle\" ;\n\tbutton -l \"270 Arc\" -c \"rig101WCButtonPressed rig101WC270Arc\" ;\n\tbutton -l \"180 Arc\" -c \"rig101WCButtonPressed rig101WC180Arc\" ;\n\tbutton -l \"Spiral\" -c \"rig101WCButtonPressed rig101WCSpiral\" ;\n\tsetParent ..;\n\nstring $prisms = `rowColumnLayout -numberOfColumns 4`;\n\tbutton -l \"1/2 Pyramid\" -c \"rig101WCButtonPressed rig101WC12Pyramid\" ;\n\tbutton -l \"Pyramid\" -c \"rig101WCButtonPressed rig101WCPyramid\" ;\n\tbutton -l \"1/2 Spear\" -c \"rig101WCButtonPressed rig101WC12Spear\" ;\n\tbutton -l \"Spear\" -c \"rig101WCButtonPressed rig101WCSpear\" ;\n\tbutton -l \"Cube\" -c \"rig101WCButtonPressed rig101WCCube\" ;\n\tbutton -l \"Sphere\" -c \"rig101WCButtonPressed rig101WCSphere\" ;\n\tbutton -l \"Hexagon\" -c \"rig101WCButtonPressed rig101WCHexagon\" ;\n\tbutton -l \"Rombus\" -c \"rig101WCButtonPressed rig101WCRombus\" ; \t\t\n\tbutton -l \"Rombus2\" -c \"rig101WCButtonPressed rig101WCRombus2\" ; \t\n\tbutton -l \"Rombus3\" -c \"rig101WCButtonPressed rig101WCRombus3\" ; \n\tbutton -l \"Cone\" -c \"rig101WCButtonPressed rig101WCCone\" ;\n\tbutton -l \"Cylinder\" -c \"rig101WCButtonPressed rig101WCCylinder\";\n\tsetParent ..;\n\nstring $directionArrows = `rowColumnLayout -numberOfColumns 4`;\n\tbutton -l \"Single Thin\" -c \"rig101WCButtonPressed rig101WCDirSingleThin\" ;\n\tbutton -l \"Single Normal\" -c \"rig101WCButtonPressed rig101WCDirSingleNormal\" ;\n\tbutton -l \"Single Fat\" -c \"rig101WCButtonPressed rig101WCDirSingleFat\" ;\n\tbutton -l \"Double Thin\" -c \"rig101WCButtonPressed rig101WCDirDoubleThin\" ;\n\tbutton -l \"Double Normal\" -c \"rig101WCButtonPressed rig101WCDirDoubleNormal\" ;\n\tbutton -l \"Double Fat\" -c \"rig101WCButtonPressed rig101WCDirDoubleFat\" ;\n\tbutton -l \"Four Thin\" -c \"rig101WCButtonPressed rig101WCDirFourThin\" ;\n\tbutton -l \"Four Normal\" -c \"rig101WCButtonPressed rig101WCDirFourNormal\" ;\n\tbutton -l \"Four Fat\" -c \"rig101WCButtonPressed rig101WCDirFourFat\" ;\n\tbutton -l \"Eight\" -c \"rig101WCButtonPressed rig101WCDirEight\" ;\n\tsetParent ..;\n\n\nstring $rotationArrows = `rowColumnLayout -numberOfColumns 4`;\n\tbutton -l \"90 Thin\" -c \"rig101WCButtonPressed rig101WCRot90Thin\" ;\n\tbutton -l \"90 Normal\" -c \"rig101WCButtonPressed rig101WCRot90Normal\" ;\n\tbutton -l \"90 Fat\" -c \"rig101WCButtonPressed rig101WCRot90Fat\" ;\n\tbutton -l \"180 Thin\" -c \"rig101WCButtonPressed rig101WCRot180Thin\" ;\n\tbutton -l \"180 Normal\" -c \"rig101WCButtonPressed rig101WCRot180Normal\" ;\n\tbutton -l \"180 Fat\" -c \"rig101WCButtonPressed rig101WCRot180Fat\" ;\n\tsetParent ..;\n\nstring $char = `rowColumnLayout -numberOfColumns 4`;\n\tbutton -l \"Transform\" -c \"rig101WCButtonPressed rig101WCTransform\" ;\n\tbutton -l \"Footprint\" -c \"rig101WCButtonPressed rig101WCFootprint\" ;\n\tbutton -l \"Hand\" -c \"rig101WCButtonPressed rig101WCHand\" ;\n\tbutton -l \"Vision\" -c \"rig101WCButtonPressed rig101WCVision\" ;\n\tsetParent ..;\n\nstring $special = `rowColumnLayout -numberOfColumns 4`;\n\tbutton -l \"Arrows on Ball\" -c \"rig101WCButtonPressed rig101WCArrowsOnBall\" ;\n\tbutton -l \"Cog\" -c \"rig101WCButtonPressed rig101WCCog\" ;\n\tbutton -l \"Sun\" -c \"rig101WCButtonPressed rig101WCSun\" ;\n\tbutton -l \"Pin\" -c \"rig101WCButtonPressed rig101WCPin\" ;\n\tbutton -l \"Jack\" -c \"rig101WCButtonPressed rig101WCJack\" ;\n\tbutton -l \"Nail\" -c \"rig101WCButtonPressed rig101WCNail\" ;\n\tbutton -l \"Double Nail\" -c \"rig101WCButtonPressed rig101WC2Nail\" ;\n\tbutton -l \"Four Nails\" -c \"rig101WCButtonPressed rig101WC4Nail\" ;\n\tbutton -l \"Dumbell\" -c \"rig101WCButtonPressed rig101WCDumbell\" ;\n\tbutton -l \"Pointer\" -c \"rig101WCButtonPressed rig101WCPointer\" ;\n\tbutton -l \"Aim\" -c \"rig101WCButtonPressed rig101WCAim\" ;\n\tbutton -l \"Aim2\" -c \"rig101WCButtonPressed rig101WCAim2\" ;\n\tsetParent ..;\n\ntabLayout -edit\t-tabLabel $flatShapes \"Flat Shapes\" -tabLabel $prisms \"Prisms\" -tabLabel $directionArrows \"Direction Arrows\"\n\t\t-tabLabel $rotationArrows \"Rotation Arrows\" -tabLabel $char \"Char\" -tabLabel $special \"Special\"\n \t\t\t$tabs;\n\n  \n  showWindow rig101WCWindow ;\n\n  } ;\n  \nrig101wireControllers\n  " 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "zeroOut" 
        -enableBackground 0
        -align "center" 
        -label "zeroOut" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "zeroOut" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nselCtrl= cmds.ls(sl=1)\nnumCtrl= len(selCtrl)\n\nfor each in range(numCtrl):\n    sdkGrp= cmds.group(n= '%s_sdk' % selCtrl[each], em=1)\n    alignGrp= cmds.group(n= '%s_align' % selCtrl[each], em=0)\n    spaceGrp= cmds.group(n= '%s_space' % selCtrl[each], em=0)\n    snapGrp= cmds.parentConstraint(selCtrl[each], spaceGrp, mo=0)\n    cmds.delete(snapGrp)\n    cmds.select(cl=1)\n    cmds.parent(selCtrl[each], sdkGrp)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select one or more targets followed by the object to constrain." 
        -enableBackground 0
        -align "center" 
        -label "Parent" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "parentConstraint.png" 
        -image1 "parentConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "doCreateParentConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "headsUpMessage \"First, select Source, THEN the Target...\";\n\nstring $selObj[] = `ls -sl`;\n\nstring $ptCsObj[] = `parentConstraint $selObj[1] $selObj[0]`;\n\nstring $findPtCns[] = `listRelatives -type parentConstraint $selObj[0]`;\n\nselect $findPtCns; doDelete;\n\nselect $selObj[1];" 
        -enableBackground 0
        -align "center" 
        -label "Match Transform" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "MTT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "headsUpMessage \"First, select Source, THEN the Target...\";\n\nstring $selObj[] = `ls -sl`;\n\nstring $ptCsObj[] = `parentConstraint $selObj[1] $selObj[0]`;\n\nstring $findPtCns[] = `listRelatives -type parentConstraint $selObj[0]`;\n\nselect $findPtCns; doDelete;\n\nselect $selObj[1];" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "AimSelection" 
        -enableBackground 0
        -align "center" 
        -label "Aim Selection" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Aim" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nselLoc= cmds.ls(sl=1)\ntmpAim= cmds.aimConstraint(selLoc[1], selLoc[0], mo=0)\ndeleteAim= cmds.delete(tmpAim)\nloc1= cmds.select(selLoc[0])" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select one or more targets followed by the object to constrain." 
        -enableBackground 0
        -align "center" 
        -label "Point On Poly" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "pointOnPolyConstraint.png" 
        -image1 "pointOnPolyConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "doCreatePointOnPolyConstraintArgList 1 { \"0\",\"0\",\"0\",\"1\",\"\",\"1\" };" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select one or more targets followed by the object to constrain." 
        -enableBackground 0
        -align "center" 
        -label "Orient" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "orientConstraint.png" 
        -image1 "orientConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "doCreateOrientConstraintArgList 1 { \"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select one or more targets followed by the object to constrain." 
        -enableBackground 0
        -align "center" 
        -label "Scale" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "scaleConstraint.png" 
        -image1 "scaleConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "doCreateScaleConstraintArgList 1 { \"0\",\"1\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Rename objects in scene" 
        -enableBackground 0
        -align "center" 
        -label "Search and Replace Names..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "SaRN" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "performSearchReplaceNames 1" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "ZooRenamer" 
        -enableBackground 0
        -align "center" 
        -label "ZooRenamer" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "ZooR" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//\n// zooRenamer\n//\n// Created by Hamish McKenzie zootoolbox@googlegroups.com\n// Created : 4 August 2002\n//\n// Description:\n// makes renaming heirarchies a little less painful...\n// the copy/paste heirarchy function, copies the names of\n// one heirarchy to another.\n//\n// Usage:\n//  assign this function to a key press:\n//\tzooRenamer\n//\n\n\nzooRenamerUtils;\nzooUtils;\n\n\nglobal proc zooRenamer () {\n\tstring $selObjs[] = `ls -sl`;\n\tstring $windowName = \"zooRenamerWindow\";\n\tstring $windowTitle = \"zooRenamer v\" + `zooRenamerInfo version` + \"  ::macaroniKazoo::\";\n\n\tif ( `window -exists $windowName` ) deleteUI $windowName;\n\twindow -t $windowTitle -resizeToFitChildren 1 -maximizeButton 0 -sizeable 1 $windowName;\n\t\tscriptJob -p $windowName -e \"SelectionChanged\" \"zooRenamerUIControls update\";\n\t\tmenuBarLayout;\n\t\t\tmenu -l \"Duplicate Names\";\n\t\t\t\tmenuItem -l \"List Duplicate Names\" -ann \"prints a list of nodes that have the same leaf name\" -c( \"print `zooListDuplicateNames`;\" );\n\t\t\t\tmenuItem -l \"Resolve Duplicate Names\" -ann \"automatically resolves duplicate names by appending a number to the clashing node's name\" -c( \"zooResolveDuplicateNames;\" );\n\t\t\t\tmenuItem -d 1;\n\t\t\t\tmenuItem -l \"Name Shapes Properly\" -ann \"renames all shape nodes in the scene properly\" -c( \"zooNameShapesProperly;\" );\n\t\t\tmenu -l \"Shelf\";\n\t\t\t\tmenuItem -l \"Install Shelf Button\" -c( \"zooRenamerInstallShelfButton;\" );\n\t\t\tmenu -l \"Help\";\n\t\t\t\tmenuItem -l \"Help...\" -c( \"zooHelp zooRenamer 1;\" );\n\n\t\tcolumnLayout -adjustableColumn true -rowSpacing 5 zooRenamerLeftColumn;\n\t\t\tradioCollection zooRenamerRadio;\n\t\t\t$form = `formLayout`;\n\t\t\t\tradioButton -label \"Heirarchy\" -align \"left\" -sl zooRenamerRadioHeirarchy;\n\t\t\t\tradioButton -label \"Selected\" -align \"left\"  zooRenamerRadioSelected;\n\n\t\t\t\tstring $text02 = `text -align \"left\" -label \"Prefix:\"`;\n\t\t\t\ttextField -ed 1 -text \"\" -ec( \"zooRenamerUIControls prefix;\" ) -cc( \"zooRenamerUIControls update;\" ) zooRenamerPrefix;\n\t\t\t\tbutton -label \"Rename\" -c( \"zooRenamerUIControls prefix;\" ) zooRenamerButtonPrefix;\n\n\t\t\t\tstring $text03 = `text -align \"left\" -label \"Suffix:\"`;\n\t\t\t\ttextField -ed 1 -text \"\" -ec( \"zooRenamerUIControls suffix;\" ) -cc( \"zooRenamerUIControls update;\" ) zooRenamerSuffix;\n\t\t\t\tbutton -label \"Rename\" -c( \"zooRenamerUIControls suffix;\" ) zooRenamerButtonSuffix;\n\n\t\t\t\tstring $txSch = `text -align \"left\" -label \"Search:\"`;\n\t\t\t\tstring $txRpl = `text -align \"left\" -label \"Replace:\"`;\n\n\t\t\t\ttextField -ed 1 -text \"\" -cc( \"zooRenamerUIControls update;\" ) zooRenamerSearch;\n\t\t\t\tstring $text04 = `text -align \"left\" -l \"->\"`;\n\t\t\t\ttextField -ed 1 -text \"\" -ec( \"zooRenamerUIControls replace;\" ) -cc( \"zooRenamerUIControls update;\" ) zooRenamerReplace;\n\t\t\t\tbutton -label \"Rename\" -c( \"zooRenamerUIControls replace;\" ) zooRenamerButtonSearch;\n\n\t\t\t\tstring $text05 = `text -align \"left\" -label \"Numerate:\"`;\n\t\t\t\ttextField -tx \"#_%\" -ec( \"zooRenamerUIControls replace;\" ) -cc( \"zooRenamerUIControls update;\" ) zooRenamerNumTemplate;\n\t\t\t\tintField -v 0 -w 25 zooRenamerNumStart;\n\t\t\t\tintField -v 3 -w 25 zooRenamerNumPad;\n\t\t\t\tstring $text05a = `text -l \"start/pad:\"`;\n\t\t\t\tbutton -label \"Rename\" -c( \"zooRenamerUIControls numerate;\" ) zooRenamerButtonNumerate;\n\n\t\t\t\tstring $text06 = `text -align \"left\" -label \"Copy Paste Heirarchy Names\"`;\n\t\t\t\tbutton -label \"Copy/Paste\" -c( \"zooCopyPasteHeirarchyNames \\\"\\\" \\\"\\\" \\\"\\\";\" ) zooRenamerButtonCopyPaste;\n\n\t\t\t\tbutton -label \"to UPPER case\" -c( \"zooRenamerUIControls toupper;\" ) zooRenamerButtonToupper;\n\t\t\t\tbutton -label \"to lower case\" -c( \"zooRenamerUIControls tolower;\" ) zooRenamerButtonTolower;\n\n\t\t\t\tstring $image = `image -width 225 -height 8 -backgroundColor ((float)96/255) ((float)100/255) ((float)146/255) -image(zooGetFileLocation(zooListEnv(\"XBMLANGPATH\"),\"zoo_sig\",\"tga\") +\"zoo_sig.tga\" )`;\n\t\t\t\tsetParent..;\n\t\tsetParent..;\n\n\tformLayout -e\n\t\t-af zooRenamerRadioHeirarchy \"top\"\t0\n\t\t-af zooRenamerRadioHeirarchy \"left\"\t2\n\n\t\t-af zooRenamerRadioSelected \"top\" 0\n\t\t-ap zooRenamerRadioSelected \"left\" -20 50\n\n\t\t-ac $text02 \"top\" 5 zooRenamerRadioSelected\n\t\t-af $text02 \"left\" 2\n\n\t\t-ac zooRenamerPrefix \"top\" 2 zooRenamerRadioSelected\n\t\t-ac zooRenamerPrefix \"left\" 2 $text02\n\t\t-ac zooRenamerPrefix \"right\" 2 zooRenamerButtonPrefix\n\n\t\t-ac zooRenamerButtonPrefix \"top\" 2 zooRenamerRadioSelected\n\t\t-af zooRenamerButtonPrefix \"right\" 2\n\n\t\t-ac $text03 \"top\" 5 zooRenamerPrefix\n\t\t-af $text03 \"left\" 2\n\n\t\t-ac zooRenamerSuffix \"top\" 2 zooRenamerPrefix\n\t\t-ac zooRenamerSuffix \"left\" 2 $text03\n\t\t-ac zooRenamerSuffix \"right\" 2 zooRenamerButtonSuffix\n\n\t\t-ac zooRenamerButtonSuffix \"top\" 2 zooRenamerPrefix\n\t\t-af zooRenamerButtonSuffix \"right\" 2\n\n\t\t-ac $txSch \"top\" 2 zooRenamerSuffix\n\t\t-af $txSch \"left\" 2\n\n\t\t-ac $txRpl \"top\" 2 zooRenamerSuffix\n\t\t-ap $txRpl \"left\" 15 38\n\t\t-af $txRpl \"right\" 2\n\n\t\t-ac zooRenamerSearch \"top\" 1 $txSch\n\t\t-af zooRenamerSearch \"left\" 2\n\t\t-ap zooRenamerSearch \"right\" 0 38\n\n\t\t-ac $text04 \"top\" 5 $txSch\n\t\t-ac $text04 \"left\" 2 zooRenamerSearch\n\n\t\t-ac zooRenamerReplace \"top\" 1 $txSch\n\t\t-ac zooRenamerReplace \"left\" 1 $text04\n\t\t-ac zooRenamerReplace \"right\"\t2 zooRenamerButtonSearch\n\n\t\t-ac zooRenamerButtonSearch \"top\" 1 $txSch\n\t\t-af zooRenamerButtonSearch \"right\" 2\n\n\t\t-ac $text05 \"top\" 5 zooRenamerSearch\n\t\t-af $text05 \"left\" 2\n\n\t\t-ac zooRenamerNumTemplate \"top\" 2 zooRenamerSearch\n\t\t-ac zooRenamerNumTemplate \"left\" 2 $text05\n\t\t-ac zooRenamerNumTemplate \"right\" 2 $text05a\n\n\t\t-ac $text05a \"top\" 5 zooRenamerSearch\n\t\t-ac $text05a \"right\" 2 zooRenamerNumStart\n\n\t\t-ac zooRenamerNumStart \"top\" 2 zooRenamerSearch\n\t\t-ac zooRenamerNumStart \"right\" 0 zooRenamerNumPad\n\n\t\t-ac zooRenamerNumPad \"top\" 2 zooRenamerSearch\n\t\t-ac zooRenamerNumPad \"right\" 2 zooRenamerButtonNumerate\n\n\t\t-ac zooRenamerButtonNumerate \"top\" 2 zooRenamerSearch\n\t\t-af zooRenamerButtonNumerate \"right\" 2\n\n\t\t-ac $text06 \"top\" 5 zooRenamerButtonNumerate\n\t\t-af $text06 \"left\" 2\n\n\t\t-ac zooRenamerButtonCopyPaste \"top\" 3 zooRenamerButtonNumerate\n\t\t-ac zooRenamerButtonCopyPaste \"left\" 2 $text06\n\t\t-af zooRenamerButtonCopyPaste \"right\" 2\n\n\t\t-ac zooRenamerButtonToupper \"top\" 2 zooRenamerButtonCopyPaste\n\t\t-af zooRenamerButtonToupper \"left\" 2\n\t\t-ap zooRenamerButtonToupper \"right\" 1 50\n\t\t-ac zooRenamerButtonToupper \"bottom\" 2 $image\n\n\t\t-ac zooRenamerButtonTolower \"top\" 2 zooRenamerButtonCopyPaste\n\t\t-ac zooRenamerButtonTolower \"left\" 1 zooRenamerButtonToupper\n\t\t-af zooRenamerButtonTolower \"right\" 2\n\t\t-ac zooRenamerButtonTolower \"bottom\" 2 $image\n\n\t\t-af $image \"left\" 2\n\t\t-af $image \"right\" 2\n\t\t-af $image \"bottom\" 2\n\t\t$form;\n\n\tpopupMenu -p $image -b 1 -pmc ( \"showHelp -a \\\"http://www.macaronikazoo.com/\\\"\" );\n\tshowWindow $windowName;\n\tif ( `size $selObjs` > 0 ) zooRenamerUIControls update;\n\tzooRenamerInstallShelfPopup;\n\t}\n\n\nglobal proc zooRenamerUIControls ( string $function ) {\n\tswitch ( $function ) {\n\t\tcase \"update\":\n\t\t\tstring $selObjs[] = `ls -sl`;\n\t\t\tif ( `size $selObjs` != 2 ) button -e -en 0 zooRenamerButtonCopyPaste;\n\t\t\telse button -e -en 1 zooRenamerButtonCopyPaste;\n\t\t\tbreak;\n\n\t\t//i use the selection method, because this way, maya always gives proper path names to teh objects - even if its parent's name changes, and hence, alters the object path name\n\t\tcase \"prefix\":\n\t\t\tselect -r -ne `zooRenamerGetClients`;\n\n\t\t\tstring $prefix = `textField -q -tx zooRenamerPrefix`;\n\t\t\tzooRenamerApplyFuctions prefix $prefix n;\n\t\t\tbreak;\n\n\t\tcase \"suffix\":\n\t\t\tselect -r -ne `zooRenamerGetClients`;\n\n\t\t\tstring $suffix = `textField -q -tx zooRenamerSuffix`;\n\t\t\tzooRenamerApplyFuctions suffix $suffix n;\n\t\t\tbreak;\n\n\t\tcase \"replace\":\n\t\t\tselect -r -ne `zooRenamerGetClients`;\n\n\t\t\tstring $search = `textField -q -tx zooRenamerSearch`;\n\t\t\tstring $replace = `textField -q -tx zooRenamerReplace`;\n\n\t\t\tzooRenamerApplyFuctions replace $search $replace;\n\t\t\tbreak;\n\n\t\tcase \"toupper\":\n\t\t\tselect -r -ne `zooRenamerGetClients`;\n\t\t\tzooRenamerApplyFuctions toupper n n;\n\t\t\tbreak;\n\n\t\tcase \"tolower\":\n\t\t\tselect -r -ne `zooRenamerGetClients`;\n\t\t\tzooRenamerApplyFuctions tolower n n;\n\t\t\tbreak;\n\n\t\tcase \"numerate\":\n\t\t\tstring $template = `textField -q -tx zooRenamerNumTemplate`;\n\t\t\tint $start = `intField -q -v zooRenamerNumStart`;\n\t\t\tint $pad = `intField -q -v zooRenamerNumPad`;\n\n\t\t\tselect -r -ne `zooRenamerGetClients`;\n\t\t\tzooNumerateObjs `ls -sl` $template $start $pad;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\nglobal proc string[] zooRenamerGetClients () {\n\tstring $return[] = {};\n\tstring $mode = `radioCollection -q -sl zooRenamerRadio`;\n\n\tif ( $mode == \"zooRenamerRadioHeirarchy\" ) {\n\t\tstring $selObjs[] = `ls -ap -sl`;\n\t\t$return = `listRelatives -ad -pa -type transform -type joint $selObjs`;\n\n\t\tfor( $obj in $selObjs ) $return[( `size $return` )] = $obj;\n\t\t}\n\telse $return = `ls -l -sl`;\n\n\treturn $return;\n\t}\n\n\n//installs a shelf buttons for zooTriggered on the current shelf\nglobal proc zooRenamerInstallShelfButton() {\n\tzooShelveIt;\n\tstring $button = `zooInstallShelfButton zooRenamer`;\n\tstring $image = \"zooRenamer.xpm\";\n\tstring $cmd = \"zooRenamer;\";\n\n\tshelfButton -e -image1 $image -label \"zooRenamer - mass renaming tool\" -ann \"mass renaming tool - right click for additional options\" -c $cmd $button;\n\tzooRenamerInstallShelfPopup;\n\t}\n\n\nglobal proc zooRenamerInstallShelfPopup() {\n\tzooShelveIt;\n\tstring $buttons[] = `zooGetShelfButtonAll zooRenamer`;\n\tfor( $button in $buttons ) if( `control -ex $button` ) if ( !`shelfButton -q -numberOfPopupMenus $button` ) {\n\t\tpopupMenu -p $button;\n\t\tmenuItem -l \"list duplicate node names\" -c( \"print `zooListDuplicateNames`;\" );\n\t\tmenuItem -l \"resolve duplicate node names\" -c( \"print `zooResolveDuplicateNames`;\" );\n\t\tmenuItem -d 1;\n\t\tmenuItem -l \"name shape nodes properly\" -c( \"print `zooNameShapesProperly`;\" );\n\t\t}\n\t}\n\n\nglobal proc string zooRenamerInfo ( string $function ) {\n\tstring $creationDate = \"04 August 2002\";\n\tstring $currentVersion = \"2.06.11\";\n\n\tif ( $function == \"created\" ) return $creationDate;\n\tif ( $function == \"version\" ) return $currentVersion;\n\treturn \"\";\n\t}\n\n\n//these dependencies allow the zooZipScript to package this script easily for distribution\nglobal proc string[] zooRenamerDependencies( string $mode ) {\n\tstring $melDependencies[] = {};\n\tstring $iconDependencies[] = {};\n\tstring $helpDependencies[] = {};\n\n\t$melDependencies[( `size $melDependencies` )] = \"zooRenamerUtils\";\n\t$melDependencies[( `size $melDependencies` )] = \"zooStrUtils\";\n\t$melDependencies[( `size $melDependencies` )] = \"zooUtils\";\n\t$helpDependencies[( `size $helpDependencies` )] = \"zooRenamer_help\";\n\t$iconDependencies[( `size $iconDependencies` )] = \"zoo_sig.tga\";\n\t$iconDependencies[( `size $iconDependencies` )] = \"zooRenamer.xpm\";\n\n\tif( $mode == \"-scripts\" ) return $melDependencies;\n\tif( $mode == \"-icons\" ) return $iconDependencies;\n\tif( $mode == \"-docs\" ) return $helpDependencies;\n\treturn {};\n\t}\n\n\n//zoo.end\n\nzooRenamer" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "RenameDeformers" 
        -enableBackground 0
        -align "center" 
        -label "RenameDeformers" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "RnDF" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\n# Get Deformers Lists\ndeformersInput= cmds.ls( type= (\"nonLinear\", \"ffd\", \"wrap\", \"wire\", \"cluster\", \"sculpt\", \"softMod\", \"jiggle\", \"skinCluster\") )\ndeformers= []\ndeformSets= []\nfor each in deformersInput:\n    xform= cmds.deformer( each, q=1, dt=1)[0]\n    deformers.append( xform )\n    set= cmds.listConnections( each, type= 'objectSet' )[0]\n    deformSets.append( set )\n\n# Get new name to Deformer Input\nrenameItem= []\nrenameSet= []\nnewInput= []\nfor each in deformersInput :\n    digit= each[-1].isdigit()\n    if digit == True:\n        renameItem.append(each)\n    else:\n        pass\n        \nfor each in deformSets :\n    underscore= each.find('_')\n    if underscore == -1 :\n        renameSet.append(each)\n    else:\n        pass\n        \nfor each in renameItem:\n    name= each.split()[0]\n    newName= ''.join(i for i in name if not i.isdigit())\n    newInput.append(newName)\n\nsourceList=[]    \nfor each in renameSet:\n    source= cmds.listConnections( each, s=1  )\n    xform= cmds.ls( source, typ='transform' )[0]\n    sourceList.append( xform )\n\n# Rename Deformers Input\nif len(renameItem) > 0 :\n    for i, each in enumerate( renameItem ):\n        newDeformersInput= cmds.rename( each, '%s_%s' % (sourceList[i], newInput[i] ) )\nelse:\n    cmds.warning( 'All Inputs Have Correct Name!!' )\n# Rename Deformers Set\nif len(renameSet) > 0 :\n    for i, each in enumerate(renameSet):\n        cmds.rename( each, '%s_%sSet' % ( sourceList[i], newInput[i] ) )\nelse:\n    cmds.warning( 'All Sets Have Correct Name!!' )" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -align "center" 
        -label "Freeze Transformations" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "FT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "FreezeTransformations" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -align "center" 
        -label "Center Pivot" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "CP" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CenterPivot" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Delete construction history on the selected object(s)" 
        -enableBackground 0
        -align "center" 
        -label "History" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Hist" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconEdit.png" 
        -image1 "menuIconEdit.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DeleteHistory" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Make connections between object attributes" 
        -enableBackground 0
        -align "center" 
        -label "Connection Editor" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "CE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ConnectionEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit deformer set membership" 
        -enableBackground 0
        -align "center" 
        -label "Deformer Sets" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "DS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DeformerSetEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit various component values for the selected object(s)" 
        -enableBackground 0
        -align "center" 
        -label "Component Editor" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "CpEd" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ComponentEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a curve on the grid or live surface specifying edit points" 
        -enableBackground 0
        -align "center" 
        -label "EP Curve Tool" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "curveEP.png" 
        -image1 "curveEP.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "EPCurveTool" 
        -sourceType "mel" 
        -doubleClickCommand "EPCurveToolOptions" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Convert polygon edges to nurbs curves." 
        -enableBackground 0
        -align "center" 
        -label "Polygon Edges to Curve" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "polyEdgeToCurves.png" 
        -image1 "polyEdgeToCurves.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateCurveFromPoly" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Rebuild curve options" 
        -enableBackground 0
        -align "center" 
        -label "Rebuild Curve Option Box" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "rebuildCurve.png" 
        -image1 "rebuildCurve.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "RebuildCurveOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 0
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "blue" 
        -enableBackground 1
        -align "center" 
        -label "blue" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "blue" 
        -overlayLabelColor 1 1 1 
        -overlayLabelBackColor 0 0 1 1 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "string $sl[] = `ls -sl`;\nint $numSel = size($sl);\n\nfor( $i = 0; $i < $numSel; $i++ ){\n\t\tsetAttr ($sl[$i]+\".overrideEnabled\") 1;\n\t\tsetAttr ($sl[$i]+\".overrideColor\") 6;\n}" 
        -sourceType "mel" 
        -commandRepeatable 0
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 0
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "purple" 
        -enableBackground 1
        -align "center" 
        -label "purple" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "purple" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 1 0 1 1 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "string $sl[] = `ls -sl`;\nint $numSel = size($sl);\n\nfor( $i = 0; $i < $numSel; $i++ ){\n\t\tsetAttr ($sl[$i]+\".overrideEnabled\") 1;\n\t\tsetAttr ($sl[$i]+\".overrideColor\") 9;\n}" 
        -sourceType "mel" 
        -commandRepeatable 0
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 0
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "red" 
        -enableBackground 1
        -align "center" 
        -label "red" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "red" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 1 0 0 1 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "string $sl[] = `ls -sl`;\nint $numSel = size($sl);\n\nfor( $i = 0; $i < $numSel; $i++ ){\n\t\tsetAttr ($sl[$i]+\".overrideEnabled\") 1;\n\t\tsetAttr ($sl[$i]+\".overrideColor\") 13;\n}" 
        -sourceType "mel" 
        -commandRepeatable 0
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 0
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "green" 
        -enableBackground 1
        -align "center" 
        -label "green" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "green" 
        -overlayLabelColor 0.66443 0.66443 0.66443 
        -overlayLabelBackColor 0 1 0 1 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "string $sl[] = `ls -sl`;\nint $numSel = size($sl);\n\nfor( $i = 0; $i < $numSel; $i++ ){\n\t\tsetAttr ($sl[$i]+\".overrideEnabled\") 1;\n\t\tsetAttr ($sl[$i]+\".overrideColor\") 14;\n}" 
        -sourceType "mel" 
        -commandRepeatable 0
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 0
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "yellow" 
        -enableBackground 1
        -align "center" 
        -label "yellow" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "yellow" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 1 1 0 1 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "string $sl[] = `ls -sl`;\nint $numSel = size($sl);\n\nfor( $i = 0; $i < $numSel; $i++ ){\n\t\tsetAttr ($sl[$i]+\".overrideEnabled\") 1;\n\t\tsetAttr ($sl[$i]+\".overrideColor\") 17;\n}" 
        -sourceType "mel" 
        -commandRepeatable 0
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "cryan" 
        -enableBackground 1
        -align "center" 
        -label "cryan" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "cryan" 
        -overlayLabelColor 0.89 0.89 0.89 
        -overlayLabelBackColor 0 1 1 1 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "string $sl[] = `ls -sl`;\nint $numSel = size($sl);\n\nfor( $i = 0; $i < $numSel; $i++ ){\n\t\tsetAttr ($sl[$i]+\".overrideEnabled\") 1;\n\t\tsetAttr ($sl[$i]+\".overrideColor\") 18;\n}\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "pink" 
        -enableBackground 0
        -align "center" 
        -label "pink" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "pink" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 1 0.690196 0.690196 1 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "string $sl[] = `ls -sl`;\nint $numSel = size($sl);\n\nfor( $i = 0; $i < $numSel; $i++ ){\n\t\tsetAttr ($sl[$i]+\".overrideEnabled\") 1;\n\t\tsetAttr ($sl[$i]+\".overrideColor\") 20;\n}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create hair options" 
        -enableBackground 0
        -align "center" 
        -label "menuItem2138" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Cho" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconHair.png" 
        -image1 "menuIconHair.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateHairOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "UvTrans" 
        -enableBackground 0
        -align "center" 
        -label "UVTransferTool" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "UvTr" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "\n/*\n    Script:     scUVTransfer.mel\n\n    Descr:         Transfers UV sets of multiple objects\n                Original code based on Suchan Bajracharya's SRB ,Ali Asad Jafri- UV Transfer\n                Logic changed and some features added to this script to allow a little more flexibility.\n\t\t\t\tfixed to work with non skinned objs.\n\t\t\t\t\n    Date:       5th September 2012\n    \n    Update:     Transfer Shaders on group of objects and UV transfer on groups\n*/\n\n/////////////////////////////////\n//\n//    scUVTransfer\n//\n//    Desc:    This tool is used to automatically transfer UV Sets from multiple objects.\n//        To transfer UV sets load source objects and then target objects. Click apply to transfer\n/////////////////////////////////\n\n// Global Procedure\nglobal proc scUVTransfer() {\n\n    // User Interface  \n    if (`window -exists scUVTransferUI`) deleteUI scUVTransferUI;\n\n    if (`windowPref -exists scUVTransferUI`) windowPref -r scUVTransferUI; \n    \n    window -rtf 1\n           -title \"UV Transfer\" -width 410\n           scUVTransferUI;\n\n    string $about = \"print \\\"UV Transfer v1.1 \\\\n\\\"\";\n    // Window Menu \n    menuBarLayout;\n            \n    menu -l \"Edit\";\n        menuItem -l \"Reset\" -c scUVTransferReset;\n    \n    menu -l \"Help\";\n        menuItem -l \"Help...\" -c scUVTransferHelp;\n        menuItem -divider true;\n        menuItem -l \"About\" -c $about;    \n\n    columnLayout \n        -adjustableColumn true\n        -columnAlign \"center\";\n\n    separator -h 10;\n    text \n        -label \"Note: Polygons both source and target objects must have same topology.\";        \n    separator -h 10;     \n\n    setParent..;\n    setParent..;\n                    \n    columnLayout -adj 1; \n    \n    rowLayout \n        -numberOfColumns 2\n        -columnWidth2 200 200    \n        -columnAttach 1 \"both\" 5\n        -columnAttach 2 \"both\" 5;\n        \n    // source list\n    columnLayout \n        -adjustableColumn true\n        -columnAlign \"center\";\n\n    text \n        -label \"Source Objects\";\n        \n    textScrollList \n        -numberOfRows 20\n        -allowMultiSelection true\n        scUVSourceTSL;\n\n    setParent..;\n    \n    //Target List\n    columnLayout \n        -adjustableColumn true\n        -columnAlign \"center\";\n    //textScrollList vrTmpSourceTSL;\n    text \n        -label \"Target Objects\";\n    \n    textScrollList \n        -numberOfRows 20\n        -allowMultiSelection true\n        scUVTargetTSL;\n        \n    setParent..;\n    setParent..;    \n    separator -h 10; \n\n        \n    rowLayout \n        -numberOfColumns 2\n        -columnWidth2 200 200\n        -columnAttach 1 \"both\" 5\n        -columnAttach 2 \"both\" 5;\n        \n    radioCollection scUVTransferRadioCollection; \n        radioButton -sl -label \"Transfer One --> One\" scUVTransferOneRB;\n        radioButton -label \"Transfer One --> All\" scUVTransferAllRB;\n      \n    setParent..;\n    separator -h 10;\n    setParent..;\n\n    rowLayout \n        -numberOfColumns 4\n        -columnWidth4 100 100 100 100\n        -columnAttach 1 \"both\" 5\n        -columnAttach 2 \"both\" 5\n        -columnAttach 3 \"both\" 5\n        -columnAttach 4 \"both\" 5;\n        \n    button -bgc 0.8 0.8 0.8 -l \"Up\" -c \"scSelItemUp(\\\"scUVSourceTSL\\\")\";\n    button -bgc 0.8 0.8 0.8 -l \"Down\" -c \"scSelItemDn(\\\"scUVSourceTSL\\\")\";\n  \n    button -bgc 0.8 0.8 0.8 -l \"Up\" -c \"scSelItemUp(\\\"scUVTargetTSL\\\")\";\n    button -bgc 0.8 0.8 0.8 -l \"Down\" -c \"scSelItemDn(\\\"scUVTargetTSL\\\")\";\n    \n    setParent..;\n\n    rowLayout \n        -numberOfColumns 2\n        -columnWidth2 200 200\n        -columnAttach 1 \"both\" 5\n        -columnAttach 2 \"both\" 5;\n        \n    button -bgc 0.8 0.8 0.8 -l \"Add Source Objects\" -c \"scUVAddToList(0)\";\n    button -bgc 0.8 0.8 0.8 -l \"Add Target Objects\" -c \"scUVAddToList(1)\";\n    \n    setParent..;\n\n    rowLayout \n        -numberOfColumns 2\n        -columnWidth2 200 200\n        -columnAttach 1 \"both\" 5\n        -columnAttach 2 \"both\" 5;\n        \n    button -bgc 0.5 0.5 0.5 -l \"Remove All Source Objects\" -c (\"textScrollList -edit -removeAll scUVSourceTSL\");\n    button -bgc 0.5 0.5 0.5 -l \"Remove All Target Objects\" -c (\"textScrollList -edit -removeAll scUVTargetTSL\");\n    \n    //Set Parent to the Main Layout\n    setParent..; \n    button -l \"Apply\" -c \"scUVTransferProc\"; \n    showWindow scUVTransferUI;\n    \n}\n// Add to list procedure\nglobal proc scUVAddToList(int $choice)\n{\n    string $scSelObjs[] = `ls -sl`;\n    \n    string $buffer[];\n    string $shad[];\n    string $shader[];\n\n    if($choice == 0)\n    {\n        for ($objs in sort($scSelObjs)) \n        {\n            textScrollList -edit -append $objs scUVSourceTSL;\n        }\n    }\n    else\n    {\n        for ($objs in sort($scSelObjs))\n        {\n            textScrollList -edit -append $objs scUVTargetTSL;        \n        }\n    }\n}\n\n// Procedure for transfer\nglobal proc scUVTransferProc() {\n\n    int $scUVTransferOneOptionVar = `radioButton -q -sl scUVTransferOneRB`;\n    int $scUVTransferAllOptionVar = `radioButton -q -sl scUVTransferAllRB`;\n    \n    string $scSourceObjectsList[] = `textScrollList -q -ai scUVSourceTSL`;\n    string $scTargetObjectsList[] = `textScrollList -q -ai scUVTargetTSL`;\n\n    //string $scSourceObjectsList[] = `textScrollList -q -ai vrTmpSourceTSL`;\n    //string $scTargetObjectsList[] = `textScrollList -q -ai vrTmpTargetTSL`;\n    \n\n    int $scSizeSourceObjs = `size $scSourceObjectsList`;\n    int $scSizeTargetObjs = `size $scTargetObjectsList`;\n    \n    string $transMethod = \"clean\";\n// For One --> To All. UV Transfer.\n    if ($scUVTransferAllOptionVar == 1) \n    {\n        if($scSizeSourceObjs == 1)\n        {\n            for ($objs in $scTargetObjectsList)\n            {\n\n\t\t\t\tif ($transMethod == \"clean\"){\n\t\t\t\tscCleanTransferUV ( $scSourceObjectsList[0], $objs);\n\t\t\t\t}\n\t\t\t\telse if ($transMethod == \"replaceShape\"){\n\t\t\t\tscTransferUvs( $scSourceObjectsList[0], $objs);}\n            }      \n            print \"UV Transfer v1.1 has sucessfully transferred the UV...\\n\";  \n        }\n        else\n        {\n            warning \"UV Transfer v1.1 has encounterred a problem. Source object are great than target objects...terminating...\\n\";\n        }    \n    }\n    \n// For One --> to One. UV Transfer.    \n    if ($scUVTransferOneOptionVar == 1)\n    {\n        if ($scSizeSourceObjs == $scSizeTargetObjs)\n        {\n            for($i=0; $i<$scSizeSourceObjs; $i++)\n            {\n                //scTransferUvs( $scSourceObjectsList[$i], $scTargetObjectsList[$i]);\n\t\t\t\tscCleanTransferUV ( $scSourceObjectsList[$i], $scTargetObjectsList[$i]);\n            }\n            print \"UV Transfer v1.1 has sucessfully transferred the UV...\\n\";  \n        }\n        else \n        {\n              warning \"UV Transfer v1.1 has encounterred a problem. Source object is not equal to target objects...terminating...\\n\";        \n        }\n    } \n}\n\n// Help Window.\nglobal proc scUVTransferHelp()\n{\n    if (`window -exists scUVTransferHelpUI`) deleteUI scUVTransferHelpUI;\n\n    if (`windowPref -exists scUVTransferHelpUI`) windowPref -r scUVTransferHelpUI; \n\n    window -mxb 0\n            -wh 445 379\n            -title \"UV Transfer v1.1 Help\" \n            scUVTransferHelpUI;\n\n    $scWindowCollapseCmd = \"window -e -wh 445 20 scUVTransferHelpUI\";\n    $scWindowExpandCmd = \"window -e -wh 445 379 scUVTransferHelpUI\";\n\n    frameLayout -l \"Help\"\n                -collapsable on\n                // -collapse on\n                -borderStyle \"etchedIn\"\n                -marginHeight 2\n                -marginWidth 2\n                -cc $scWindowCollapseCmd\n                -ec $scWindowExpandCmd\n                helpFrame;\n\n    columnLayout mainColumn;\n    string $helpContent;\n\n    $helpContent = (\"This script eases the pain of transfering UV's from a list of objects either One to All, or One to One in List.\"\n                    + \"\\n\\n\"\n                    + \"Polygon objects must have same topology for UV to transfer properly.Poly transfer history will be smartly removed\\n\"           \n                    + \"\\n\"\n                    + \"\\n\"\n                    +\"Thanks\");\n\n    scrollField -wordWrap true -ed off -w 435 -h 350 -text $helpContent helpScroll;\n    setParent mainColumn;\n\n\n    showWindow scUVTransferHelpUI;\n\n}\n\n// Reset UV Transfer utility.\nglobal proc scUVTransferReset() {\n    textScrollList -edit -removeAll scUVSourceTSL;\n    textScrollList -edit -removeAll scUVTargetTSL;\n    textScrollList -edit -removeAll scTmpSourceTSL;\n    textScrollList -edit -removeAll scTmpTargetTSL;\n    radioCollection -edit -select scUVTransferOneRB scUVTransferRadioCollection;    \n}\n\n\n\nglobal proc scSelItemUp(string $scTSLName)\n{\n    int $scSelItemIndex[] = `textScrollList -q -sii $scTSLName`;\n\n    if (size($scSelItemIndex) == 0)\n    {\n        error \"No Items Selected!\";\n    }\n\n    int $scItemIndex = $scSelItemIndex[0];\n\n    $scItemIndex--;\n\n    if ($scItemIndex > 0) {\n        string $scSelItemIndexContent[] = `textScrollList -q -si $scTSLName`;\n        string $scItemContent = $scSelItemIndexContent[0];\n        textScrollList -e -rii $scSelItemIndex[0] $scTSLName;\n        textScrollList -e -ap $scItemIndex $scItemContent $scTSLName;\n        textScrollList -e -si $scItemContent $scTSLName;\n    }\n}\n\nglobal proc scSelItemDn(string $scTSLName)\n{\n    int $scSelItemIndex[] = `textScrollList -q -sii $scTSLName`;\n\n    if (size($scSelItemIndex) == 0)\n    {\n        error \"No Items Selected!\";\n    }\n\n    int $scItemIndex = $scSelItemIndex[0];\n    $scItemIndex++;\n    if ($scItemIndex <= `textScrollList -q -ni $scTSLName`){\n        string $scSelItemIndexContent[] = `textScrollList -q -si $scTSLName`;\n        string $scItemContent = $scSelItemIndexContent[0];\n        textScrollList -e -rii $scSelItemIndex[0] $scTSLName;\n        textScrollList -e -ap $scItemIndex $scItemContent $scTSLName;\n        textScrollList -e -si $scItemContent $scTSLName;\n    }\n}\n\n// scTransferUvs (\"headGeo2\",\"headGeo\")\n// transfers uv's by physically transsfering node to destination orig node\nglobal proc scTransferUvs(string $sourceObj,string $targetObj)\n{\n\n    // find targetOrig\n    $targetOrig = `scFindOrigNode ($targetObj)`;\n    if(`objExists $targetOrig`)\n    {\n        // duplicate put shape node of source object to target\n        $sourceShapeNode = `listRelatives -typ shape $sourceObj`;\n        $dupNode = `duplicate -rr -n ($sourceObj+\"_temp\") $sourceObj `;\n        $dupSourceShapeNode = `listRelatives -typ shape $dupNode[0]`;\n        scCleanShape ($dupSourceShapeNode[0]);\n        parent -r -s $dupSourceShapeNode[0] $targetObj;\n        delete $dupNode[0];\n        // find targetOrig plug\n        $destinPlug = `connectionInfo -destinationFromSource ($targetOrig + \".worldMesh\")`;\n        setAttr ($dupSourceShapeNode[0] +\".intermediateObject\") 1;\n        connectAttr -f ($dupSourceShapeNode[0] + \".worldMesh\") $destinPlug;\n        delete $targetOrig;\n        rename $dupSourceShapeNode[0] $targetOrig ;\n    }\n\n    else\n    {    \n        print (\"There is no intermediate object connected to destination target object, transferring UV on shape node instead \\n\")    ;    \n        select -r $sourceObj $targetObj;\n        transferAttributes -transferUVs 2 -sampleSpace 4 -searchMethod 3 -colorBorders 1 ;\n        select -r $targetObj;\n        //delete -ch;\n        select -d;\n    }\n}\n//scFindOrigNode(\"polySurface2\")\nglobal proc string scFindOrigNode(string $object)\n{\n    $targetShapeNode = `listRelatives -f -typ shape $object`;\n    string $origNode;\n    for ( $each in $targetShapeNode)\n    {\n        if (`getAttr ($each+\".intermediateObject\")`==1 && `connectionInfo -isSource ($each + \".worldMesh\")` == 1)\n        {\n        $origNode = $each;\n        }\n    }\n\n    return $origNode;\n}\n\nglobal proc scCleanShape(string $object)\n{\n    string $ios[]= `listConnections -s 1 -d 0 -type \"groupId\" $object`;\n    if(`size $ios`) delete $ios ;\n\n    $mereKarnameIN = `listConnections -s 1 -d 0 -c 1 -p 1 $object `;\n    $mereKarnameOUT = `listConnections -s 0 -d 1 -c 1 -p 1 $object `;\n    for ($i=0;$i<`size $mereKarnameOUT`;$i++)\n    {\n        disconnectAttr ($mereKarnameOUT[$i]) $mereKarnameOUT[$i+1];\n        $i++;\n    }\n\n    for ($i=0;$i<`size $mereKarnameIN`;$i++)\n    {\n        disconnectAttr ($mereKarnameIN[$i+1]) $mereKarnameIN[$i];\n        $i++;\n    }\n}\n\n//scCleanTransferUV(\"polySurface2__\",\"polySurface2\")\nglobal proc scCleanTransferUV(string $sourceObj, string $targetObj)\n{\n\n\t//try to do it by just reading SECOND shape node (first is shape, then ORIG, then other shape)\n    // find targetOrig\n    $targetOrig = `scFindOrigNode ($targetObj)`;\n    if(`objExists $targetOrig`)\n\t\t{\n\n\t\t//turn off intermediate object setting on orig\n\t\tsetAttr ($targetOrig + \".intermediateObject\") 0;\n\t\t//transfer uv's to \"orig\" shape of target\n\t\tselect -r $sourceObj;\n\t\tselect -add $targetOrig;\n\t\ttransferAttributes -pos 0 -nml 0 -uvs 2 -col 2 -spa 4 -suv \"map1\" -tuv \"map1\" -sm 3 -fuv 0 -clb 1;\n\t\tselect -cl;\n\t\t//delete history on target orig then turn back on intermediate object attr\n\t\tdelete -ch $targetOrig;\n\t\tsetAttr ($targetOrig + \".intermediateObject\") 1;\n\n\t\t}\n\t\n\telse \t\n\t{\n        print (\"There is no intermediate object connected to destination target object, transferring UV on shape node instead \\n\")    ;    \n        select -r $sourceObj $targetObj;\n        transferAttributes -transferUVs 2 -sampleSpace 4 -searchMethod 3 -colorBorders 1 ;\n        select -r $targetObj;\n        delete -ch;\n        select -d;\t\n\t}\n}\n\nscUVTransfer;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "SculptInbetweenEditor" 
        -enableBackground 0
        -align "center" 
        -label "SculptInbetweenEditor" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "dslSieIcon.xpm" 
        -image1 "dslSieIcon.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import dslSculptInbetweenEditor as dslSie\ncreate = dslSie.SculptInbetweenEditor()\ncreate.ui()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Paint skin weights tool options" 
        -enableBackground 0
        -align "center" 
        -label "skinWeightPaintDialogItem" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "paintSkinWeights.png" 
        -image1 "paintSkinWeights.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ArtPaintSkinWeightsToolOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;

} 
