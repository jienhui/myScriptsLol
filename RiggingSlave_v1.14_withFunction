from PySide.QtGui import *
from PySide.QtCore import *
import maya.OpenMayaUI as mui
import maya.cmds as cmds
from shiboken import wrapInstance
import proxySkeleton_Cl as PS

########################################################################################### 

# Main UI
def mayaMainWindow():
    mainWindow= mui.MQtUtil.mainWindow()
    return wrapInstance(long(mainWindow), QWidget)

class Form(QDialog):
    def __init__(self, parent=mayaMainWindow()):
        super(Form, self).__init__()
        # Menu Bar
        bar= QMenuBar()
        
        barFile= bar.addMenu("Edit")
        self.fileReset= barFile.addAction("Reset      ")
        self.fileReset.setShortcut("Ctrl + R")
        self.fileReset.triggered.connect( self.resetUI )
        
        barFile.addSeparator()
        
        fileQuit= barFile.addAction("Quit      ")
        self.connect( fileQuit, SIGNAL("triggered()"), SLOT("reject()") )

        barHelp= bar.addMenu("Help")
        helpReadme= barHelp.addAction("ReadMe      ")
        helpReadme.triggered.connect( self.readMeDialog )
          
        # Tab Widget
        self.tab= QTabWidget()
        self.tab1= QWidget()
        self.tab2= QWidget()
        self.tab3= QWidget()
        self.tab.addTab( self.tab1, "Prop" )
        self.tab.addTab( self.tab2, "Skeleton" )
        self.tab.addTab( self.tab3, "AutoRig" )
        self.tab1UI()
        self.tab2UI()
        self.tab3UI()
        
        # Layout
        mainLayout= QVBoxLayout()
        mainLayout.addWidget( bar )
        mainLayout.setSpacing(5)
        mainLayout.addWidget( self.tab )
        mainLayout.stretch(1)
        # Window Structure
        self.setLayout(mainLayout)
        #self.resize( 220, 400 )
        self.setWindowTitle("RiggingSlave v1.0")
        self.setObjectName("RiggingSlave v1.0")
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
    
    def dockUi_Fn(self):
        
        if cmds.dockControl( "RiggingDock", q=1, ex=1 ):
            cmds.deleteUI( "RiggingDock" )
        floatingLayout= cmds.paneLayout( configuration= 'single' )
        allowAreas= ['right', 'left']
        cmds.dockControl( 'RiggingDock', area= 'right', allowedArea= allowAreas, content= floatingLayout, label='Rigging Slave' )
        cmds.control( "RiggingSlave v1.0", e=1, p= floatingLayout)
        
        return True
        
###########################################################################################         
    
    # Menu Function
    def resetUI(self):
        # reset Function
        self.addCnstRB.setChecked(True)
        self.wireInOneRB.setChecked(True)
        self.crvLE.clear()
        self.ctrlSB.setValue( 3 )
        self.yesRB.setChecked(True)
        self.qYesRB.setChecked(True)
        self.bendyBox.setChecked(True)
        self.allRB.setChecked(True)
        self.qBendyBox.setChecked(True)
        self.qAllRB.setChecked(True)
        print "Tool Reset.",
        
    def readMeDialog(self):
        # Read Me Function
        print "readMe"
        
###########################################################################################                
    
    # Prop Tab UI
    def tab1UI(self):
        tab1Layout= QVBoxLayout()
        tab1Layout.addWidget( self.propGrpBox() )
        tab1Layout.addWidget( self.ropeGrpBox() )
        tab1Layout.addWidget( self.cRigGrpBox() )
        self.tab1.setLayout( tab1Layout )
        tab1Layout.addStretch(1)
    
    def propGrpBox(self):
        propLayout= QGridLayout()
        propBox= QGroupBox("Auto Prop Rig")

        ctrkMLabel= QLabel( "Method" )
        self.addSkinRB= QRadioButton("&Add Joint")
        self.addCnstRB= QRadioButton("&Constraint")
        self.propRigBttn= QPushButton( "Rig" )
        
        self.addCnstRB.setChecked(True)
        
        propLayout.addWidget( ctrkMLabel, 0, 0, 1, 3 )
        propLayout.addWidget( self.addSkinRB, 1, 0 )
        propLayout.addWidget( self.addCnstRB, 1, 1 )
        propLayout.addWidget( self.propRigBttn, 2, 0, 1, 3 )
        propBox.setLayout( propLayout )
    
        self.propRigBttn.clicked.connect( self.PropAutoRig )

        return propBox
        

    ###########################################################################################        
    ########################################################################################### 

    def PropAutoRig(self):
         selObj= cmds.ls(sl=1)
         cmds.select(cl=1)
         
         if self.addSkinRB.isChecked() == True :
             if cmds.objExists( "JNT_GRP" ) == True :
                 pass
             else:
                 jntGrp= cmds.group( n="JNT_GRP", em=1 )
         
         if cmds.objExists( "CTL_GRP" ) == True :
             pass
         else:
             ctrlGrp= cmds.group( n="CTL_GRP", em=1 )

         if len(selObj) > 0 :
             for each in selObj:
                 objCentre= cmds.objectCenter( each, gl= True )
                 rtPiv= cmds.xform( each, q=True, ro= True, ws=True )
                 tmpLoc= cmds.spaceLocator( n="TmpLoc" )[0]
                 cmds.xform( tmpLoc, t= objCentre, ro= rtPiv)
                 cmds.select(cl=1)
                 ctrl= cmds.circle( n= '%s_CTL' % each, nr=(0,1,0), ch=0 )[0]
                 cmds.setAttr( "%s.v" % ctrl, l=1, k=0, ch=0 )
                 cmds.addAttr( ctrl, ln= "extra", at= "enum", en= "________")
                 cmds.setAttr( "%s.extra" % ctrl, e=True, ch=True, l=True, k=True )
                 cmds.addAttr( ctrl, ln= "geoVisibility", at= "long", min=0, max=1, dv=1 )
                 cmds.setAttr( "%s.geoVisibility" % ctrl,e= True, k=True )
                 cmds.setAttr( '%s.overrideEnabled' % ctrl, 1 )
                 cmds.setAttr( '%s.overrideColor' % ctrl, 17 )
                 space= cmds.group( n='%s_GRP' % ctrl, em=0 )
                 tmpCnst= cmds.parentConstraint( tmpLoc, space, mo=0 )
                 cmds.delete( tmpCnst, tmpLoc )
                 cmds.parent( space, "CTL_GRP" )
                 if self.addSkinRB.isChecked() == True :
                     jnt= cmds.joint( n="%s_JNT" % each )
                     cmds.parent( jnt, "JNT_GRP" )
                     tmpCnst= cmds.parentConstraint( space, jnt, mo=0 )
                     cmds.delete( tmpCnst )
                     cmds.skinCluster( jnt, each, n= "%sShape_skinCluster" % each )
                     cmds.parentConstraint( ctrl, jnt, mo=0 )
                     cmds.scaleConstraint( ctrl, jnt, mo=0 )
                     cmds.connectAttr( "%s.geoVisibility" % ctrl, "%s.v" % each )                     
                 else:
                     cmds.parentConstraint( ctrl, each,  mo=1 )
                     cmds.scaleConstraint( ctrl, each, mo=1 )
                     cmds.connectAttr( "%s.geoVisibility" % ctrl, "%s.v" % each )
                 print "Added Rig To All Selected Items. ",
         else:
             cmds.warning( "Nothing is selected!!!" )
            
    ########################################################################################### 
    ########################################################################################### 
###########################################################################################         
    
    def ropeGrpBox(self):
        ropeLayout= QGridLayout()
        ropeBox= QGroupBox("Auto Rope Rig")
        
        ctrlMLabel= QLabel( "Method :" )
        IKSpineRB= QRadioButton("&IK Spine")
        self.wireInOneRB= QRadioButton( "&Wire Deformer" )

        self.crvLE= QLineEdit()
        self.crvLE.setPlaceholderText( "Please add curve..." )
        crvBttn= QPushButton( "Add Curve" )
        crvBttn.setStyleSheet("background-color: #333333 ")
        crvMenu = QMenu(self)
        crvMenu.addAction("&Add Selected Curve")
        crvMenu.addAction("&Poly Edge To Curve")
        crvMenu.addAction("&Create Curve")
        crvBttn.setMenu(crvMenu)      
        
        ctrlLabel= QLabel("Ctrls number:")
        self.ctrlSB= QDoubleSpinBox()
        self.ctrlSB.setRange( 3, 1000 )
        
        ropeRigBttn= QPushButton( "Rig" )
        
        self.wireInOneRB.setChecked(True)
        
        ropeLayout.addWidget( ctrlMLabel, 0, 0 )
        ropeLayout.addWidget( IKSpineRB, 1, 0 )
        ropeLayout.addWidget( self.wireInOneRB, 1, 1 )
        ropeLayout.addWidget( self.crvLE, 2, 0, 1, 3 )
        ropeLayout.addWidget( crvBttn, 3, 0, 1, 3 )
        ropeLayout.addWidget( ctrlLabel, 4, 0 )
        ropeLayout.addWidget( self.ctrlSB, 4, 1 )
        ropeLayout.addWidget( ropeRigBttn, 5, 0, 1, 3 )
        ropeBox.setLayout( ropeLayout )
        
        return ropeBox
        
    def cRigGrpBox(self):
        cRigLayout= QVBoxLayout()
        cRigBox= QGroupBox( "Master Controllers")
        
        cRigBttn= QPushButton( "Add" )
        cRigBttn.setStyleSheet("background-color: #777777")
        
        cRigLayout.addWidget( cRigBttn )
        cRigBox.setLayout( cRigLayout )
        
        return cRigBox

########################################################################################### 
    
    # skeleton Tab UI
    def tab2UI(self):
        tab2Layout= QVBoxLayout()
        tab2Layout.addWidget( self.proxyJointGrpBox() )
        tab2Layout.addWidget( self.finalizeGrpBox() )
        self.tab2.setLayout( tab2Layout )
        tab2Layout.addStretch(1)
    
    def proxyJointGrpBox(self):
        pjLayout= QGridLayout()
        pjBox= QGroupBox("Proxy Joint")
        self.torsoCB= QCheckBox( "  Setup Torso" )
        self.torsoCB.setChecked(True)
        pjLayout.addWidget( self.headGrpBox() )
        pjLayout.addWidget( self.torsoCB )
        pjLayout.addWidget( self.armGrpBox() )
        pjLayout.addWidget( self.legGrpBox() )
        pjBox.setLayout( pjLayout )
        
        return pjBox
    
    def headGrpBox(self):
        headLayout= QGridLayout()
        self.headBox= QGroupBox("Setup Head")
        self.headBox.setCheckable(True)
        self.headBox.setChecked(True)
        
        self.eyeCB= QCheckBox( "Eyes" )
        self.eyeCB.setChecked(True)
        self.jawCB= QCheckBox( "Jaw" )
        self.jawCB.setChecked(True)
        self.tongueCB= QCheckBox( "Tongue" )
        self.tongueCB.setChecked(True)
        self.teethCB= QCheckBox( "Teeth" )
        self.teethCB.setChecked(True)        
        
        headLayout.addWidget( self.eyeCB, 0,0 )
        headLayout.addWidget( self.jawCB, 0,1 )
        headLayout.addWidget( self.tongueCB, 1,0 )
        headLayout.addWidget( self.teethCB, 1,1 )
        self.headBox.setLayout( headLayout )
        
        return self.headBox
    
    def armGrpBox(self):
        armLayout= QGridLayout()
        self.armBox= QGroupBox("Setup Arm")
        self.armBox.setCheckable(True)
        self.armBox.setChecked(True)
        
        self.aCB= QCheckBox( "Symmetrical Arm" ) 
        self.aCB.setChecked(True)
        
        armLayout.addWidget( self.fingersGrpBox(), 0,0,1,3 )
        armLayout.addWidget( self.aCB, 1,0 )
        self.armBox.setLayout( armLayout )
        
        return self.armBox
        
    def fingersGrpBox(self):
        fingerLayout= QGridLayout()
        self.fingerBox= QGroupBox("Setup Finger")
        self.fingerBox.setCheckable(True)
        self.fingerBox.setChecked(True)
        
        fingerLabel= QLabel("Finger Number:")
        self.finNoSB= QDoubleSpinBox()
        self.finNoSB.setRange( 1, 5 )
        self.finNoSB.setValue( 5 )
        
        fingerJntLabel= QLabel("Finger Joint:")
        self.finJntNoSB= QDoubleSpinBox()
        self.finJntNoSB.setRange( 1, 10 )
        self.finJntNoSB.setValue( 4 )
        
        fingerLayout.addWidget( fingerLabel, 0, 0 )
        fingerLayout.addWidget( self.finNoSB, 0, 1 )
        fingerLayout.addWidget( fingerJntLabel, 1, 0 )
        fingerLayout.addWidget( self.finJntNoSB, 1, 1 )
        self.fingerBox.setLayout( fingerLayout )
        
        return self.fingerBox
        
    def legGrpBox(self):
        legLayout= QGridLayout()
        self.legBox= QGroupBox("Setup Leg")
        self.legBox.setCheckable(True)
        self.legBox.setChecked(True)
        
        self.lCB= QCheckBox( "Symmetrical Leg" ) 
        self.lCB.setChecked(True)
        
        legLayout.addWidget( self.lCB, 0, 0 )
        self.legBox.setLayout( legLayout )
        
        return self.legBox
        
    def finalizeGrpBox(self):
        finLayout= QGridLayout()
        finBox= QGroupBox( "Finalize" )
        
        self.createBttn= QPushButton( "&Create" )
        resetBttn= QPushButton( "&Reset" )
        resetBttn.setStyleSheet("background-color: #333333 ")
        finBttn= QPushButton( "&Polish" )
        finBttn.setStyleSheet("background-color: #666666")
        
        # SIGNAL
        self.createBttn.clicked.connect( self.createSkeleton )
        #resetBttn.clicked.connect( self.resetSkeletonPose )
        #finBttn.clicked.connect( self.polishSkeleton )
        
        finLayout.addWidget( self.createBttn,0,0 )
        finLayout.addWidget( self.scaleGrpBox() )
        finLayout.addWidget( resetBttn, 2,0 )
        finLayout.addWidget( finBttn, 3,0 )        
        finBox.setLayout( finLayout )
        
        return finBox
    
    def scaleGrpBox(self):
        
        scLayout= QGridLayout()
        scBox= QGroupBox( "Scale" )
        
        self.scaleSlider= QSlider( Qt.Horizontal )
        self.scaleSlider.setRange( 0.01, 10 )
        self.scaleSlider.setValue( 1 )
        self.scaleSlider.tickPosition()
        self.scaleSB= QDoubleSpinBox()
        self.scaleSB.setRange( 0.01, 10 )
        self.scaleSB.setSingleStep(0.1)
        self.scaleSB.setValue( 1 )
        
        # SIGNAL
        self.connect(self.scaleSlider, SIGNAL("valueChanged(int)"), self.updateScaleSB)
        self.connect(self.scaleSB, SIGNAL("valueChanged(double)"), self.updateScaleSlider)
        
        scLayout.addWidget( self.scaleSlider,0,0 )
        scLayout.addWidget( self.scaleSB, 0,1 )       
        scBox.setLayout( scLayout )
        
        return scBox
    ########################################################################################### 
    ###########################################################################################
    def createSkeleton(self):
        jntSize= self.scaleSB.value()
        labelVis= 0
        # Checklist
        try:
            if self.headBox.isChecked() == False:
                if self.torsoCB.isChecked() == False:
                    if self.armBox.isChecked() == False:
                        if self.legBox.isChecked() == False:
                            self.createBttn.setEnabled(False)
                        else:
                            pass
                    else:
                        pass
                else:
                    pass
            else:
                pass
       except:
           bone= PS.proxyBipedJoint_Cl( jntSize, labelVis )
           # Setup Head
           if self.headBox.isChecked() == True:
               bone.proxyHead_Fn()
               if self.eyeCB.isChecked() == True:
                   bone.proxyEyes_Fn("head_Jnt01","head_Jnt02")
               else:
                   pass
               if self.jawCB.isChecked() == True:
                   bone.proxyJaw_Fn("head_Jnt01")
                   if self.tongueCB.isChecked() == True:
                       bone.proxyTongue_Fn("jaw_Jnt01")
                   else:
                       pass
                   if self.teethCB.isChecked() == True:
                       bone.proxyTeeths_Fn("head_Jnt01","jaw_Jnt01")
                   else:
                       pass
               else:
                   pass
           
           # Setup Torso
           if self.torsoCB.isChecked() == True:
               bone.proxyTorso_Fn()
           else:
               pass
           
           # Setup Arm
           if self.armBox.isChecked() == True:
               bone.proxyArm_Fn()
               if self.fingerBox.isChecked() == True:
                   fingerNum= self.finNoSB.value()
                   fingerJntNum= self.finJntNoSB.value()
                   bone.proxyFingers_Fn("L_wrist_Jnt02","L_palm_Jnt01", fingerNum, fingerJntNum)
               else:
                   pass
               if self.aCB.isChecked() == True:
                   tmpAGrpL= cmds.group( n= "L_arm_tmpGrp", em=1 )
                   cmds.parent( "L_clavicle_Jnt01", tmpAGrpL )
                   cmds.parent( tmpAGrpL, "skeleton01" )
                   tmpAGrpR= cmds.instance( tmpAGrpL, n= tmpAGrpL.replace("L_", "R_"))[0]
                   cmds.scale( -1, 1, 1, tmpAGrpR, r=1 )
               else:
                   cmds.mirrorJoint( "L_clavicle_Jnt01", mirrorYZ= 1, mirrorBehavior= True, searchReplace=('L_', 'R_')  )                    
           else:
               pass
           # Setup Leg
           if self.legBox.isChecked() == True:
               bone.proxyLeg_Fn()
               if self.lCB.isChecked() == True:
                   tmpLGrpL= cmds.group( n= "L_leg_tmpGrp", em=1 )
                   cmds.parent( "L_hip_Jnt01", tmpAGrpL )
                   cmds.parent( tmpLGrpL, "skeleton01" )
                   tmpLGrpR= cmds.instance( tmpLGrpL, n= tmpLGrpL.replace("L_", "R_"))[0]
                   cmds.scale( -1, 1, 1, tmpLGrpR, r=1 )
               else:
                   cmds.mirrorJoint( "L_hip_Jnt01", mirrorYZ= 1, mirrorBehavior= True, searchReplace=('L_', 'R_')  )
           print "Proxy Joint Created.",
           
    def updateScaleSB(self):
        
        sliderValue= self.scaleSlider.value()
        self.scaleSB.setValue( sliderValue )
    
    def updateScaleSlider(self):
        
        SBValue= self.scaleSB.value()
        self.scaleSlider.setValue( SBValue )
    ########################################################################################### 
    ###########################################################################################
        

########################################################################################### 
        
    # Quadruped Tab UI
    def tab3UI(self):
        tab3Layout= QVBoxLayout()
        tab3Layout.addWidget( self.qBoneGrpBox() )
        tab3Layout.addWidget( self.qBindSkinGrpBox() )
        tab3Layout.addWidget( self.quadrupedRigGrpBox() )
        self.tab3.setLayout( tab3Layout )
        tab3Layout.addStretch(1)
        
    def qBoneGrpBox(self):
        qBoneLayout= QGridLayout()
        qBoneBox= QGroupBox("Proxy Joint")
        
        qMirrorLabel= QLabel( "Mirror Joint?" ) 
        self.qYesRB= QRadioButton( "Yes" )
        self.qNoRB= QRadioButton( "No" )
        
        qSetUpJntBttn= QPushButton("Create")
        qResetJntBttn= QPushButton("Reset")
        qResetJntBttn.setStyleSheet("background-color: #333333 ")
        qFreezeJntBttn= QPushButton( "Polish" )
        qFreezeJntBttn.setStyleSheet("background-color: #666666")
        
        self.qYesRB.setChecked(True)
        
        qBoneLayout.addWidget( qMirrorLabel, 0, 0 )
        qBoneLayout.addWidget( self.qYesRB, 0, 1 )
        qBoneLayout.addWidget( self.qNoRB, 0, 2 )
        qBoneLayout.addWidget( qSetUpJntBttn, 1, 0, 1, 3 )
        qBoneLayout.addWidget( qResetJntBttn, 2, 0, 1, 3 )
        qBoneLayout.addWidget( qFreezeJntBttn, 3, 0, 1, 3 )
        qBoneBox.setLayout( qBoneLayout )
        
        return qBoneBox
        
    def qBindSkinGrpBox(self):
        qBindSkinLayout= QVBoxLayout()
        qBindSkinBox= QGroupBox( "Skinning" )
        
        qBindBttn= QPushButton( "Bind Skin" )

        qBindSkinLayout.addWidget( qBindBttn )
        qBindSkinBox.setLayout( qBindSkinLayout )
        
        return qBindSkinBox
        
    def quadrupedRigGrpBox(self):
        quadrupedLayout= QVBoxLayout()
        quadrupedBox= QGroupBox( "Setup Controllers" )
        
        qSetupRigBttn= QPushButton( "Setup Rig" )
        qSetupRigBttn.setStyleSheet("background-color: #777777")
        
        quadrupedLayout.addWidget( self.qBendyBox() )
        quadrupedLayout.addWidget( qSetupRigBttn )
        quadrupedBox.setLayout( quadrupedLayout )
        
        return quadrupedBox
        
    def qBendyBox(self):
        qBendyLayout= QVBoxLayout()
        self.qBendyBox= QGroupBox("Bendy Setup")
        self.qBendyBox.setCheckable(True)
        self.qBendyBox.setChecked(True)
        
        self.qAllRB= QRadioButton( "All" )
        self.qArmRB= QRadioButton( "Arm" )
        self.qLegRB= QRadioButton( "Leg" )
        
        self.qAllRB.setChecked(True)
        
        qBendyLayout.addWidget( self.qAllRB )
        qBendyLayout.addWidget( self.qArmRB )
        qBendyLayout.addWidget( self.qLegRB )
        self.qBendyBox.setLayout( qBendyLayout )
        
        return self.qBendyBox
        

        
if __name__ == "__main__":
    if cmds.window("RiggingSlave v1.0", q=1, ex=1):
        cmds.deleteUI( "RiggingSlave v1.0" )
    a= Form()
    a.show()
